
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c2  00800060  000026c0  00002754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800222  00800222  00002916  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002916  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a45  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c55  00000000  00000000  000065c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017da  00000000  00000000  0000721a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  000089f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d2  00000000  00000000  00009058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c67  00000000  00000000  00009a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000c691  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 32       	cpi	r26, 0x29	; 41
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <main>
      8a:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
      92:	fc 01       	movw	r30, r24
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <__system_time>
      9c:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <__system_time+0x1>
      a0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <__system_time+0x2>
      a4:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <__system_time+0x3>
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	30 97       	sbiw	r30, 0x00	; 0
      ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
      ae:	60 83       	st	Z, r22
      b0:	71 83       	std	Z+1, r23	; 0x01
      b2:	82 83       	std	Z+2, r24	; 0x02
      b4:	93 83       	std	Z+3, r25	; 0x03
      b6:	08 95       	ret

000000b8 <DIO_vidSetPinMode>:
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	01 f1       	breq	.+64     	; 0xfc <DIO_vidSetPinMode+0x44>
      bc:	30 f0       	brcs	.+12     	; 0xca <DIO_vidSetPinMode+0x12>
      be:	82 30       	cpi	r24, 0x02	; 2
      c0:	b1 f1       	breq	.+108    	; 0x12e <DIO_vidSetPinMode+0x76>
      c2:	83 30       	cpi	r24, 0x03	; 3
      c4:	09 f4       	brne	.+2      	; 0xc8 <DIO_vidSetPinMode+0x10>
      c6:	4c c0       	rjmp	.+152    	; 0x160 <DIO_vidSetPinMode+0xa8>
      c8:	08 95       	ret
      ca:	41 30       	cpi	r20, 0x01	; 1
      cc:	59 f4       	brne	.+22     	; 0xe4 <DIO_vidSetPinMode+0x2c>
      ce:	2a b3       	in	r18, 0x1a	; 26
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_vidSetPinMode+0x22>
      d6:	88 0f       	add	r24, r24
      d8:	99 1f       	adc	r25, r25
      da:	6a 95       	dec	r22
      dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_vidSetPinMode+0x1e>
      de:	82 2b       	or	r24, r18
      e0:	8a bb       	out	0x1a, r24	; 26
      e2:	08 95       	ret
      e4:	2a b3       	in	r18, 0x1a	; 26
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_vidSetPinMode+0x38>
      ec:	88 0f       	add	r24, r24
      ee:	99 1f       	adc	r25, r25
      f0:	6a 95       	dec	r22
      f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_vidSetPinMode+0x34>
      f4:	80 95       	com	r24
      f6:	82 23       	and	r24, r18
      f8:	8a bb       	out	0x1a, r24	; 26
      fa:	08 95       	ret
      fc:	41 30       	cpi	r20, 0x01	; 1
      fe:	59 f4       	brne	.+22     	; 0x116 <DIO_vidSetPinMode+0x5e>
     100:	27 b3       	in	r18, 0x17	; 23
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_vidSetPinMode+0x54>
     108:	88 0f       	add	r24, r24
     10a:	99 1f       	adc	r25, r25
     10c:	6a 95       	dec	r22
     10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_vidSetPinMode+0x50>
     110:	82 2b       	or	r24, r18
     112:	87 bb       	out	0x17, r24	; 23
     114:	08 95       	ret
     116:	27 b3       	in	r18, 0x17	; 23
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_vidSetPinMode+0x6a>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	6a 95       	dec	r22
     124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_vidSetPinMode+0x66>
     126:	80 95       	com	r24
     128:	82 23       	and	r24, r18
     12a:	87 bb       	out	0x17, r24	; 23
     12c:	08 95       	ret
     12e:	41 30       	cpi	r20, 0x01	; 1
     130:	59 f4       	brne	.+22     	; 0x148 <DIO_vidSetPinMode+0x90>
     132:	24 b3       	in	r18, 0x14	; 20
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_vidSetPinMode+0x86>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	6a 95       	dec	r22
     140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_vidSetPinMode+0x82>
     142:	82 2b       	or	r24, r18
     144:	84 bb       	out	0x14, r24	; 20
     146:	08 95       	ret
     148:	24 b3       	in	r18, 0x14	; 20
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_vidSetPinMode+0x9c>
     150:	88 0f       	add	r24, r24
     152:	99 1f       	adc	r25, r25
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_vidSetPinMode+0x98>
     158:	80 95       	com	r24
     15a:	82 23       	and	r24, r18
     15c:	84 bb       	out	0x14, r24	; 20
     15e:	08 95       	ret
     160:	41 30       	cpi	r20, 0x01	; 1
     162:	59 f4       	brne	.+22     	; 0x17a <DIO_vidSetPinMode+0xc2>
     164:	21 b3       	in	r18, 0x11	; 17
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vidSetPinMode+0xb8>
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vidSetPinMode+0xb4>
     174:	82 2b       	or	r24, r18
     176:	81 bb       	out	0x11, r24	; 17
     178:	08 95       	ret
     17a:	21 b3       	in	r18, 0x11	; 17
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_vidSetPinMode+0xce>
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25
     186:	6a 95       	dec	r22
     188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_vidSetPinMode+0xca>
     18a:	80 95       	com	r24
     18c:	82 23       	and	r24, r18
     18e:	81 bb       	out	0x11, r24	; 17
     190:	08 95       	ret

00000192 <DIO_vidWritePin>:
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	01 f1       	breq	.+64     	; 0x1d6 <DIO_vidWritePin+0x44>
     196:	30 f0       	brcs	.+12     	; 0x1a4 <DIO_vidWritePin+0x12>
     198:	82 30       	cpi	r24, 0x02	; 2
     19a:	b1 f1       	breq	.+108    	; 0x208 <DIO_vidWritePin+0x76>
     19c:	83 30       	cpi	r24, 0x03	; 3
     19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_vidWritePin+0x10>
     1a0:	4c c0       	rjmp	.+152    	; 0x23a <DIO_vidWritePin+0xa8>
     1a2:	08 95       	ret
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	59 f4       	brne	.+22     	; 0x1be <DIO_vidWritePin+0x2c>
     1a8:	2b b3       	in	r18, 0x1b	; 27
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vidWritePin+0x22>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vidWritePin+0x1e>
     1b8:	82 2b       	or	r24, r18
     1ba:	8b bb       	out	0x1b, r24	; 27
     1bc:	08 95       	ret
     1be:	2b b3       	in	r18, 0x1b	; 27
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_vidWritePin+0x38>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_vidWritePin+0x34>
     1ce:	80 95       	com	r24
     1d0:	82 23       	and	r24, r18
     1d2:	8b bb       	out	0x1b, r24	; 27
     1d4:	08 95       	ret
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_vidWritePin+0x5e>
     1da:	28 b3       	in	r18, 0x18	; 24
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vidWritePin+0x54>
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	6a 95       	dec	r22
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vidWritePin+0x50>
     1ea:	82 2b       	or	r24, r18
     1ec:	88 bb       	out	0x18, r24	; 24
     1ee:	08 95       	ret
     1f0:	28 b3       	in	r18, 0x18	; 24
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_vidWritePin+0x6a>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_vidWritePin+0x66>
     200:	80 95       	com	r24
     202:	82 23       	and	r24, r18
     204:	88 bb       	out	0x18, r24	; 24
     206:	08 95       	ret
     208:	41 30       	cpi	r20, 0x01	; 1
     20a:	59 f4       	brne	.+22     	; 0x222 <DIO_vidWritePin+0x90>
     20c:	25 b3       	in	r18, 0x15	; 21
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_vidWritePin+0x86>
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	6a 95       	dec	r22
     21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_vidWritePin+0x82>
     21c:	82 2b       	or	r24, r18
     21e:	85 bb       	out	0x15, r24	; 21
     220:	08 95       	ret
     222:	25 b3       	in	r18, 0x15	; 21
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_vidWritePin+0x9c>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_vidWritePin+0x98>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	85 bb       	out	0x15, r24	; 21
     238:	08 95       	ret
     23a:	41 30       	cpi	r20, 0x01	; 1
     23c:	59 f4       	brne	.+22     	; 0x254 <DIO_vidWritePin+0xc2>
     23e:	22 b3       	in	r18, 0x12	; 18
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_vidWritePin+0xb8>
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	6a 95       	dec	r22
     24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_vidWritePin+0xb4>
     24e:	82 2b       	or	r24, r18
     250:	82 bb       	out	0x12, r24	; 18
     252:	08 95       	ret
     254:	22 b3       	in	r18, 0x12	; 18
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_vidWritePin+0xce>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	6a 95       	dec	r22
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_vidWritePin+0xca>
     264:	80 95       	com	r24
     266:	82 23       	and	r24, r18
     268:	82 bb       	out	0x12, r24	; 18
     26a:	08 95       	ret

0000026c <DIO_enuReadPin>:
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	c9 f0       	breq	.+50     	; 0x2a2 <DIO_enuReadPin+0x36>
     270:	28 f0       	brcs	.+10     	; 0x27c <DIO_enuReadPin+0x10>
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	49 f1       	breq	.+82     	; 0x2c8 <DIO_enuReadPin+0x5c>
     276:	83 30       	cpi	r24, 0x03	; 3
     278:	d1 f1       	breq	.+116    	; 0x2ee <DIO_enuReadPin+0x82>
     27a:	4b c0       	rjmp	.+150    	; 0x312 <DIO_enuReadPin+0xa6>
     27c:	29 b3       	in	r18, 0x19	; 25
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	06 2e       	mov	r0, r22
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_enuReadPin+0x1e>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_enuReadPin+0x1a>
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	82 23       	and	r24, r18
     292:	93 23       	and	r25, r19
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_enuReadPin+0x2e>
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	6a 95       	dec	r22
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_enuReadPin+0x2a>
     29e:	98 2f       	mov	r25, r24
     2a0:	38 c0       	rjmp	.+112    	; 0x312 <DIO_enuReadPin+0xa6>
     2a2:	26 b3       	in	r18, 0x16	; 22
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	06 2e       	mov	r0, r22
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_enuReadPin+0x44>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	0a 94       	dec	r0
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_enuReadPin+0x40>
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	82 23       	and	r24, r18
     2b8:	93 23       	and	r25, r19
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_enuReadPin+0x54>
     2bc:	95 95       	asr	r25
     2be:	87 95       	ror	r24
     2c0:	6a 95       	dec	r22
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_enuReadPin+0x50>
     2c4:	98 2f       	mov	r25, r24
     2c6:	25 c0       	rjmp	.+74     	; 0x312 <DIO_enuReadPin+0xa6>
     2c8:	23 b3       	in	r18, 0x13	; 19
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	06 2e       	mov	r0, r22
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_enuReadPin+0x6a>
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	0a 94       	dec	r0
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_enuReadPin+0x66>
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	82 23       	and	r24, r18
     2de:	93 23       	and	r25, r19
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_enuReadPin+0x7a>
     2e2:	95 95       	asr	r25
     2e4:	87 95       	ror	r24
     2e6:	6a 95       	dec	r22
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_enuReadPin+0x76>
     2ea:	98 2f       	mov	r25, r24
     2ec:	12 c0       	rjmp	.+36     	; 0x312 <DIO_enuReadPin+0xa6>
     2ee:	20 b3       	in	r18, 0x10	; 16
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	06 2e       	mov	r0, r22
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_enuReadPin+0x90>
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	0a 94       	dec	r0
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_enuReadPin+0x8c>
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	82 23       	and	r24, r18
     304:	93 23       	and	r25, r19
     306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_enuReadPin+0xa0>
     308:	95 95       	asr	r25
     30a:	87 95       	ror	r24
     30c:	6a 95       	dec	r22
     30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_enuReadPin+0x9c>
     310:	98 2f       	mov	r25, r24
     312:	89 2f       	mov	r24, r25
     314:	08 95       	ret

00000316 <DIO_vidSetPortMode>:
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	69 f0       	breq	.+26     	; 0x334 <DIO_vidSetPortMode+0x1e>
     31a:	28 f0       	brcs	.+10     	; 0x326 <DIO_vidSetPortMode+0x10>
     31c:	82 30       	cpi	r24, 0x02	; 2
     31e:	89 f0       	breq	.+34     	; 0x342 <DIO_vidSetPortMode+0x2c>
     320:	83 30       	cpi	r24, 0x03	; 3
     322:	b1 f0       	breq	.+44     	; 0x350 <DIO_vidSetPortMode+0x3a>
     324:	08 95       	ret
     326:	61 30       	cpi	r22, 0x01	; 1
     328:	19 f4       	brne	.+6      	; 0x330 <DIO_vidSetPortMode+0x1a>
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	8a bb       	out	0x1a, r24	; 26
     32e:	08 95       	ret
     330:	1a ba       	out	0x1a, r1	; 26
     332:	08 95       	ret
     334:	61 30       	cpi	r22, 0x01	; 1
     336:	19 f4       	brne	.+6      	; 0x33e <DIO_vidSetPortMode+0x28>
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	87 bb       	out	0x17, r24	; 23
     33c:	08 95       	ret
     33e:	17 ba       	out	0x17, r1	; 23
     340:	08 95       	ret
     342:	61 30       	cpi	r22, 0x01	; 1
     344:	19 f4       	brne	.+6      	; 0x34c <DIO_vidSetPortMode+0x36>
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	84 bb       	out	0x14, r24	; 20
     34a:	08 95       	ret
     34c:	14 ba       	out	0x14, r1	; 20
     34e:	08 95       	ret
     350:	61 30       	cpi	r22, 0x01	; 1
     352:	19 f4       	brne	.+6      	; 0x35a <DIO_vidSetPortMode+0x44>
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	81 bb       	out	0x11, r24	; 17
     358:	08 95       	ret
     35a:	11 ba       	out	0x11, r1	; 17
     35c:	08 95       	ret

0000035e <DIO_vidWritePort>:
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	41 f0       	breq	.+16     	; 0x372 <DIO_vidWritePort+0x14>
     362:	28 f0       	brcs	.+10     	; 0x36e <DIO_vidWritePort+0x10>
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	39 f0       	breq	.+14     	; 0x376 <DIO_vidWritePort+0x18>
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	39 f0       	breq	.+14     	; 0x37a <DIO_vidWritePort+0x1c>
     36c:	08 95       	ret
     36e:	6b bb       	out	0x1b, r22	; 27
     370:	08 95       	ret
     372:	68 bb       	out	0x18, r22	; 24
     374:	08 95       	ret
     376:	65 bb       	out	0x15, r22	; 21
     378:	08 95       	ret
     37a:	62 bb       	out	0x12, r22	; 18
     37c:	08 95       	ret

0000037e <DIO_vidSetLowNibbleMode>:
     37e:	cf 93       	push	r28
     380:	c8 2f       	mov	r28, r24
     382:	61 30       	cpi	r22, 0x01	; 1
     384:	a1 f4       	brne	.+40     	; 0x3ae <DIO_vidSetLowNibbleMode+0x30>
     386:	41 e0       	ldi	r20, 0x01	; 1
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	8c 2f       	mov	r24, r28
     394:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     398:	41 e0       	ldi	r20, 0x01	; 1
     39a:	62 e0       	ldi	r22, 0x02	; 2
     39c:	8c 2f       	mov	r24, r28
     39e:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	63 e0       	ldi	r22, 0x03	; 3
     3a6:	8c 2f       	mov	r24, r28
     3a8:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3ac:	13 c0       	rjmp	.+38     	; 0x3d4 <DIO_vidSetLowNibbleMode+0x56>
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	8c 2f       	mov	r24, r28
     3bc:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	62 e0       	ldi	r22, 0x02	; 2
     3c4:	8c 2f       	mov	r24, r28
     3c6:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	63 e0       	ldi	r22, 0x03	; 3
     3ce:	8c 2f       	mov	r24, r28
     3d0:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <DIO_vidSetHighNibbleMode>:
     3d8:	cf 93       	push	r28
     3da:	c8 2f       	mov	r28, r24
     3dc:	61 30       	cpi	r22, 0x01	; 1
     3de:	a1 f4       	brne	.+40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3e0:	41 e0       	ldi	r20, 0x01	; 1
     3e2:	64 e0       	ldi	r22, 0x04	; 4
     3e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3e8:	41 e0       	ldi	r20, 0x01	; 1
     3ea:	65 e0       	ldi	r22, 0x05	; 5
     3ec:	8c 2f       	mov	r24, r28
     3ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	66 e0       	ldi	r22, 0x06	; 6
     3f6:	8c 2f       	mov	r24, r28
     3f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3fc:	41 e0       	ldi	r20, 0x01	; 1
     3fe:	67 e0       	ldi	r22, 0x07	; 7
     400:	8c 2f       	mov	r24, r28
     402:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     406:	13 c0       	rjmp	.+38     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	64 e0       	ldi	r22, 0x04	; 4
     40c:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	65 e0       	ldi	r22, 0x05	; 5
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	66 e0       	ldi	r22, 0x06	; 6
     41e:	8c 2f       	mov	r24, r28
     420:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	67 e0       	ldi	r22, 0x07	; 7
     428:	8c 2f       	mov	r24, r28
     42a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <DIO_vidWriteLowNibble>:
     432:	6f 70       	andi	r22, 0x0F	; 15
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	69 f0       	breq	.+26     	; 0x452 <DIO_vidWriteLowNibble+0x20>
     438:	28 f0       	brcs	.+10     	; 0x444 <DIO_vidWriteLowNibble+0x12>
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	89 f0       	breq	.+34     	; 0x460 <DIO_vidWriteLowNibble+0x2e>
     43e:	83 30       	cpi	r24, 0x03	; 3
     440:	b1 f0       	breq	.+44     	; 0x46e <DIO_vidWriteLowNibble+0x3c>
     442:	08 95       	ret
     444:	8b b3       	in	r24, 0x1b	; 27
     446:	80 7f       	andi	r24, 0xF0	; 240
     448:	8b bb       	out	0x1b, r24	; 27
     44a:	8b b3       	in	r24, 0x1b	; 27
     44c:	68 2b       	or	r22, r24
     44e:	6b bb       	out	0x1b, r22	; 27
     450:	08 95       	ret
     452:	88 b3       	in	r24, 0x18	; 24
     454:	80 7f       	andi	r24, 0xF0	; 240
     456:	88 bb       	out	0x18, r24	; 24
     458:	88 b3       	in	r24, 0x18	; 24
     45a:	68 2b       	or	r22, r24
     45c:	68 bb       	out	0x18, r22	; 24
     45e:	08 95       	ret
     460:	85 b3       	in	r24, 0x15	; 21
     462:	80 7f       	andi	r24, 0xF0	; 240
     464:	85 bb       	out	0x15, r24	; 21
     466:	85 b3       	in	r24, 0x15	; 21
     468:	68 2b       	or	r22, r24
     46a:	65 bb       	out	0x15, r22	; 21
     46c:	08 95       	ret
     46e:	82 b3       	in	r24, 0x12	; 18
     470:	80 7f       	andi	r24, 0xF0	; 240
     472:	82 bb       	out	0x12, r24	; 18
     474:	82 b3       	in	r24, 0x12	; 18
     476:	68 2b       	or	r22, r24
     478:	62 bb       	out	0x12, r22	; 18
     47a:	08 95       	ret

0000047c <DIO_vidWriteHighNibble>:
     47c:	60 7f       	andi	r22, 0xF0	; 240
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	69 f0       	breq	.+26     	; 0x49c <DIO_vidWriteHighNibble+0x20>
     482:	28 f0       	brcs	.+10     	; 0x48e <DIO_vidWriteHighNibble+0x12>
     484:	82 30       	cpi	r24, 0x02	; 2
     486:	89 f0       	breq	.+34     	; 0x4aa <DIO_vidWriteHighNibble+0x2e>
     488:	83 30       	cpi	r24, 0x03	; 3
     48a:	b1 f0       	breq	.+44     	; 0x4b8 <DIO_vidWriteHighNibble+0x3c>
     48c:	08 95       	ret
     48e:	8b b3       	in	r24, 0x1b	; 27
     490:	8f 70       	andi	r24, 0x0F	; 15
     492:	8b bb       	out	0x1b, r24	; 27
     494:	8b b3       	in	r24, 0x1b	; 27
     496:	68 2b       	or	r22, r24
     498:	6b bb       	out	0x1b, r22	; 27
     49a:	08 95       	ret
     49c:	88 b3       	in	r24, 0x18	; 24
     49e:	8f 70       	andi	r24, 0x0F	; 15
     4a0:	88 bb       	out	0x18, r24	; 24
     4a2:	88 b3       	in	r24, 0x18	; 24
     4a4:	68 2b       	or	r22, r24
     4a6:	68 bb       	out	0x18, r22	; 24
     4a8:	08 95       	ret
     4aa:	85 b3       	in	r24, 0x15	; 21
     4ac:	8f 70       	andi	r24, 0x0F	; 15
     4ae:	85 bb       	out	0x15, r24	; 21
     4b0:	85 b3       	in	r24, 0x15	; 21
     4b2:	68 2b       	or	r22, r24
     4b4:	65 bb       	out	0x15, r22	; 21
     4b6:	08 95       	ret
     4b8:	82 b3       	in	r24, 0x12	; 18
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	82 bb       	out	0x12, r24	; 18
     4be:	82 b3       	in	r24, 0x12	; 18
     4c0:	68 2b       	or	r22, r24
     4c2:	62 bb       	out	0x12, r22	; 18
     4c4:	08 95       	ret

000004c6 <KPD_vidInit>:
     4c6:	cf 93       	push	r28
     4c8:	c8 2f       	mov	r28, r24
     4ca:	61 11       	cpse	r22, r1
     4cc:	0c c0       	rjmp	.+24     	; 0x4e6 <KPD_vidInit+0x20>
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_vidSetLowNibbleMode>
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	8c 2f       	mov	r24, r28
     4d8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vidSetHighNibbleMode>
     4dc:	60 ef       	ldi	r22, 0xF0	; 240
     4de:	8c 2f       	mov	r24, r28
     4e0:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
     4e4:	0b c0       	rjmp	.+22     	; 0x4fc <KPD_vidInit+0x36>
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_vidSetLowNibbleMode>
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	8c 2f       	mov	r24, r28
     4f0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vidSetHighNibbleMode>
     4f4:	6f e0       	ldi	r22, 0x0F	; 15
     4f6:	8c 2f       	mov	r24, r28
     4f8:	0e 94 19 02 	call	0x432	; 0x432 <DIO_vidWriteLowNibble>
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <KPD_u8GetPressedKey>:
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	60 97       	sbiw	r28, 0x10	; 16
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	08 2f       	mov	r16, r24
     51c:	80 e1       	ldi	r24, 0x10	; 16
     51e:	ee e6       	ldi	r30, 0x6E	; 110
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	de 01       	movw	r26, r28
     524:	11 96       	adiw	r26, 0x01	; 1
     526:	01 90       	ld	r0, Z+
     528:	0d 92       	st	X+, r0
     52a:	8a 95       	dec	r24
     52c:	e1 f7       	brne	.-8      	; 0x526 <KPD_u8GetPressedKey+0x26>
     52e:	61 11       	cpse	r22, r1
     530:	23 c0       	rjmp	.+70     	; 0x578 <KPD_u8GetPressedKey+0x78>
     532:	f1 2c       	mov	r15, r1
     534:	6f e0       	ldi	r22, 0x0F	; 15
     536:	80 2f       	mov	r24, r16
     538:	0e 94 19 02 	call	0x432	; 0x432 <DIO_vidWriteLowNibble>
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	6f 2d       	mov	r22, r15
     540:	80 2f       	mov	r24, r16
     542:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     546:	10 e0       	ldi	r17, 0x00	; 0
     548:	64 e0       	ldi	r22, 0x04	; 4
     54a:	61 0f       	add	r22, r17
     54c:	80 2f       	mov	r24, r16
     54e:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_enuReadPin>
     552:	81 11       	cpse	r24, r1
     554:	0d c0       	rjmp	.+26     	; 0x570 <KPD_u8GetPressedKey+0x70>
     556:	e1 e0       	ldi	r30, 0x01	; 1
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	ec 0f       	add	r30, r28
     55c:	fd 1f       	adc	r31, r29
     55e:	84 e0       	ldi	r24, 0x04	; 4
     560:	f8 9e       	mul	r15, r24
     562:	e0 0d       	add	r30, r0
     564:	f1 1d       	adc	r31, r1
     566:	11 24       	eor	r1, r1
     568:	e1 0f       	add	r30, r17
     56a:	f1 1d       	adc	r31, r1
     56c:	80 81       	ld	r24, Z
     56e:	32 c0       	rjmp	.+100    	; 0x5d4 <KPD_u8GetPressedKey+0xd4>
     570:	1f 5f       	subi	r17, 0xFF	; 255
     572:	14 30       	cpi	r17, 0x04	; 4
     574:	49 f7       	brne	.-46     	; 0x548 <KPD_u8GetPressedKey+0x48>
     576:	23 c0       	rjmp	.+70     	; 0x5be <KPD_u8GetPressedKey+0xbe>
     578:	f1 2c       	mov	r15, r1
     57a:	60 ef       	ldi	r22, 0xF0	; 240
     57c:	80 2f       	mov	r24, r16
     57e:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_vidWriteHighNibble>
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	64 e0       	ldi	r22, 0x04	; 4
     586:	6f 0d       	add	r22, r15
     588:	80 2f       	mov	r24, r16
     58a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     58e:	10 e0       	ldi	r17, 0x00	; 0
     590:	61 2f       	mov	r22, r17
     592:	80 2f       	mov	r24, r16
     594:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_enuReadPin>
     598:	81 11       	cpse	r24, r1
     59a:	0d c0       	rjmp	.+26     	; 0x5b6 <KPD_u8GetPressedKey+0xb6>
     59c:	e1 e0       	ldi	r30, 0x01	; 1
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	ec 0f       	add	r30, r28
     5a2:	fd 1f       	adc	r31, r29
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	f8 9e       	mul	r15, r24
     5a8:	e0 0d       	add	r30, r0
     5aa:	f1 1d       	adc	r31, r1
     5ac:	11 24       	eor	r1, r1
     5ae:	e1 0f       	add	r30, r17
     5b0:	f1 1d       	adc	r31, r1
     5b2:	80 81       	ld	r24, Z
     5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <KPD_u8GetPressedKey+0xd4>
     5b6:	1f 5f       	subi	r17, 0xFF	; 255
     5b8:	14 30       	cpi	r17, 0x04	; 4
     5ba:	51 f7       	brne	.-44     	; 0x590 <KPD_u8GetPressedKey+0x90>
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <KPD_u8GetPressedKey+0xca>
     5be:	f3 94       	inc	r15
     5c0:	84 e0       	ldi	r24, 0x04	; 4
     5c2:	f8 12       	cpse	r15, r24
     5c4:	b7 cf       	rjmp	.-146    	; 0x534 <KPD_u8GetPressedKey+0x34>
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <KPD_u8GetPressedKey+0xd4>
     5ca:	f3 94       	inc	r15
     5cc:	84 e0       	ldi	r24, 0x04	; 4
     5ce:	f8 12       	cpse	r15, r24
     5d0:	d4 cf       	rjmp	.-88     	; 0x57a <KPD_u8GetPressedKey+0x7a>
     5d2:	8f ef       	ldi	r24, 0xFF	; 255
     5d4:	60 96       	adiw	r28, 0x10	; 16
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	08 95       	ret

000005ec <LCD_vidSendEnablePulse>:



static void LCD_vidSendEnablePulse()
{
    DIO_vidWritePin(enuENPortNum, enuENPinNum, HIGH);
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f6:	8f e1       	ldi	r24, 0x1F	; 31
     5f8:	9e e4       	ldi	r25, 0x4E	; 78
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <LCD_vidSendEnablePulse+0xe>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <LCD_vidSendEnablePulse+0x14>
     600:	00 00       	nop
    _delay_ms(10);
    DIO_vidWritePin(enuENPortNum, enuENPinNum, LOW);
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     60c:	08 95       	ret

0000060e <LCD_vidSendCmd4bit>:
	_delay_ms(1);
	
}

void LCD_vidSendCmd4bit( u8 u8Cmd)
{
     60e:	cf 93       	push	r28
     610:	c8 2f       	mov	r28, r24
		DIO_vidWriteHighNibble(enuDataPortNum, u8Cmd);
     612:	68 2f       	mov	r22, r24
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_vidWriteHighNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, LOW);
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	67 e0       	ldi	r22, 0x07	; 7
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_vidSendEnablePulse>
		DIO_vidWriteHighNibble(enuDataPortNum, u8Cmd<<4);
     630:	6c 2f       	mov	r22, r28
     632:	62 95       	swap	r22
     634:	60 7f       	andi	r22, 0xF0	; 240
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_vidWriteHighNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, LOW);
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	67 e0       	ldi	r22, 0x07	; 7
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_vidSendEnablePulse>
     652:	8f e9       	ldi	r24, 0x9F	; 159
     654:	9f e0       	ldi	r25, 0x0F	; 15
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <LCD_vidSendCmd4bit+0x48>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <LCD_vidSendCmd4bit+0x4e>
     65c:	00 00       	nop
		_delay_ms(2);
}
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <LCD_vidInit4bit>:
     662:	2f ef       	ldi	r18, 0xFF	; 255
     664:	80 e7       	ldi	r24, 0x70	; 112
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	21 50       	subi	r18, 0x01	; 1
     66a:	80 40       	sbci	r24, 0x00	; 0
     66c:	90 40       	sbci	r25, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <LCD_vidInit4bit+0x6>
     670:	00 c0       	rjmp	.+0      	; 0x672 <LCD_vidInit4bit+0x10>
     672:	00 00       	nop


void LCD_vidInit4bit()
{
	_delay_ms(100);
	DIO_vidSetPinMode(enuRSPortNum, enuRSPinNum, OUTPUT);    
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	67 e0       	ldi	r22, 0x07	; 7
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
   	DIO_vidSetPinMode(enuENPortNum, enuENPinNum, OUTPUT);
     67e:	41 e0       	ldi	r20, 0x01	; 1
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>

	DIO_vidSetHighNibbleMode(enuDataPortNum, OUTPUT);
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_vidSetHighNibbleMode>
	LCD_vidSendCmd4bit( LCD_RETURN_HOME);
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_vidSendCmd4bit>
     696:	8f e2       	ldi	r24, 0x2F	; 47
     698:	95 e7       	ldi	r25, 0x75	; 117
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_vidInit4bit+0x38>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_vidInit4bit+0x3e>
     6a0:	00 00       	nop
	_delay_ms(15);
	LCD_vidSendCmd4bit( LCD_Function_4BIT_2Lines);
     6a2:	88 e2       	ldi	r24, 0x28	; 40
     6a4:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_vidSendCmd4bit>
     6a8:	8f ec       	ldi	r24, 0xCF	; 207
     6aa:	97 e0       	ldi	r25, 0x07	; 7
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCD_vidInit4bit+0x4a>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <LCD_vidInit4bit+0x50>
     6b2:	00 00       	nop
	_delay_ms(1);
	LCD_vidSendCmd4bit( LCD_DISP_ON_CURSOR_BLINK);
     6b4:	8f e0       	ldi	r24, 0x0F	; 15
     6b6:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_vidSendCmd4bit>
     6ba:	8f ec       	ldi	r24, 0xCF	; 207
     6bc:	97 e0       	ldi	r25, 0x07	; 7
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <LCD_vidInit4bit+0x5c>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <LCD_vidInit4bit+0x62>
     6c4:	00 00       	nop
	_delay_ms(1);
	LCD_vidSendCmd4bit( LCD_CLEAR_SCREEN);
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_vidSendCmd4bit>
     6cc:	8f e1       	ldi	r24, 0x1F	; 31
     6ce:	9e e4       	ldi	r25, 0x4E	; 78
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <LCD_vidInit4bit+0x6e>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <LCD_vidInit4bit+0x74>
     6d6:	00 00       	nop
	_delay_ms(10);
	LCD_vidSendCmd4bit( LCD_ENTRY_MODE);
     6d8:	86 e0       	ldi	r24, 0x06	; 6
     6da:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_vidSendCmd4bit>
     6de:	8f ec       	ldi	r24, 0xCF	; 207
     6e0:	97 e0       	ldi	r25, 0x07	; 7
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <LCD_vidInit4bit+0x80>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <LCD_vidInit4bit+0x86>
     6e8:	00 00       	nop
     6ea:	08 95       	ret

000006ec <LCD_vidDisplayChar4bit>:
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
		_delay_ms(2);
}

void LCD_vidDisplayChar4bit( u8 u8char)
{
     6ec:	cf 93       	push	r28
     6ee:	c8 2f       	mov	r28, r24

	DIO_vidWriteHighNibble(enuDataPortNum, u8char);
     6f0:	68 2f       	mov	r22, r24
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_vidWriteHighNibble>
	DIO_vidWritePin(enuRSPortNum, enuRSPinNum, HIGH);
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	67 e0       	ldi	r22, 0x07	; 7
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_vidSendEnablePulse>
	DIO_vidWriteHighNibble(enuDataPortNum, u8char<<4);
     70e:	6c 2f       	mov	r22, r28
     710:	62 95       	swap	r22
     712:	60 7f       	andi	r22, 0xF0	; 240
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_vidWriteHighNibble>
	DIO_vidWritePin(enuRSPortNum, enuRSPinNum, HIGH);
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	67 e0       	ldi	r22, 0x07	; 7
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_vidSendEnablePulse>
     730:	8f e9       	ldi	r24, 0x9F	; 159
     732:	9f e0       	ldi	r25, 0x0F	; 15
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <LCD_vidDisplayChar4bit+0x48>
     738:	00 c0       	rjmp	.+0      	; 0x73a <LCD_vidDisplayChar4bit+0x4e>
     73a:	00 00       	nop
	_delay_ms(2);
	
}
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <LCD_voidDisplayString4bit>:

void LCD_voidDisplayString4bit( u8 *ptru8String)
{
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	ec 01       	movw	r28, r24
	while((*ptru8String) != '\0')
     746:	88 81       	ld	r24, Y
     748:	88 23       	and	r24, r24
     74a:	31 f0       	breq	.+12     	; 0x758 <LCD_voidDisplayString4bit+0x18>
     74c:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vidDisplayChar4bit(*ptru8String);
     74e:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_vidDisplayChar4bit>
	
}

void LCD_voidDisplayString4bit( u8 *ptru8String)
{
	while((*ptru8String) != '\0')
     752:	89 91       	ld	r24, Y+
     754:	81 11       	cpse	r24, r1
     756:	fb cf       	rjmp	.-10     	; 0x74e <LCD_voidDisplayString4bit+0xe>
	{
		LCD_vidDisplayChar4bit(*ptru8String);
		ptru8String++;
	}
}
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <LCD_vidClearScreen4bit>:

void LCD_vidClearScreen4bit( )
{
	LCD_vidSendCmd4bit(LCD_CLEAR_SCREEN);
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_vidSendCmd4bit>
     764:	8f e1       	ldi	r24, 0x1F	; 31
     766:	9e e4       	ldi	r25, 0x4E	; 78
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <LCD_vidClearScreen4bit+0xa>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <LCD_vidClearScreen4bit+0x10>
     76e:	00 00       	nop
     770:	08 95       	ret

00000772 <LCD_vidMoveCursor4bit>:
}

void LCD_vidMoveCursor4bit(u8 u8Line, u8 u8Position)
{
	u8 u8data =0;
	if(u8Line < 1 || u8Line > 2 || u8Position < 1 || u8Position > 16)
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	98 0f       	add	r25, r24
     776:	92 30       	cpi	r25, 0x02	; 2
     778:	70 f4       	brcc	.+28     	; 0x796 <LCD_vidMoveCursor4bit+0x24>
     77a:	9f ef       	ldi	r25, 0xFF	; 255
     77c:	96 0f       	add	r25, r22
     77e:	90 31       	cpi	r25, 0x10	; 16
     780:	60 f4       	brcc	.+24     	; 0x79a <LCD_vidMoveCursor4bit+0x28>
	{
		u8data = 0x80;
	}
	else if(u8Line == 1)
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	19 f4       	brne	.+6      	; 0x78c <LCD_vidMoveCursor4bit+0x1a>
	{
		u8data = 0x80 + (u8Position - 1);
     786:	8f e7       	ldi	r24, 0x7F	; 127
     788:	86 0f       	add	r24, r22
     78a:	0a c0       	rjmp	.+20     	; 0x7a0 <LCD_vidMoveCursor4bit+0x2e>
	}
	else if(u8Line == 2)
     78c:	82 30       	cpi	r24, 0x02	; 2
     78e:	39 f4       	brne	.+14     	; 0x79e <LCD_vidMoveCursor4bit+0x2c>
	{
		u8data = 0xC0 + (u8Position - 1);
     790:	8f eb       	ldi	r24, 0xBF	; 191
     792:	86 0f       	add	r24, r22
     794:	05 c0       	rjmp	.+10     	; 0x7a0 <LCD_vidMoveCursor4bit+0x2e>
void LCD_vidMoveCursor4bit(u8 u8Line, u8 u8Position)
{
	u8 u8data =0;
	if(u8Line < 1 || u8Line > 2 || u8Position < 1 || u8Position > 16)
	{
		u8data = 0x80;
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <LCD_vidMoveCursor4bit+0x2e>
     79a:	80 e8       	ldi	r24, 0x80	; 128
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <LCD_vidMoveCursor4bit+0x2e>
	_delay_ms(10);
}

void LCD_vidMoveCursor4bit(u8 u8Line, u8 u8Position)
{
	u8 u8data =0;
     79e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if(u8Line == 2)
	{
		u8data = 0xC0 + (u8Position - 1);
	}
	LCD_vidSendCmd4bit( u8data);
     7a0:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_vidSendCmd4bit>
     7a4:	8f ec       	ldi	r24, 0xCF	; 207
     7a6:	97 e0       	ldi	r25, 0x07	; 7
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <LCD_vidMoveCursor4bit+0x36>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <LCD_vidMoveCursor4bit+0x3c>
     7ae:	00 00       	nop
     7b0:	08 95       	ret

000007b2 <LCD_vidDisplayNumber4bit>:
	_delay_ms(1);
}

void LCD_vidDisplayNumber4bit(s64 copy_u32Number)
{
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	2b 97       	sbiw	r28, 0x0b	; 11
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
	u8 str[11];
	sprintf(str,"%d",copy_u32Number);
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	7f 93       	push	r23
     7d0:	6f 93       	push	r22
     7d2:	5f 93       	push	r21
     7d4:	4f 93       	push	r20
     7d6:	3f 93       	push	r19
     7d8:	2f 93       	push	r18
     7da:	82 e8       	ldi	r24, 0x82	; 130
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	9f 93       	push	r25
     7e0:	8f 93       	push	r24
     7e2:	8e 01       	movw	r16, r28
     7e4:	0f 5f       	subi	r16, 0xFF	; 255
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	1f 93       	push	r17
     7ea:	0f 93       	push	r16
     7ec:	0e 94 57 10 	call	0x20ae	; 0x20ae <sprintf>
	LCD_voidDisplayString4bit(str);
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
}
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	2b 96       	adiw	r28, 0x0b	; 11
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <LCD_vidDisplayRealNumber4bit>:

void LCD_vidDisplayRealNumber4bit(s64 Number)
{
     816:	7f 92       	push	r7
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	60 97       	sbiw	r28, 0x10	; 16
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	12 2f       	mov	r17, r18
     842:	b3 2f       	mov	r27, r19
     844:	f4 2f       	mov	r31, r20
     846:	e5 2f       	mov	r30, r21
     848:	76 2e       	mov	r7, r22
     84a:	87 2e       	mov	r8, r23
     84c:	98 2e       	mov	r9, r24
     84e:	a9 2e       	mov	r10, r25
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     850:	a0 e0       	ldi	r26, 0x00	; 0
     852:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__cmpdi2_s8>
     856:	3c f0       	brlt	.+14     	; 0x866 <__stack+0x7>
     858:	0f 2e       	mov	r0, r31
     85a:	ff ef       	ldi	r31, 0xFF	; 255
     85c:	cf 2e       	mov	r12, r31
     85e:	f1 e0       	ldi	r31, 0x01	; 1
     860:	df 2e       	mov	r13, r31
     862:	f0 2d       	mov	r31, r0
     864:	06 c0       	rjmp	.+12     	; 0x872 <__stack+0x13>
     866:	0f 2e       	mov	r0, r31
     868:	fe e7       	ldi	r31, 0x7E	; 126
     86a:	cf 2e       	mov	r12, r31
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	df 2e       	mov	r13, r31
     870:	f0 2d       	mov	r31, r0
	u32 tmpval = (Number < 0)? -Number : Number;
	sprintf(str,"%s%d", tmpsign, tmpval);
     872:	01 2f       	mov	r16, r17
     874:	fb 2e       	mov	r15, r27
     876:	ef 2e       	mov	r14, r31
     878:	be 2e       	mov	r11, r30
     87a:	21 2f       	mov	r18, r17
     87c:	3b 2f       	mov	r19, r27
     87e:	4f 2f       	mov	r20, r31
     880:	5e 2f       	mov	r21, r30
     882:	67 2d       	mov	r22, r7
     884:	78 2d       	mov	r23, r8
     886:	89 2d       	mov	r24, r9
     888:	9a 2d       	mov	r25, r10
     88a:	a0 e0       	ldi	r26, 0x00	; 0
     88c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__cmpdi2_s8>
     890:	34 f4       	brge	.+12     	; 0x89e <__stack+0x3f>
     892:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__negdi2>
     896:	02 2f       	mov	r16, r18
     898:	f3 2e       	mov	r15, r19
     89a:	e4 2e       	mov	r14, r20
     89c:	b5 2e       	mov	r11, r21
     89e:	bf 92       	push	r11
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	df 92       	push	r13
     8a8:	cf 92       	push	r12
     8aa:	80 e8       	ldi	r24, 0x80	; 128
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	8e 01       	movw	r16, r28
     8b4:	0f 5f       	subi	r16, 0xFF	; 255
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	1f 93       	push	r17
     8ba:	0f 93       	push	r16
     8bc:	0e 94 57 10 	call	0x20ae	; 0x20ae <sprintf>
	LCD_voidDisplayString4bit(str);
     8c0:	c8 01       	movw	r24, r16
     8c2:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	60 96       	adiw	r28, 0x10	; 16
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	bf 90       	pop	r11
     8ee:	af 90       	pop	r10
     8f0:	9f 90       	pop	r9
     8f2:	8f 90       	pop	r8
     8f4:	7f 90       	pop	r7
     8f6:	08 95       	ret

000008f8 <END_CALCULATOR>:
	for(i = 0 ; i < p ; i++)
	{
		num *=n;
	}
	return num;
}
     8f8:	cf 92       	push	r12
     8fa:	df 92       	push	r13
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	c2 2e       	mov	r12, r18
     90a:	d3 2e       	mov	r13, r19
     90c:	e4 2e       	mov	r14, r20
     90e:	f5 2e       	mov	r15, r21
     910:	06 2f       	mov	r16, r22
     912:	17 2f       	mov	r17, r23
     914:	d8 2f       	mov	r29, r24
     916:	c9 2f       	mov	r28, r25
     918:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     91c:	85 e8       	ldi	r24, 0x85	; 133
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
     92c:	2c 2d       	mov	r18, r12
     92e:	3d 2d       	mov	r19, r13
     930:	4e 2d       	mov	r20, r14
     932:	5f 2d       	mov	r21, r15
     934:	60 2f       	mov	r22, r16
     936:	71 2f       	mov	r23, r17
     938:	8d 2f       	mov	r24, r29
     93a:	9c 2f       	mov	r25, r28
     93c:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_vidDisplayRealNumber4bit>
     940:	2f ef       	ldi	r18, 0xFF	; 255
     942:	83 ed       	ldi	r24, 0xD3	; 211
     944:	90 e3       	ldi	r25, 0x30	; 48
     946:	21 50       	subi	r18, 0x01	; 1
     948:	80 40       	sbci	r24, 0x00	; 0
     94a:	90 40       	sbci	r25, 0x00	; 0
     94c:	e1 f7       	brne	.-8      	; 0x946 <END_CALCULATOR+0x4e>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <END_CALCULATOR+0x58>
     950:	00 00       	nop
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	08 95       	ret

00000964 <disBinNum>:
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	ec 01       	movw	r28, r24
     96e:	8c 01       	movw	r16, r24
     970:	0c 5f       	subi	r16, 0xFC	; 252
     972:	1f 4f       	sbci	r17, 0xFF	; 255
     974:	29 91       	ld	r18, Y+
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_vidDisplayNumber4bit>
     988:	c0 17       	cp	r28, r16
     98a:	d1 07       	cpc	r29, r17
     98c:	99 f7       	brne	.-26     	; 0x974 <disBinNum+0x10>
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	08 95       	ret

00000998 <performLogicGate>:
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	eb 01       	movw	r28, r22
     9a8:	da 01       	movw	r26, r20
     9aa:	f9 01       	movw	r30, r18
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	01 e0       	ldi	r16, 0x01	; 1
     9b0:	f1 2c       	mov	r15, r1
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <performLogicGate+0x20>
     9b6:	48 c0       	rjmp	.+144    	; 0xa48 <performLogicGate+0xb0>
     9b8:	30 f4       	brcc	.+12     	; 0x9c6 <performLogicGate+0x2e>
     9ba:	88 23       	and	r24, r24
     9bc:	69 f0       	breq	.+26     	; 0x9d8 <performLogicGate+0x40>
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <performLogicGate+0x2c>
     9c2:	85 c0       	rjmp	.+266    	; 0xace <performLogicGate+0x136>
     9c4:	25 c0       	rjmp	.+74     	; 0xa10 <performLogicGate+0x78>
     9c6:	84 30       	cpi	r24, 0x04	; 4
     9c8:	09 f4       	brne	.+2      	; 0x9cc <performLogicGate+0x34>
     9ca:	76 c0       	rjmp	.+236    	; 0xab8 <performLogicGate+0x120>
     9cc:	08 f4       	brcc	.+2      	; 0x9d0 <performLogicGate+0x38>
     9ce:	58 c0       	rjmp	.+176    	; 0xa80 <performLogicGate+0xe8>
     9d0:	85 30       	cpi	r24, 0x05	; 5
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <performLogicGate+0x3e>
     9d4:	76 c0       	rjmp	.+236    	; 0xac2 <performLogicGate+0x12a>
     9d6:	7b c0       	rjmp	.+246    	; 0xace <performLogicGate+0x136>
     9d8:	01 e0       	ldi	r16, 0x01	; 1
     9da:	f1 2c       	mov	r15, r1
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	e9 2f       	mov	r30, r25
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	d9 01       	movw	r26, r18
     9e4:	ae 0f       	add	r26, r30
     9e6:	bf 1f       	adc	r27, r31
     9e8:	eb 01       	movw	r28, r22
     9ea:	ce 0f       	add	r28, r30
     9ec:	df 1f       	adc	r29, r31
     9ee:	88 81       	ld	r24, Y
     9f0:	88 23       	and	r24, r24
     9f2:	41 f0       	breq	.+16     	; 0xa04 <performLogicGate+0x6c>
     9f4:	e4 0f       	add	r30, r20
     9f6:	f5 1f       	adc	r31, r21
     9f8:	80 2f       	mov	r24, r16
     9fa:	e0 81       	ld	r30, Z
     9fc:	e1 11       	cpse	r30, r1
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <performLogicGate+0x6e>
     a00:	8f 2d       	mov	r24, r15
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <performLogicGate+0x6e>
     a04:	81 2f       	mov	r24, r17
     a06:	8c 93       	st	X, r24
     a08:	9f 5f       	subi	r25, 0xFF	; 255
     a0a:	94 30       	cpi	r25, 0x04	; 4
     a0c:	40 f3       	brcs	.-48     	; 0x9de <performLogicGate+0x46>
     a0e:	66 c0       	rjmp	.+204    	; 0xadc <performLogicGate+0x144>
     a10:	01 e0       	ldi	r16, 0x01	; 1
     a12:	f1 2c       	mov	r15, r1
     a14:	11 e0       	ldi	r17, 0x01	; 1
     a16:	e9 2f       	mov	r30, r25
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	d9 01       	movw	r26, r18
     a1c:	ae 0f       	add	r26, r30
     a1e:	bf 1f       	adc	r27, r31
     a20:	eb 01       	movw	r28, r22
     a22:	ce 0f       	add	r28, r30
     a24:	df 1f       	adc	r29, r31
     a26:	88 81       	ld	r24, Y
     a28:	81 11       	cpse	r24, r1
     a2a:	08 c0       	rjmp	.+16     	; 0xa3c <performLogicGate+0xa4>
     a2c:	e4 0f       	add	r30, r20
     a2e:	f5 1f       	adc	r31, r21
     a30:	80 2f       	mov	r24, r16
     a32:	e0 81       	ld	r30, Z
     a34:	e1 11       	cpse	r30, r1
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <performLogicGate+0xa6>
     a38:	8f 2d       	mov	r24, r15
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <performLogicGate+0xa6>
     a3c:	81 2f       	mov	r24, r17
     a3e:	8c 93       	st	X, r24
     a40:	9f 5f       	subi	r25, 0xFF	; 255
     a42:	94 30       	cpi	r25, 0x04	; 4
     a44:	40 f3       	brcs	.-48     	; 0xa16 <performLogicGate+0x7e>
     a46:	4a c0       	rjmp	.+148    	; 0xadc <performLogicGate+0x144>
     a48:	01 e0       	ldi	r16, 0x01	; 1
     a4a:	f1 2c       	mov	r15, r1
     a4c:	11 e0       	ldi	r17, 0x01	; 1
     a4e:	e9 2f       	mov	r30, r25
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	d9 01       	movw	r26, r18
     a54:	ae 0f       	add	r26, r30
     a56:	bf 1f       	adc	r27, r31
     a58:	eb 01       	movw	r28, r22
     a5a:	ce 0f       	add	r28, r30
     a5c:	df 1f       	adc	r29, r31
     a5e:	88 81       	ld	r24, Y
     a60:	88 23       	and	r24, r24
     a62:	41 f0       	breq	.+16     	; 0xa74 <performLogicGate+0xdc>
     a64:	e4 0f       	add	r30, r20
     a66:	f5 1f       	adc	r31, r21
     a68:	80 2f       	mov	r24, r16
     a6a:	e0 81       	ld	r30, Z
     a6c:	ee 23       	and	r30, r30
     a6e:	19 f0       	breq	.+6      	; 0xa76 <performLogicGate+0xde>
     a70:	8f 2d       	mov	r24, r15
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <performLogicGate+0xde>
     a74:	81 2f       	mov	r24, r17
     a76:	8c 93       	st	X, r24
     a78:	9f 5f       	subi	r25, 0xFF	; 255
     a7a:	94 30       	cpi	r25, 0x04	; 4
     a7c:	40 f3       	brcs	.-48     	; 0xa4e <performLogicGate+0xb6>
     a7e:	2e c0       	rjmp	.+92     	; 0xadc <performLogicGate+0x144>
     a80:	01 e0       	ldi	r16, 0x01	; 1
     a82:	f1 2c       	mov	r15, r1
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	e9 2f       	mov	r30, r25
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	d9 01       	movw	r26, r18
     a8c:	ae 0f       	add	r26, r30
     a8e:	bf 1f       	adc	r27, r31
     a90:	eb 01       	movw	r28, r22
     a92:	ce 0f       	add	r28, r30
     a94:	df 1f       	adc	r29, r31
     a96:	88 81       	ld	r24, Y
     a98:	81 11       	cpse	r24, r1
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <performLogicGate+0x114>
     a9c:	e4 0f       	add	r30, r20
     a9e:	f5 1f       	adc	r31, r21
     aa0:	80 2f       	mov	r24, r16
     aa2:	e0 81       	ld	r30, Z
     aa4:	ee 23       	and	r30, r30
     aa6:	19 f0       	breq	.+6      	; 0xaae <performLogicGate+0x116>
     aa8:	8f 2d       	mov	r24, r15
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <performLogicGate+0x116>
     aac:	81 2f       	mov	r24, r17
     aae:	8c 93       	st	X, r24
     ab0:	9f 5f       	subi	r25, 0xFF	; 255
     ab2:	94 30       	cpi	r25, 0x04	; 4
     ab4:	40 f3       	brcs	.-48     	; 0xa86 <performLogicGate+0xee>
     ab6:	12 c0       	rjmp	.+36     	; 0xadc <performLogicGate+0x144>
     ab8:	e8 80       	ld	r14, Y
     aba:	1c 91       	ld	r17, X
     abc:	1e 25       	eor	r17, r14
     abe:	10 83       	st	Z, r17
     ac0:	06 c0       	rjmp	.+12     	; 0xace <performLogicGate+0x136>
     ac2:	10 2f       	mov	r17, r16
     ac4:	d8 80       	ld	r13, Y
     ac6:	ec 90       	ld	r14, X
     ac8:	de 10       	cpse	r13, r14
     aca:	1f 2d       	mov	r17, r15
     acc:	10 83       	st	Z, r17
     ace:	9f 5f       	subi	r25, 0xFF	; 255
     ad0:	21 96       	adiw	r28, 0x01	; 1
     ad2:	11 96       	adiw	r26, 0x01	; 1
     ad4:	31 96       	adiw	r30, 0x01	; 1
     ad6:	94 30       	cpi	r25, 0x04	; 4
     ad8:	09 f0       	breq	.+2      	; 0xadc <performLogicGate+0x144>
     ada:	6b cf       	rjmp	.-298    	; 0x9b2 <performLogicGate+0x1a>
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <showLogicEquation>:
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	7c 01       	movw	r14, r24
     afa:	eb 01       	movw	r28, r22
     afc:	8a 01       	movw	r16, r20
     afe:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     b02:	c7 01       	movw	r24, r14
     b04:	0e 94 b2 04 	call	0x964	; 0x964 <disBinNum>
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     b0e:	ce 01       	movw	r24, r28
     b10:	0e 94 b2 04 	call	0x964	; 0x964 <disBinNum>
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	08 95       	ret

00000b2a <ArthWrongAnswer>:
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	6b 01       	movw	r12, r22
     b38:	7c 01       	movw	r14, r24
     b3a:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     b3e:	8f e8       	ldi	r24, 0x8F	; 143
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     b50:	2f ef       	ldi	r18, 0xFF	; 255
     b52:	89 e6       	ldi	r24, 0x69	; 105
     b54:	98 e1       	ldi	r25, 0x18	; 24
     b56:	21 50       	subi	r18, 0x01	; 1
     b58:	80 40       	sbci	r24, 0x00	; 0
     b5a:	90 40       	sbci	r25, 0x00	; 0
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <ArthWrongAnswer+0x2c>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <ArthWrongAnswer+0x36>
     b60:	00 00       	nop
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     b6c:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     b70:	8e e9       	ldi	r24, 0x9E	; 158
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
     b80:	d7 01       	movw	r26, r14
     b82:	c6 01       	movw	r24, r12
     b84:	2c 2d       	mov	r18, r12
     b86:	39 2f       	mov	r19, r25
     b88:	4a 2f       	mov	r20, r26
     b8a:	5b 2f       	mov	r21, r27
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_vidDisplayNumber4bit>
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	cf 90       	pop	r12
     ba4:	08 95       	ret

00000ba6 <LogicWrongAnswer>:
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	8c 01       	movw	r16, r24
     bb0:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     bb4:	8d ea       	ldi	r24, 0xAD	; 173
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     bc6:	2f ef       	ldi	r18, 0xFF	; 255
     bc8:	89 e6       	ldi	r24, 0x69	; 105
     bca:	98 e1       	ldi	r25, 0x18	; 24
     bcc:	21 50       	subi	r18, 0x01	; 1
     bce:	80 40       	sbci	r24, 0x00	; 0
     bd0:	90 40       	sbci	r25, 0x00	; 0
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <LogicWrongAnswer+0x26>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <LogicWrongAnswer+0x30>
     bd6:	00 00       	nop
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     be2:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     be6:	8e e9       	ldi	r24, 0x9E	; 158
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
     bf6:	e8 01       	movw	r28, r16
     bf8:	0c 5f       	subi	r16, 0xFC	; 252
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	29 91       	ld	r18, Y+
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_vidDisplayNumber4bit>
     c10:	c0 17       	cp	r28, r16
     c12:	d1 07       	cpc	r29, r17
     c14:	99 f7       	brne	.-26     	; 0xbfc <LogicWrongAnswer+0x56>
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <binToDec>:
     c20:	fc 01       	movw	r30, r24
     c22:	20 81       	ld	r18, Z
     c24:	22 23       	and	r18, r18
     c26:	61 f0       	breq	.+24     	; 0xc40 <binToDec+0x20>
     c28:	31 96       	adiw	r30, 0x01	; 1
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	82 0f       	add	r24, r18
     c34:	91 1d       	adc	r25, r1
     c36:	c0 97       	sbiw	r24, 0x30	; 48
     c38:	21 91       	ld	r18, Z+
     c3a:	21 11       	cpse	r18, r1
     c3c:	f8 cf       	rjmp	.-16     	; 0xc2e <binToDec+0xe>
     c3e:	08 95       	ret
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	08 95       	ret

00000c46 <decToBin>:
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	71 f0       	breq	.+28     	; 0xc66 <decToBin+0x20>
     c4a:	fb 01       	movw	r30, r22
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	4f 5f       	subi	r20, 0xFF	; 255
     c52:	5f 4f       	sbci	r21, 0xFF	; 255
     c54:	28 2f       	mov	r18, r24
     c56:	21 70       	andi	r18, 0x01	; 1
     c58:	20 5d       	subi	r18, 0xD0	; 208
     c5a:	21 93       	st	Z+, r18
     c5c:	96 95       	lsr	r25
     c5e:	87 95       	ror	r24
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	b1 f7       	brne	.-20     	; 0xc50 <decToBin+0xa>
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <decToBin+0x24>
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	fb 01       	movw	r30, r22
     c6c:	e4 0f       	add	r30, r20
     c6e:	f5 1f       	adc	r31, r21
     c70:	10 82       	st	Z, r1
     c72:	cb 01       	movw	r24, r22
     c74:	0e 94 47 10 	call	0x208e	; 0x208e <strrev>
     c78:	08 95       	ret

00000c7a <getFromKeypad>:
     c7a:	cf 93       	push	r28
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	0e 94 80 02 	call	0x500	; 0x500 <KPD_u8GetPressedKey>
     c86:	c8 2f       	mov	r28, r24
     c88:	8f 3f       	cpi	r24, 0xFF	; 255
     c8a:	c1 f3       	breq	.-16     	; 0xc7c <getFromKeypad+0x2>
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	0e 94 80 02 	call	0x500	; 0x500 <KPD_u8GetPressedKey>
     c96:	c8 17       	cp	r28, r24
     c98:	c9 f3       	breq	.-14     	; 0xc8c <getFromKeypad+0x12>
     c9a:	2f ef       	ldi	r18, 0xFF	; 255
     c9c:	81 ee       	ldi	r24, 0xE1	; 225
     c9e:	94 e0       	ldi	r25, 0x04	; 4
     ca0:	21 50       	subi	r18, 0x01	; 1
     ca2:	80 40       	sbci	r24, 0x00	; 0
     ca4:	90 40       	sbci	r25, 0x00	; 0
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <getFromKeypad+0x26>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <getFromKeypad+0x30>
     caa:	00 00       	nop
     cac:	8c 2f       	mov	r24, r28
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <CONVERTER_BIN_TO_DEC>:
     cb2:	8f 92       	push	r8
     cb4:	9f 92       	push	r9
     cb6:	af 92       	push	r10
     cb8:	bf 92       	push	r11
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	61 97       	sbiw	r28, 0x11	; 17
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	7c 01       	movw	r14, r24
     ce4:	00 e0       	ldi	r16, 0x00	; 0
     ce6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
     cea:	18 2f       	mov	r17, r24
     cec:	80 ed       	ldi	r24, 0xD0	; 208
     cee:	81 0f       	add	r24, r17
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	e8 f0       	brcs	.+58     	; 0xd2e <CONVERTER_BIN_TO_DEC+0x7c>
     cf4:	13 34       	cpi	r17, 0x43	; 67
     cf6:	79 f4       	brne	.+30     	; 0xd16 <CONVERTER_BIN_TO_DEC+0x64>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
     cfe:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     d02:	9f ef       	ldi	r25, 0xFF	; 255
     d04:	e9 e6       	ldi	r30, 0x69	; 105
     d06:	f8 e1       	ldi	r31, 0x18	; 24
     d08:	91 50       	subi	r25, 0x01	; 1
     d0a:	e0 40       	sbci	r30, 0x00	; 0
     d0c:	f0 40       	sbci	r31, 0x00	; 0
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <CONVERTER_BIN_TO_DEC+0x56>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <CONVERTER_BIN_TO_DEC+0x60>
     d12:	00 00       	nop
     d14:	39 c0       	rjmp	.+114    	; 0xd88 <CONVERTER_BIN_TO_DEC+0xd6>
     d16:	1d 33       	cpi	r17, 0x3D	; 61
     d18:	31 f7       	brne	.-52     	; 0xce6 <CONVERTER_BIN_TO_DEC+0x34>
     d1a:	e1 e0       	ldi	r30, 0x01	; 1
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	ec 0f       	add	r30, r28
     d20:	fd 1f       	adc	r31, r29
     d22:	e0 0f       	add	r30, r16
     d24:	f1 1d       	adc	r31, r1
     d26:	10 82       	st	Z, r1
     d28:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     d2c:	0a c0       	rjmp	.+20     	; 0xd42 <CONVERTER_BIN_TO_DEC+0x90>
     d2e:	81 2f       	mov	r24, r17
     d30:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_vidDisplayChar4bit>
     d34:	f7 01       	movw	r30, r14
     d36:	11 93       	st	Z+, r17
     d38:	7f 01       	movw	r14, r30
     d3a:	0f 5f       	subi	r16, 0xFF	; 255
     d3c:	00 31       	cpi	r16, 0x10	; 16
     d3e:	99 f6       	brne	.-90     	; 0xce6 <CONVERTER_BIN_TO_DEC+0x34>
     d40:	19 8a       	std	Y+17, r1	; 0x11
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	0e 94 10 06 	call	0xc20	; 0xc20 <binToDec>
     d4a:	4c 01       	movw	r8, r24
     d4c:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     d50:	8e eb       	ldi	r24, 0xBE	; 190
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
     d60:	28 2d       	mov	r18, r8
     d62:	39 2d       	mov	r19, r9
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_vidDisplayNumber4bit>
     d74:	ff ef       	ldi	r31, 0xFF	; 255
     d76:	27 ea       	ldi	r18, 0xA7	; 167
     d78:	81 e6       	ldi	r24, 0x61	; 97
     d7a:	f1 50       	subi	r31, 0x01	; 1
     d7c:	20 40       	sbci	r18, 0x00	; 0
     d7e:	80 40       	sbci	r24, 0x00	; 0
     d80:	e1 f7       	brne	.-8      	; 0xd7a <CONVERTER_BIN_TO_DEC+0xc8>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <CONVERTER_BIN_TO_DEC+0xd2>
     d84:	00 00       	nop
     d86:	a9 cf       	rjmp	.-174    	; 0xcda <CONVERTER_BIN_TO_DEC+0x28>
     d88:	61 96       	adiw	r28, 0x11	; 17
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	9f 90       	pop	r9
     daa:	8f 90       	pop	r8
     dac:	08 95       	ret

00000dae <getLogicResult>:
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	7b 01       	movw	r14, r22
     dbc:	8c 01       	movw	r16, r24
     dbe:	ec 01       	movw	r28, r24
     dc0:	24 96       	adiw	r28, 0x04	; 4
     dc2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
     dc6:	90 ed       	ldi	r25, 0xD0	; 208
     dc8:	98 0f       	add	r25, r24
     dca:	92 30       	cpi	r25, 0x02	; 2
     dcc:	a0 f0       	brcs	.+40     	; 0xdf6 <getLogicResult+0x48>
     dce:	83 34       	cpi	r24, 0x43	; 67
     dd0:	c1 f7       	brne	.-16     	; 0xdc2 <getLogicResult+0x14>
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	f7 01       	movw	r30, r14
     ddc:	80 83       	st	Z, r24
     dde:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     de2:	ff ef       	ldi	r31, 0xFF	; 255
     de4:	29 e6       	ldi	r18, 0x69	; 105
     de6:	88 e1       	ldi	r24, 0x18	; 24
     de8:	f1 50       	subi	r31, 0x01	; 1
     dea:	20 40       	sbci	r18, 0x00	; 0
     dec:	80 40       	sbci	r24, 0x00	; 0
     dee:	e1 f7       	brne	.-8      	; 0xde8 <getLogicResult+0x3a>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <getLogicResult+0x44>
     df2:	00 00       	nop
     df4:	18 c0       	rjmp	.+48     	; 0xe26 <getLogicResult+0x78>
     df6:	f8 01       	movw	r30, r16
     df8:	41 91       	ld	r20, Z+
     dfa:	8f 01       	movw	r16, r30
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	20 53       	subi	r18, 0x30	; 48
     e04:	31 09       	sbc	r19, r1
     e06:	42 17       	cp	r20, r18
     e08:	53 07       	cpc	r21, r19
     e0a:	11 f0       	breq	.+4      	; 0xe10 <getLogicResult+0x62>
     e0c:	f7 01       	movw	r30, r14
     e0e:	10 82       	st	Z, r1
     e10:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_vidDisplayChar4bit>
     e14:	0c 17       	cp	r16, r28
     e16:	1d 07       	cpc	r17, r29
     e18:	a1 f6       	brne	.-88     	; 0xdc2 <getLogicResult+0x14>
     e1a:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	08 95       	ret

00000e34 <arrToInt>:
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	dc 01       	movw	r26, r24
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	86 0f       	add	r24, r22
     e48:	fd 01       	movw	r30, r26
     e4a:	e8 0f       	add	r30, r24
     e4c:	f1 1d       	adc	r31, r1
     e4e:	e0 81       	ld	r30, Z
     e50:	ee 23       	and	r30, r30
     e52:	b1 f1       	breq	.+108    	; 0xec0 <arrToInt+0x8c>
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	c1 2c       	mov	r12, r1
     e58:	d1 2c       	mov	r13, r1
     e5a:	76 01       	movw	r14, r12
     e5c:	c1 e0       	ldi	r28, 0x01	; 1
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	f0 97       	sbiw	r30, 0x30	; 48
     e64:	77 23       	and	r23, r23
     e66:	91 f0       	breq	.+36     	; 0xe8c <arrToInt+0x58>
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	2c 2f       	mov	r18, r28
     e6c:	36 2f       	mov	r19, r22
     e6e:	a9 01       	movw	r20, r18
     e70:	44 0f       	add	r20, r20
     e72:	55 1f       	adc	r21, r21
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	22 0f       	add	r18, r18
     e7a:	33 1f       	adc	r19, r19
     e7c:	22 0f       	add	r18, r18
     e7e:	33 1f       	adc	r19, r19
     e80:	24 0f       	add	r18, r20
     e82:	35 1f       	adc	r19, r21
     e84:	9f 5f       	subi	r25, 0xFF	; 255
     e86:	79 13       	cpse	r23, r25
     e88:	f2 cf       	rjmp	.-28     	; 0xe6e <arrToInt+0x3a>
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <arrToInt+0x5c>
     e8c:	2c 2f       	mov	r18, r28
     e8e:	36 2f       	mov	r19, r22
     e90:	e2 9f       	mul	r30, r18
     e92:	80 01       	movw	r16, r0
     e94:	e3 9f       	mul	r30, r19
     e96:	10 0d       	add	r17, r0
     e98:	f2 9f       	mul	r31, r18
     e9a:	10 0d       	add	r17, r0
     e9c:	11 24       	eor	r1, r1
     e9e:	01 2e       	mov	r0, r17
     ea0:	00 0c       	add	r0, r0
     ea2:	22 0b       	sbc	r18, r18
     ea4:	33 0b       	sbc	r19, r19
     ea6:	c0 0e       	add	r12, r16
     ea8:	d1 1e       	adc	r13, r17
     eaa:	e2 1e       	adc	r14, r18
     eac:	f3 1e       	adc	r15, r19
     eae:	81 50       	subi	r24, 0x01	; 1
     eb0:	fd 01       	movw	r30, r26
     eb2:	e8 0f       	add	r30, r24
     eb4:	f1 1d       	adc	r31, r1
     eb6:	e0 81       	ld	r30, Z
     eb8:	7f 5f       	subi	r23, 0xFF	; 255
     eba:	e1 11       	cpse	r30, r1
     ebc:	d1 cf       	rjmp	.-94     	; 0xe60 <arrToInt+0x2c>
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <arrToInt+0x92>
     ec0:	c1 2c       	mov	r12, r1
     ec2:	d1 2c       	mov	r13, r1
     ec4:	76 01       	movw	r14, r12
     ec6:	c7 01       	movw	r24, r14
     ec8:	b6 01       	movw	r22, r12
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	df 90       	pop	r13
     ed6:	cf 90       	pop	r12
     ed8:	08 95       	ret

00000eda <CONVERTER_DEC_TO_BIN>:
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	65 97       	sbiw	r28, 0x15	; 21
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     efa:	ce 01       	movw	r24, r28
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	7c 01       	movw	r14, r24
     f00:	00 e0       	ldi	r16, 0x00	; 0
     f02:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
     f06:	18 2f       	mov	r17, r24
     f08:	8d 33       	cpi	r24, 0x3D	; 61
     f0a:	69 f5       	brne	.+90     	; 0xf66 <CONVERTER_DEC_TO_BIN+0x8c>
     f0c:	e1 e0       	ldi	r30, 0x01	; 1
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	ec 0f       	add	r30, r28
     f12:	fd 1f       	adc	r31, r29
     f14:	e0 0f       	add	r30, r16
     f16:	f1 1d       	adc	r31, r1
     f18:	10 82       	st	Z, r1
     f1a:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     f1e:	60 2f       	mov	r22, r16
     f20:	ce 01       	movw	r24, r28
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	0e 94 1a 07 	call	0xe34	; 0xe34 <arrToInt>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	be 01       	movw	r22, r28
     f2e:	6a 5f       	subi	r22, 0xFA	; 250
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	0e 94 23 06 	call	0xc46	; 0xc46 <decToBin>
     f36:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     f3a:	8f ec       	ldi	r24, 0xCF	; 207
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
     f4a:	ce 01       	movw	r24, r28
     f4c:	06 96       	adiw	r24, 0x06	; 6
     f4e:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	e7 ea       	ldi	r30, 0xA7	; 167
     f56:	f1 e6       	ldi	r31, 0x61	; 97
     f58:	91 50       	subi	r25, 0x01	; 1
     f5a:	e0 40       	sbci	r30, 0x00	; 0
     f5c:	f0 40       	sbci	r31, 0x00	; 0
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <CONVERTER_DEC_TO_BIN+0x7e>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <CONVERTER_DEC_TO_BIN+0x88>
     f62:	00 00       	nop
     f64:	c8 cf       	rjmp	.-112    	; 0xef6 <CONVERTER_DEC_TO_BIN+0x1c>
     f66:	83 34       	cpi	r24, 0x43	; 67
     f68:	61 f4       	brne	.+24     	; 0xf82 <CONVERTER_DEC_TO_BIN+0xa8>
     f6a:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     f6e:	2f ef       	ldi	r18, 0xFF	; 255
     f70:	89 e6       	ldi	r24, 0x69	; 105
     f72:	98 e1       	ldi	r25, 0x18	; 24
     f74:	21 50       	subi	r18, 0x01	; 1
     f76:	80 40       	sbci	r24, 0x00	; 0
     f78:	90 40       	sbci	r25, 0x00	; 0
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <CONVERTER_DEC_TO_BIN+0x9a>
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <CONVERTER_DEC_TO_BIN+0xa4>
     f7e:	00 00       	nop
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <CONVERTER_DEC_TO_BIN+0xb6>
     f82:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_vidDisplayChar4bit>
     f86:	f7 01       	movw	r30, r14
     f88:	11 93       	st	Z+, r17
     f8a:	7f 01       	movw	r14, r30
     f8c:	0f 5f       	subi	r16, 0xFF	; 255
     f8e:	b9 cf       	rjmp	.-142    	; 0xf02 <CONVERTER_DEC_TO_BIN+0x28>
     f90:	65 96       	adiw	r28, 0x15	; 21
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	08 95       	ret

00000faa <CALCULATOR>:
     faa:	5f 92       	push	r5
     fac:	6f 92       	push	r6
     fae:	7f 92       	push	r7
     fb0:	8f 92       	push	r8
     fb2:	9f 92       	push	r9
     fb4:	af 92       	push	r10
     fb6:	bf 92       	push	r11
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	a0 97       	sbiw	r28, 0x20	; 32
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	8e 01       	movw	r16, r28
     fda:	0f 5f       	subi	r16, 0xFF	; 255
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	38 01       	movw	r6, r16
     fe0:	80 2e       	mov	r8, r16
     fe2:	57 2c       	mov	r5, r7
     fe4:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
     fe8:	19 8a       	std	Y+17, r1	; 0x11
     fea:	1a 8a       	std	Y+18, r1	; 0x12
     fec:	1b 8a       	std	Y+19, r1	; 0x13
     fee:	1c 8a       	std	Y+20, r1	; 0x14
     ff0:	1d 8a       	std	Y+21, r1	; 0x15
     ff2:	1e 8a       	std	Y+22, r1	; 0x16
     ff4:	1f 8a       	std	Y+23, r1	; 0x17
     ff6:	18 8e       	std	Y+24, r1	; 0x18
     ff8:	06 e4       	ldi	r16, 0x46	; 70
     ffa:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
     ffe:	98 2e       	mov	r9, r24
    1000:	1b e2       	ldi	r17, 0x2B	; 43
    1002:	81 17       	cp	r24, r17
    1004:	a1 f1       	breq	.+104    	; 0x106e <CALCULATOR+0xc4>
    1006:	2d e2       	ldi	r18, 0x2D	; 45
    1008:	82 17       	cp	r24, r18
    100a:	99 f1       	breq	.+102    	; 0x1072 <CALCULATOR+0xc8>
    100c:	3a e2       	ldi	r19, 0x2A	; 42
    100e:	83 17       	cp	r24, r19
    1010:	91 f1       	breq	.+100    	; 0x1076 <CALCULATOR+0xcc>
    1012:	45 e2       	ldi	r20, 0x25	; 37
    1014:	84 17       	cp	r24, r20
    1016:	89 f1       	breq	.+98     	; 0x107a <CALCULATOR+0xd0>
    1018:	53 e4       	ldi	r21, 0x43	; 67
    101a:	85 17       	cp	r24, r21
    101c:	81 f1       	breq	.+96     	; 0x107e <CALCULATOR+0xd4>
    101e:	8d e3       	ldi	r24, 0x3D	; 61
    1020:	98 16       	cp	r9, r24
    1022:	79 f1       	breq	.+94     	; 0x1082 <CALCULATOR+0xd8>
    1024:	10 e0       	ldi	r17, 0x00	; 0
    1026:	89 2d       	mov	r24, r9
    1028:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_vidDisplayChar4bit>
    102c:	f3 01       	movw	r30, r6
    102e:	e1 0f       	add	r30, r17
    1030:	f1 1d       	adc	r31, r1
    1032:	90 82       	st	Z, r9
    1034:	1f 5f       	subi	r17, 0xFF	; 255
    1036:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
    103a:	98 2e       	mov	r9, r24
    103c:	9b e2       	ldi	r25, 0x2B	; 43
    103e:	89 17       	cp	r24, r25
    1040:	09 f1       	breq	.+66     	; 0x1084 <CALCULATOR+0xda>
    1042:	0f 2e       	mov	r0, r31
    1044:	fd e2       	ldi	r31, 0x2D	; 45
    1046:	ef 2e       	mov	r14, r31
    1048:	f0 2d       	mov	r31, r0
    104a:	8e 15       	cp	r24, r14
    104c:	d9 f0       	breq	.+54     	; 0x1084 <CALCULATOR+0xda>
    104e:	0f 2e       	mov	r0, r31
    1050:	fa e2       	ldi	r31, 0x2A	; 42
    1052:	ff 2e       	mov	r15, r31
    1054:	f0 2d       	mov	r31, r0
    1056:	8f 15       	cp	r24, r15
    1058:	a9 f0       	breq	.+42     	; 0x1084 <CALCULATOR+0xda>
    105a:	25 e2       	ldi	r18, 0x25	; 37
    105c:	82 17       	cp	r24, r18
    105e:	91 f0       	breq	.+36     	; 0x1084 <CALCULATOR+0xda>
    1060:	33 e4       	ldi	r19, 0x43	; 67
    1062:	83 17       	cp	r24, r19
    1064:	79 f0       	breq	.+30     	; 0x1084 <CALCULATOR+0xda>
    1066:	4d e3       	ldi	r20, 0x3D	; 61
    1068:	84 13       	cpse	r24, r20
    106a:	dd cf       	rjmp	.-70     	; 0x1026 <CALCULATOR+0x7c>
    106c:	0b c0       	rjmp	.+22     	; 0x1084 <CALCULATOR+0xda>
    106e:	10 e0       	ldi	r17, 0x00	; 0
    1070:	09 c0       	rjmp	.+18     	; 0x1084 <CALCULATOR+0xda>
    1072:	10 e0       	ldi	r17, 0x00	; 0
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <CALCULATOR+0xda>
    1076:	10 e0       	ldi	r17, 0x00	; 0
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <CALCULATOR+0xda>
    107a:	10 e0       	ldi	r17, 0x00	; 0
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <CALCULATOR+0xda>
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <CALCULATOR+0xda>
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	f3 01       	movw	r30, r6
    1086:	e1 0f       	add	r30, r17
    1088:	f1 1d       	adc	r31, r1
    108a:	10 82       	st	Z, r1
    108c:	0a 32       	cpi	r16, 0x2A	; 42
    108e:	09 f4       	brne	.+2      	; 0x1092 <CALCULATOR+0xe8>
    1090:	59 c0       	rjmp	.+178    	; 0x1144 <CALCULATOR+0x19a>
    1092:	20 f4       	brcc	.+8      	; 0x109c <CALCULATOR+0xf2>
    1094:	05 32       	cpi	r16, 0x25	; 37
    1096:	09 f4       	brne	.+2      	; 0x109a <CALCULATOR+0xf0>
    1098:	77 c0       	rjmp	.+238    	; 0x1188 <CALCULATOR+0x1de>
    109a:	98 c0       	rjmp	.+304    	; 0x11cc <CALCULATOR+0x222>
    109c:	0b 32       	cpi	r16, 0x2B	; 43
    109e:	19 f0       	breq	.+6      	; 0x10a6 <CALCULATOR+0xfc>
    10a0:	0d 32       	cpi	r16, 0x2D	; 45
    10a2:	19 f1       	breq	.+70     	; 0x10ea <CALCULATOR+0x140>
    10a4:	93 c0       	rjmp	.+294    	; 0x11cc <CALCULATOR+0x222>
    10a6:	61 2f       	mov	r22, r17
    10a8:	88 2d       	mov	r24, r8
    10aa:	95 2d       	mov	r25, r5
    10ac:	0e 94 1a 07 	call	0xe34	; 0xe34 <arrToInt>
    10b0:	5b 01       	movw	r10, r22
    10b2:	6c 01       	movw	r12, r24
    10b4:	26 2f       	mov	r18, r22
    10b6:	3b 2d       	mov	r19, r11
    10b8:	4c 2d       	mov	r20, r12
    10ba:	5d 2d       	mov	r21, r13
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a9 88       	ldd	r10, Y+17	; 0x11
    10c6:	ba 88       	ldd	r11, Y+18	; 0x12
    10c8:	cb 88       	ldd	r12, Y+19	; 0x13
    10ca:	dc 88       	ldd	r13, Y+20	; 0x14
    10cc:	ed 88       	ldd	r14, Y+21	; 0x15
    10ce:	fe 88       	ldd	r15, Y+22	; 0x16
    10d0:	0f 89       	ldd	r16, Y+23	; 0x17
    10d2:	18 8d       	ldd	r17, Y+24	; 0x18
    10d4:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__adddi3>
    10d8:	29 8b       	std	Y+17, r18	; 0x11
    10da:	3a 8b       	std	Y+18, r19	; 0x12
    10dc:	4b 8b       	std	Y+19, r20	; 0x13
    10de:	5c 8b       	std	Y+20, r21	; 0x14
    10e0:	6d 8b       	std	Y+21, r22	; 0x15
    10e2:	7e 8b       	std	Y+22, r23	; 0x16
    10e4:	8f 8b       	std	Y+23, r24	; 0x17
    10e6:	98 8f       	std	Y+24, r25	; 0x18
    10e8:	83 c0       	rjmp	.+262    	; 0x11f0 <CALCULATOR+0x246>
    10ea:	61 2f       	mov	r22, r17
    10ec:	88 2d       	mov	r24, r8
    10ee:	95 2d       	mov	r25, r5
    10f0:	0e 94 1a 07 	call	0xe34	; 0xe34 <arrToInt>
    10f4:	7b 01       	movw	r14, r22
    10f6:	8c 01       	movw	r16, r24
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	69 8f       	std	Y+25, r22	; 0x19
    1100:	fa 8e       	std	Y+26, r15	; 0x1a
    1102:	0b 8f       	std	Y+27, r16	; 0x1b
    1104:	1c 8f       	std	Y+28, r17	; 0x1c
    1106:	2d 8f       	std	Y+29, r18	; 0x1d
    1108:	3e 8f       	std	Y+30, r19	; 0x1e
    110a:	4f 8f       	std	Y+31, r20	; 0x1f
    110c:	58 a3       	std	Y+32, r21	; 0x20
    110e:	29 89       	ldd	r18, Y+17	; 0x11
    1110:	3a 89       	ldd	r19, Y+18	; 0x12
    1112:	4b 89       	ldd	r20, Y+19	; 0x13
    1114:	5c 89       	ldd	r21, Y+20	; 0x14
    1116:	6d 89       	ldd	r22, Y+21	; 0x15
    1118:	7e 89       	ldd	r23, Y+22	; 0x16
    111a:	8f 89       	ldd	r24, Y+23	; 0x17
    111c:	98 8d       	ldd	r25, Y+24	; 0x18
    111e:	ae 2c       	mov	r10, r14
    1120:	bf 2c       	mov	r11, r15
    1122:	c0 2e       	mov	r12, r16
    1124:	d1 2e       	mov	r13, r17
    1126:	e1 2c       	mov	r14, r1
    1128:	f1 2c       	mov	r15, r1
    112a:	00 e0       	ldi	r16, 0x00	; 0
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__subdi3>
    1132:	29 8b       	std	Y+17, r18	; 0x11
    1134:	3a 8b       	std	Y+18, r19	; 0x12
    1136:	4b 8b       	std	Y+19, r20	; 0x13
    1138:	5c 8b       	std	Y+20, r21	; 0x14
    113a:	6d 8b       	std	Y+21, r22	; 0x15
    113c:	7e 8b       	std	Y+22, r23	; 0x16
    113e:	8f 8b       	std	Y+23, r24	; 0x17
    1140:	98 8f       	std	Y+24, r25	; 0x18
    1142:	56 c0       	rjmp	.+172    	; 0x11f0 <CALCULATOR+0x246>
    1144:	61 2f       	mov	r22, r17
    1146:	88 2d       	mov	r24, r8
    1148:	95 2d       	mov	r25, r5
    114a:	0e 94 1a 07 	call	0xe34	; 0xe34 <arrToInt>
    114e:	8b 01       	movw	r16, r22
    1150:	9c 01       	movw	r18, r24
    1152:	a0 2e       	mov	r10, r16
    1154:	b1 2e       	mov	r11, r17
    1156:	c2 2e       	mov	r12, r18
    1158:	d3 2e       	mov	r13, r19
    115a:	e1 2c       	mov	r14, r1
    115c:	f1 2c       	mov	r15, r1
    115e:	00 e0       	ldi	r16, 0x00	; 0
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	29 89       	ldd	r18, Y+17	; 0x11
    1164:	3a 89       	ldd	r19, Y+18	; 0x12
    1166:	4b 89       	ldd	r20, Y+19	; 0x13
    1168:	5c 89       	ldd	r21, Y+20	; 0x14
    116a:	6d 89       	ldd	r22, Y+21	; 0x15
    116c:	7e 89       	ldd	r23, Y+22	; 0x16
    116e:	8f 89       	ldd	r24, Y+23	; 0x17
    1170:	98 8d       	ldd	r25, Y+24	; 0x18
    1172:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__muldi3>
    1176:	29 8b       	std	Y+17, r18	; 0x11
    1178:	3a 8b       	std	Y+18, r19	; 0x12
    117a:	4b 8b       	std	Y+19, r20	; 0x13
    117c:	5c 8b       	std	Y+20, r21	; 0x14
    117e:	6d 8b       	std	Y+21, r22	; 0x15
    1180:	7e 8b       	std	Y+22, r23	; 0x16
    1182:	8f 8b       	std	Y+23, r24	; 0x17
    1184:	98 8f       	std	Y+24, r25	; 0x18
    1186:	34 c0       	rjmp	.+104    	; 0x11f0 <CALCULATOR+0x246>
    1188:	61 2f       	mov	r22, r17
    118a:	88 2d       	mov	r24, r8
    118c:	95 2d       	mov	r25, r5
    118e:	0e 94 1a 07 	call	0xe34	; 0xe34 <arrToInt>
    1192:	8b 01       	movw	r16, r22
    1194:	9c 01       	movw	r18, r24
    1196:	a0 2e       	mov	r10, r16
    1198:	b1 2e       	mov	r11, r17
    119a:	c2 2e       	mov	r12, r18
    119c:	d3 2e       	mov	r13, r19
    119e:	e1 2c       	mov	r14, r1
    11a0:	f1 2c       	mov	r15, r1
    11a2:	00 e0       	ldi	r16, 0x00	; 0
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	29 89       	ldd	r18, Y+17	; 0x11
    11a8:	3a 89       	ldd	r19, Y+18	; 0x12
    11aa:	4b 89       	ldd	r20, Y+19	; 0x13
    11ac:	5c 89       	ldd	r21, Y+20	; 0x14
    11ae:	6d 89       	ldd	r22, Y+21	; 0x15
    11b0:	7e 89       	ldd	r23, Y+22	; 0x16
    11b2:	8f 89       	ldd	r24, Y+23	; 0x17
    11b4:	98 8d       	ldd	r25, Y+24	; 0x18
    11b6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__moddi3>
    11ba:	29 8b       	std	Y+17, r18	; 0x11
    11bc:	3a 8b       	std	Y+18, r19	; 0x12
    11be:	4b 8b       	std	Y+19, r20	; 0x13
    11c0:	5c 8b       	std	Y+20, r21	; 0x14
    11c2:	6d 8b       	std	Y+21, r22	; 0x15
    11c4:	7e 8b       	std	Y+22, r23	; 0x16
    11c6:	8f 8b       	std	Y+23, r24	; 0x17
    11c8:	98 8f       	std	Y+24, r25	; 0x18
    11ca:	12 c0       	rjmp	.+36     	; 0x11f0 <CALCULATOR+0x246>
    11cc:	61 2f       	mov	r22, r17
    11ce:	88 2d       	mov	r24, r8
    11d0:	95 2d       	mov	r25, r5
    11d2:	0e 94 1a 07 	call	0xe34	; 0xe34 <arrToInt>
    11d6:	7b 01       	movw	r14, r22
    11d8:	8c 01       	movw	r16, r24
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	a9 01       	movw	r20, r18
    11e0:	69 8b       	std	Y+17, r22	; 0x11
    11e2:	fa 8a       	std	Y+18, r15	; 0x12
    11e4:	0b 8b       	std	Y+19, r16	; 0x13
    11e6:	1c 8b       	std	Y+20, r17	; 0x14
    11e8:	2d 8b       	std	Y+21, r18	; 0x15
    11ea:	3e 8b       	std	Y+22, r19	; 0x16
    11ec:	4f 8b       	std	Y+23, r20	; 0x17
    11ee:	58 8f       	std	Y+24, r21	; 0x18
    11f0:	0f 2e       	mov	r0, r31
    11f2:	fd e3       	ldi	r31, 0x3D	; 61
    11f4:	ff 2e       	mov	r15, r31
    11f6:	f0 2d       	mov	r31, r0
    11f8:	9f 14       	cp	r9, r15
    11fa:	21 f0       	breq	.+8      	; 0x1204 <CALCULATOR+0x25a>
    11fc:	03 e4       	ldi	r16, 0x43	; 67
    11fe:	90 16       	cp	r9, r16
    1200:	61 f0       	breq	.+24     	; 0x121a <CALCULATOR+0x270>
    1202:	17 c0       	rjmp	.+46     	; 0x1232 <CALCULATOR+0x288>
    1204:	29 89       	ldd	r18, Y+17	; 0x11
    1206:	3a 89       	ldd	r19, Y+18	; 0x12
    1208:	4b 89       	ldd	r20, Y+19	; 0x13
    120a:	5c 89       	ldd	r21, Y+20	; 0x14
    120c:	6d 89       	ldd	r22, Y+21	; 0x15
    120e:	7e 89       	ldd	r23, Y+22	; 0x16
    1210:	8f 89       	ldd	r24, Y+23	; 0x17
    1212:	98 8d       	ldd	r25, Y+24	; 0x18
    1214:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <END_CALCULATOR>
    1218:	e5 ce       	rjmp	.-566    	; 0xfe4 <CALCULATOR+0x3a>
    121a:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
    121e:	1f ef       	ldi	r17, 0xFF	; 255
    1220:	29 e6       	ldi	r18, 0x69	; 105
    1222:	38 e1       	ldi	r19, 0x18	; 24
    1224:	11 50       	subi	r17, 0x01	; 1
    1226:	20 40       	sbci	r18, 0x00	; 0
    1228:	30 40       	sbci	r19, 0x00	; 0
    122a:	e1 f7       	brne	.-8      	; 0x1224 <CALCULATOR+0x27a>
    122c:	00 c0       	rjmp	.+0      	; 0x122e <CALCULATOR+0x284>
    122e:	00 00       	nop
    1230:	11 c0       	rjmp	.+34     	; 0x1254 <CALCULATOR+0x2aa>
    1232:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
    1236:	29 89       	ldd	r18, Y+17	; 0x11
    1238:	3a 89       	ldd	r19, Y+18	; 0x12
    123a:	4b 89       	ldd	r20, Y+19	; 0x13
    123c:	5c 89       	ldd	r21, Y+20	; 0x14
    123e:	6d 89       	ldd	r22, Y+21	; 0x15
    1240:	7e 89       	ldd	r23, Y+22	; 0x16
    1242:	8f 89       	ldd	r24, Y+23	; 0x17
    1244:	98 8d       	ldd	r25, Y+24	; 0x18
    1246:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_vidDisplayRealNumber4bit>
    124a:	89 2d       	mov	r24, r9
    124c:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_vidDisplayChar4bit>
    1250:	09 2d       	mov	r16, r9
    1252:	d3 ce       	rjmp	.-602    	; 0xffa <CALCULATOR+0x50>
    1254:	a0 96       	adiw	r28, 0x20	; 32
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	9f 90       	pop	r9
    1276:	8f 90       	pop	r8
    1278:	7f 90       	pop	r7
    127a:	6f 90       	pop	r6
    127c:	5f 90       	pop	r5
    127e:	08 95       	ret

00001280 <ERROR_CHOICE>:

void ERROR_CHOICE(){
	LCD_vidClearScreen4bit( );
    1280:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	LCD_voidDisplayString4bit( "Choose valid one");
    1284:	80 ee       	ldi	r24, 0xE0	; 224
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
    128c:	2f ef       	ldi	r18, 0xFF	; 255
    128e:	89 e6       	ldi	r24, 0x69	; 105
    1290:	98 e1       	ldi	r25, 0x18	; 24
    1292:	21 50       	subi	r18, 0x01	; 1
    1294:	80 40       	sbci	r24, 0x00	; 0
    1296:	90 40       	sbci	r25, 0x00	; 0
    1298:	e1 f7       	brne	.-8      	; 0x1292 <ERROR_CHOICE+0x12>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <ERROR_CHOICE+0x1c>
    129c:	00 00       	nop
	_delay_ms(500);
	LCD_vidClearScreen4bit( );
    129e:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
    12a2:	08 95       	ret

000012a4 <CONVERTER>:
// Converter Functions

void CONVERTER(void){
	u8 conv_m;
	CONV_MODE :
	LCD_vidClearScreen4bit();
    12a4:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	LCD_vidMoveCursor4bit(1,1);
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("1_ Dec --> Bin ");
    12b0:	81 ef       	ldi	r24, 0xF1	; 241
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit(2,1);
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("2_ Bin --> Dec ");
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
	conv_m = getFromKeypad();
    12c8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
	switch (conv_m){
    12cc:	81 33       	cpi	r24, 0x31	; 49
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <CONVERTER+0x32>
    12d0:	82 33       	cpi	r24, 0x32	; 50
    12d2:	21 f0       	breq	.+8      	; 0x12dc <CONVERTER+0x38>
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <CONVERTER+0x3e>
		case '1' :
		CONVERTER_DEC_TO_BIN();
    12d6:	0e 94 6d 07 	call	0xeda	; 0xeda <CONVERTER_DEC_TO_BIN>
		break;
    12da:	08 95       	ret
		case '2' :
		CONVERTER_BIN_TO_DEC();
    12dc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <CONVERTER_BIN_TO_DEC>
		break;
    12e0:	08 95       	ret
		default:
		ERROR_CHOICE();
    12e2:	0e 94 40 09 	call	0x1280	; 0x1280 <ERROR_CHOICE>
		goto CONV_MODE;
    12e6:	de cf       	rjmp	.-68     	; 0x12a4 <CONVERTER>

000012e8 <ENTRY_MODE>:

// MAIN FUNCTIONS

void ENTRY_MODE(void)
{
	LCD_vidClearScreen4bit( );
    12e8:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	LCD_voidDisplayString4bit( "Choose a Mode :");
    12ec:	81 e1       	ldi	r24, 0x11	; 17
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit( 2,1);
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
    12fc:	2f ef       	ldi	r18, 0xFF	; 255
    12fe:	81 ee       	ldi	r24, 0xE1	; 225
    1300:	94 e0       	ldi	r25, 0x04	; 4
    1302:	21 50       	subi	r18, 0x01	; 1
    1304:	80 40       	sbci	r24, 0x00	; 0
    1306:	90 40       	sbci	r25, 0x00	; 0
    1308:	e1 f7       	brne	.-8      	; 0x1302 <ENTRY_MODE+0x1a>
    130a:	00 c0       	rjmp	.+0      	; 0x130c <ENTRY_MODE+0x24>
    130c:	00 00       	nop
	_delay_ms(100);
	LCD_voidDisplayString4bit("1_BT 2_Cal 3_Con");
    130e:	81 e2       	ldi	r24, 0x21	; 33
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
    1316:	08 95       	ret

00001318 <Init>:
}

void Init(void)
{
	srand(time(NULL));
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 49 00 	call	0x92	; 0x92 <time>
    1320:	cb 01       	movw	r24, r22
    1322:	0e 94 3c 10 	call	0x2078	; 0x2078 <srand>
	LCD_vidInit4bit();
    1326:	0e 94 31 03 	call	0x662	; 0x662 <LCD_vidInit4bit>
	KPD_vidInit(key_pad_port,LOW_NIBBLE,HIGH_NIBBLE);
    132a:	41 e0       	ldi	r20, 0x01	; 1
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	0e 94 63 02 	call	0x4c6	; 0x4c6 <KPD_vidInit>
	DIO_vidSetPinMode(GPIOC,PIN0,OUTPUT);
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
	DIO_vidWritePin(GPIOC,PIN0,LOW);
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	DIO_vidSetPinMode(buz_port,buz_pin,OUTPUT);
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
	DIO_vidWritePin(buz_port,buz_pin,LOW);
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	DIO_vidSetPortMode(sev_seg_port,OUTPUT);
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_vidSetPortMode>
    1364:	08 95       	ret

00001366 <triesCount>:
}

u8 triesCount(u8 try)
{
    1366:	cf 93       	push	r28

    u8 returnVal = 1;
	tries--;
    1368:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <tries>
    136c:	91 50       	subi	r25, 0x01	; 1
    136e:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <tries>
    DIO_vidWritePort(sev_seg_port,char_arr[--try]);
    1372:	cf ef       	ldi	r28, 0xFF	; 255
    1374:	c8 0f       	add	r28, r24
    1376:	ec 2f       	mov	r30, r28
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	ec 59       	subi	r30, 0x9C	; 156
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	60 81       	ld	r22, Z
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
    if (try == 0)
    1386:	c1 11       	cpse	r28, r1
    1388:	1f c0       	rjmp	.+62     	; 0x13c8 <triesCount+0x62>
    {
    	LCD_voidDisplayString4bit("You have no ");
    138a:	82 e3       	ldi	r24, 0x32	; 50
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
    	LCD_vidMoveCursor4bit(2,1);
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
    	LCD_voidDisplayString4bit("tries left");
    139a:	8f e3       	ldi	r24, 0x3F	; 63
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
    13a2:	2f ef       	ldi	r18, 0xFF	; 255
    13a4:	89 e6       	ldi	r24, 0x69	; 105
    13a6:	98 e1       	ldi	r25, 0x18	; 24
    13a8:	21 50       	subi	r18, 0x01	; 1
    13aa:	80 40       	sbci	r24, 0x00	; 0
    13ac:	90 40       	sbci	r25, 0x00	; 0
    13ae:	e1 f7       	brne	.-8      	; 0x13a8 <triesCount+0x42>
    13b0:	00 c0       	rjmp	.+0      	; 0x13b2 <triesCount+0x4c>
    13b2:	00 00       	nop
    	_delay_ms(500);
    	tries = 3;
    13b4:	83 e0       	ldi	r24, 0x03	; 3
    13b6:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <tries>
        DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    13ba:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <char_arr+0x3>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
    	returnVal = 0;
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	18 c0       	rjmp	.+48     	; 0x13f8 <triesCount+0x92>
    }else{
		LCD_voidDisplayString4bit("Try Again !");
    13c8:	8a e4       	ldi	r24, 0x4A	; 74
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
		DIO_vidWritePin(buz_port,buz_pin,HIGH);
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	83 e0       	ldi	r24, 0x03	; 3
    13d6:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
    13da:	2f ef       	ldi	r18, 0xFF	; 255
    13dc:	89 e6       	ldi	r24, 0x69	; 105
    13de:	98 e1       	ldi	r25, 0x18	; 24
    13e0:	21 50       	subi	r18, 0x01	; 1
    13e2:	80 40       	sbci	r24, 0x00	; 0
    13e4:	90 40       	sbci	r25, 0x00	; 0
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <triesCount+0x7a>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <triesCount+0x84>
    13ea:	00 00       	nop
		_delay_ms(500);
		DIO_vidWritePin(buz_port,buz_pin,LOW);
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
}

u8 triesCount(u8 try)
{

    u8 returnVal = 1;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
		DIO_vidWritePin(buz_port,buz_pin,HIGH);
		_delay_ms(500);
		DIO_vidWritePin(buz_port,buz_pin,LOW);
	}
    return returnVal;
}
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <BRAIN_TEST_LOGIC>:
	LCD_vidMoveCursor4bit(1,1);

}

void BRAIN_TEST_LOGIC()
{
    13fc:	6f 92       	push	r6
    13fe:	7f 92       	push	r7
    1400:	8f 92       	push	r8
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	2d 97       	sbiw	r28, 0x0d	; 13
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
	LCD_vidClearScreen4bit();
    1428:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	LCD_vidMoveCursor4bit(1,1);
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
	u8 temp,i,num1[4],num2[4],res[4],SEL,REAL_RES[4],count;
	Brain_Test_rand_logic:
	tries = 3;
    1434:	0f 2e       	mov	r0, r31
    1436:	f3 e0       	ldi	r31, 0x03	; 3
    1438:	7f 2e       	mov	r7, r31
    143a:	f0 2d       	mov	r31, r0
	DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    143c:	0f 2e       	mov	r0, r31
    143e:	f4 e6       	ldi	r31, 0x64	; 100
    1440:	8f 2e       	mov	r8, r31
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	9f 2e       	mov	r9, r31
    1446:	f0 2d       	mov	r31, r0
	LCD_vidClearScreen4bit();
	LCD_vidMoveCursor4bit(1,1);
	temp = rand()%6;
    1448:	0f 2e       	mov	r0, r31
    144a:	f6 e0       	ldi	r31, 0x06	; 6
    144c:	af 2e       	mov	r10, r31
    144e:	b1 2c       	mov	r11, r1
    1450:	f0 2d       	mov	r31, r0
{
	LCD_vidClearScreen4bit();
	LCD_vidMoveCursor4bit(1,1);
	u8 temp,i,num1[4],num2[4],res[4],SEL,REAL_RES[4],count;
	Brain_Test_rand_logic:
	tries = 3;
    1452:	70 92 23 02 	sts	0x0223, r7	; 0x800223 <tries>
	DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    1456:	f4 01       	movw	r30, r8
    1458:	63 81       	ldd	r22, Z+3	; 0x03
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
	LCD_vidClearScreen4bit();
    1460:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	LCD_vidMoveCursor4bit(1,1);
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
	temp = rand()%6;
    146c:	0e 94 37 10 	call	0x206e	; 0x206e <rand>
    1470:	b5 01       	movw	r22, r10
    1472:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__divmodhi4>
    1476:	68 2e       	mov	r6, r24
	char cond= 1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	8d 87       	std	Y+13, r24	; 0x0d
    147c:	8e 01       	movw	r16, r28
    147e:	0f 5f       	subi	r16, 0xFF	; 255
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	7e 01       	movw	r14, r28
    1484:	f5 e0       	ldi	r31, 0x05	; 5
    1486:	ef 0e       	add	r14, r31
    1488:	f1 1c       	adc	r15, r1
    148a:	67 01       	movw	r12, r14
	i = 0;
	while (i<4)
	{
		num1[i] = rand()%2;
    148c:	0e 94 37 10 	call	0x206e	; 0x206e <rand>
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	90 78       	andi	r25, 0x80	; 128
    1494:	99 23       	and	r25, r25
    1496:	24 f4       	brge	.+8      	; 0x14a0 <BRAIN_TEST_LOGIC+0xa4>
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	8e 6f       	ori	r24, 0xFE	; 254
    149c:	9f 6f       	ori	r25, 0xFF	; 255
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	f8 01       	movw	r30, r16
    14a2:	81 93       	st	Z+, r24
    14a4:	8f 01       	movw	r16, r30
		num2[i] = rand()%2;
    14a6:	0e 94 37 10 	call	0x206e	; 0x206e <rand>
    14aa:	81 70       	andi	r24, 0x01	; 1
    14ac:	90 78       	andi	r25, 0x80	; 128
    14ae:	99 23       	and	r25, r25
    14b0:	24 f4       	brge	.+8      	; 0x14ba <BRAIN_TEST_LOGIC+0xbe>
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	8e 6f       	ori	r24, 0xFE	; 254
    14b6:	9f 6f       	ori	r25, 0xFF	; 255
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	f7 01       	movw	r30, r14
    14bc:	81 93       	st	Z+, r24
    14be:	7f 01       	movw	r14, r30
	LCD_vidClearScreen4bit();
	LCD_vidMoveCursor4bit(1,1);
	temp = rand()%6;
	char cond= 1;
	i = 0;
	while (i<4)
    14c0:	0c 15       	cp	r16, r12
    14c2:	1d 05       	cpc	r17, r13
    14c4:	19 f7       	brne	.-58     	; 0x148c <BRAIN_TEST_LOGIC+0x90>
		num2[i] = rand()%2;
		i++;
	}
	
	// logic modes
	if(temp==0)    //AND
    14c6:	61 10       	cpse	r6, r1
    14c8:	52 c0       	rjmp	.+164    	; 0x156e <BRAIN_TEST_LOGIC+0x172>
	{
		
		performLogicGate(0,num1,num2, REAL_RES);
    14ca:	9e 01       	movw	r18, r28
    14cc:	27 5f       	subi	r18, 0xF7	; 247
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	ae 01       	movw	r20, r28
    14d2:	4b 5f       	subi	r20, 0xFB	; 251
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	be 01       	movw	r22, r28
    14d8:	6f 5f       	subi	r22, 0xFF	; 255
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	0e 94 cc 04 	call	0x998	; 0x998 <performLogicGate>
		tryAND:
		
		cond = TRUE;
    14e2:	11 e0       	ldi	r17, 0x01	; 1
    14e4:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," AND ");
    14e6:	46 e5       	ldi	r20, 0x56	; 86
    14e8:	51 e0       	ldi	r21, 0x01	; 1
    14ea:	be 01       	movw	r22, r28
    14ec:	6b 5f       	subi	r22, 0xFB	; 251
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	0e 94 76 05 	call	0xaec	; 0xaec <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    14f8:	be 01       	movw	r22, r28
    14fa:	63 5f       	subi	r22, 0xF3	; 243
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	ce 01       	movw	r24, r28
    1500:	09 96       	adiw	r24, 0x09	; 9
    1502:	0e 94 d7 06 	call	0xdae	; 0xdae <getLogicResult>
		if (cond == 1)
    1506:	8d 85       	ldd	r24, Y+13	; 0x0d
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	71 f4       	brne	.+28     	; 0x1528 <BRAIN_TEST_LOGIC+0x12c>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    150c:	8c e5       	ldi	r24, 0x5C	; 92
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
			DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    1514:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <tries>
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	ec 59       	subi	r30, 0x9C	; 156
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	60 81       	ld	r22, Z
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
    1526:	c7 c1       	rjmp	.+910    	; 0x18b6 <BRAIN_TEST_LOGIC+0x4ba>
		}else if (cond==2){
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	09 f4       	brne	.+2      	; 0x152e <BRAIN_TEST_LOGIC+0x132>
    152c:	d2 c1       	rjmp	.+932    	; 0x18d2 <BRAIN_TEST_LOGIC+0x4d6>
			return;
		}
		else{
			count = triesCount(tries);
    152e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    1532:	0e 94 b3 09 	call	0x1366	; 0x1366 <triesCount>
			if(count == 0)
    1536:	81 11       	cpse	r24, r1
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <BRAIN_TEST_LOGIC+0x15a>
			{
				LogicWrongAnswer(REAL_RES);
    153a:	ce 01       	movw	r24, r28
    153c:	09 96       	adiw	r24, 0x09	; 9
    153e:	0e 94 d3 05 	call	0xba6	; 0xba6 <LogicWrongAnswer>
    1542:	ff ef       	ldi	r31, 0xFF	; 255
    1544:	23 ed       	ldi	r18, 0xD3	; 211
    1546:	80 e3       	ldi	r24, 0x30	; 48
    1548:	f1 50       	subi	r31, 0x01	; 1
    154a:	20 40       	sbci	r18, 0x00	; 0
    154c:	80 40       	sbci	r24, 0x00	; 0
    154e:	e1 f7       	brne	.-8      	; 0x1548 <BRAIN_TEST_LOGIC+0x14c>
    1550:	00 c0       	rjmp	.+0      	; 0x1552 <BRAIN_TEST_LOGIC+0x156>
    1552:	00 00       	nop
    1554:	7e cf       	rjmp	.-260    	; 0x1452 <BRAIN_TEST_LOGIC+0x56>
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	e9 e6       	ldi	r30, 0x69	; 105
    155a:	f8 e1       	ldi	r31, 0x18	; 24
    155c:	91 50       	subi	r25, 0x01	; 1
    155e:	e0 40       	sbci	r30, 0x00	; 0
    1560:	f0 40       	sbci	r31, 0x00	; 0
    1562:	e1 f7       	brne	.-8      	; 0x155c <BRAIN_TEST_LOGIC+0x160>
    1564:	00 c0       	rjmp	.+0      	; 0x1566 <BRAIN_TEST_LOGIC+0x16a>
    1566:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    1568:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
			goto tryAND;
    156c:	bb cf       	rjmp	.-138    	; 0x14e4 <BRAIN_TEST_LOGIC+0xe8>
		}
		
	}
	else if (temp == 1)     //OR
    156e:	21 e0       	ldi	r18, 0x01	; 1
    1570:	62 12       	cpse	r6, r18
    1572:	52 c0       	rjmp	.+164    	; 0x1618 <BRAIN_TEST_LOGIC+0x21c>
	{
		
		performLogicGate(1,num1,num2, REAL_RES);
    1574:	9e 01       	movw	r18, r28
    1576:	27 5f       	subi	r18, 0xF7	; 247
    1578:	3f 4f       	sbci	r19, 0xFF	; 255
    157a:	ae 01       	movw	r20, r28
    157c:	4b 5f       	subi	r20, 0xFB	; 251
    157e:	5f 4f       	sbci	r21, 0xFF	; 255
    1580:	be 01       	movw	r22, r28
    1582:	6f 5f       	subi	r22, 0xFF	; 255
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0e 94 cc 04 	call	0x998	; 0x998 <performLogicGate>
		tryOR:
		cond = TRUE;
    158c:	11 e0       	ldi	r17, 0x01	; 1
    158e:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," OR ");
    1590:	4d e6       	ldi	r20, 0x6D	; 109
    1592:	51 e0       	ldi	r21, 0x01	; 1
    1594:	be 01       	movw	r22, r28
    1596:	6b 5f       	subi	r22, 0xFB	; 251
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	ce 01       	movw	r24, r28
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	0e 94 76 05 	call	0xaec	; 0xaec <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    15a2:	be 01       	movw	r22, r28
    15a4:	63 5f       	subi	r22, 0xF3	; 243
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	ce 01       	movw	r24, r28
    15aa:	09 96       	adiw	r24, 0x09	; 9
    15ac:	0e 94 d7 06 	call	0xdae	; 0xdae <getLogicResult>
		if (cond == 1)
    15b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	71 f4       	brne	.+28     	; 0x15d2 <BRAIN_TEST_LOGIC+0x1d6>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    15b6:	8c e5       	ldi	r24, 0x5C	; 92
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
			DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    15be:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <tries>
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	ec 59       	subi	r30, 0x9C	; 156
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	60 81       	ld	r22, Z
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
    15d0:	72 c1       	rjmp	.+740    	; 0x18b6 <BRAIN_TEST_LOGIC+0x4ba>
		}else if (cond==2){
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <BRAIN_TEST_LOGIC+0x1dc>
    15d6:	7d c1       	rjmp	.+762    	; 0x18d2 <BRAIN_TEST_LOGIC+0x4d6>
			return;
		}else{
			count = triesCount(tries);
    15d8:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    15dc:	0e 94 b3 09 	call	0x1366	; 0x1366 <triesCount>
			if(count == 0)
    15e0:	81 11       	cpse	r24, r1
    15e2:	0e c0       	rjmp	.+28     	; 0x1600 <BRAIN_TEST_LOGIC+0x204>
			{
				LogicWrongAnswer(REAL_RES);
    15e4:	ce 01       	movw	r24, r28
    15e6:	09 96       	adiw	r24, 0x09	; 9
    15e8:	0e 94 d3 05 	call	0xba6	; 0xba6 <LogicWrongAnswer>
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	93 ed       	ldi	r25, 0xD3	; 211
    15f0:	e0 e3       	ldi	r30, 0x30	; 48
    15f2:	81 50       	subi	r24, 0x01	; 1
    15f4:	90 40       	sbci	r25, 0x00	; 0
    15f6:	e0 40       	sbci	r30, 0x00	; 0
    15f8:	e1 f7       	brne	.-8      	; 0x15f2 <BRAIN_TEST_LOGIC+0x1f6>
    15fa:	00 c0       	rjmp	.+0      	; 0x15fc <BRAIN_TEST_LOGIC+0x200>
    15fc:	00 00       	nop
    15fe:	29 cf       	rjmp	.-430    	; 0x1452 <BRAIN_TEST_LOGIC+0x56>
    1600:	ff ef       	ldi	r31, 0xFF	; 255
    1602:	29 e6       	ldi	r18, 0x69	; 105
    1604:	88 e1       	ldi	r24, 0x18	; 24
    1606:	f1 50       	subi	r31, 0x01	; 1
    1608:	20 40       	sbci	r18, 0x00	; 0
    160a:	80 40       	sbci	r24, 0x00	; 0
    160c:	e1 f7       	brne	.-8      	; 0x1606 <BRAIN_TEST_LOGIC+0x20a>
    160e:	00 c0       	rjmp	.+0      	; 0x1610 <BRAIN_TEST_LOGIC+0x214>
    1610:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    1612:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>

			goto tryOR;
    1616:	bb cf       	rjmp	.-138    	; 0x158e <BRAIN_TEST_LOGIC+0x192>
		}
	}
	else if (temp == 2)     //NAND
    1618:	92 e0       	ldi	r25, 0x02	; 2
    161a:	69 12       	cpse	r6, r25
    161c:	52 c0       	rjmp	.+164    	; 0x16c2 <BRAIN_TEST_LOGIC+0x2c6>
	{
		
		performLogicGate(2,num1,num2,REAL_RES);
    161e:	9e 01       	movw	r18, r28
    1620:	27 5f       	subi	r18, 0xF7	; 247
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	ae 01       	movw	r20, r28
    1626:	4b 5f       	subi	r20, 0xFB	; 251
    1628:	5f 4f       	sbci	r21, 0xFF	; 255
    162a:	be 01       	movw	r22, r28
    162c:	6f 5f       	subi	r22, 0xFF	; 255
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	0e 94 cc 04 	call	0x998	; 0x998 <performLogicGate>
		tryNAND:
		cond = TRUE;
    1636:	11 e0       	ldi	r17, 0x01	; 1
    1638:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," NAND ");
    163a:	42 e7       	ldi	r20, 0x72	; 114
    163c:	51 e0       	ldi	r21, 0x01	; 1
    163e:	be 01       	movw	r22, r28
    1640:	6b 5f       	subi	r22, 0xFB	; 251
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	ce 01       	movw	r24, r28
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	0e 94 76 05 	call	0xaec	; 0xaec <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    164c:	be 01       	movw	r22, r28
    164e:	63 5f       	subi	r22, 0xF3	; 243
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	ce 01       	movw	r24, r28
    1654:	09 96       	adiw	r24, 0x09	; 9
    1656:	0e 94 d7 06 	call	0xdae	; 0xdae <getLogicResult>
		if (cond == 1)
    165a:	8d 85       	ldd	r24, Y+13	; 0x0d
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	71 f4       	brne	.+28     	; 0x167c <BRAIN_TEST_LOGIC+0x280>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    1660:	8c e5       	ldi	r24, 0x5C	; 92
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
			DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    1668:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <tries>
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	ec 59       	subi	r30, 0x9C	; 156
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	60 81       	ld	r22, Z
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
    167a:	1d c1       	rjmp	.+570    	; 0x18b6 <BRAIN_TEST_LOGIC+0x4ba>
		}else if (cond==2){
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	09 f4       	brne	.+2      	; 0x1682 <BRAIN_TEST_LOGIC+0x286>
    1680:	28 c1       	rjmp	.+592    	; 0x18d2 <BRAIN_TEST_LOGIC+0x4d6>
			return;
		}else{
			count = triesCount(tries);
    1682:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    1686:	0e 94 b3 09 	call	0x1366	; 0x1366 <triesCount>
			if(count == 0)
    168a:	81 11       	cpse	r24, r1
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <BRAIN_TEST_LOGIC+0x2ae>
			{
				LogicWrongAnswer(REAL_RES);
    168e:	ce 01       	movw	r24, r28
    1690:	09 96       	adiw	r24, 0x09	; 9
    1692:	0e 94 d3 05 	call	0xba6	; 0xba6 <LogicWrongAnswer>
    1696:	ef ef       	ldi	r30, 0xFF	; 255
    1698:	f3 ed       	ldi	r31, 0xD3	; 211
    169a:	20 e3       	ldi	r18, 0x30	; 48
    169c:	e1 50       	subi	r30, 0x01	; 1
    169e:	f0 40       	sbci	r31, 0x00	; 0
    16a0:	20 40       	sbci	r18, 0x00	; 0
    16a2:	e1 f7       	brne	.-8      	; 0x169c <BRAIN_TEST_LOGIC+0x2a0>
    16a4:	00 c0       	rjmp	.+0      	; 0x16a6 <BRAIN_TEST_LOGIC+0x2aa>
    16a6:	00 00       	nop
    16a8:	d4 ce       	rjmp	.-600    	; 0x1452 <BRAIN_TEST_LOGIC+0x56>
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	99 e6       	ldi	r25, 0x69	; 105
    16ae:	e8 e1       	ldi	r30, 0x18	; 24
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	90 40       	sbci	r25, 0x00	; 0
    16b4:	e0 40       	sbci	r30, 0x00	; 0
    16b6:	e1 f7       	brne	.-8      	; 0x16b0 <BRAIN_TEST_LOGIC+0x2b4>
    16b8:	00 c0       	rjmp	.+0      	; 0x16ba <BRAIN_TEST_LOGIC+0x2be>
    16ba:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    16bc:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>

			goto tryNAND;
    16c0:	bb cf       	rjmp	.-138    	; 0x1638 <BRAIN_TEST_LOGIC+0x23c>
		}
	}
	else if (temp == 3)     //NOR
    16c2:	f3 e0       	ldi	r31, 0x03	; 3
    16c4:	6f 12       	cpse	r6, r31
    16c6:	52 c0       	rjmp	.+164    	; 0x176c <BRAIN_TEST_LOGIC+0x370>
	{
		
		performLogicGate(3,num1,num2,REAL_RES);
    16c8:	9e 01       	movw	r18, r28
    16ca:	27 5f       	subi	r18, 0xF7	; 247
    16cc:	3f 4f       	sbci	r19, 0xFF	; 255
    16ce:	ae 01       	movw	r20, r28
    16d0:	4b 5f       	subi	r20, 0xFB	; 251
    16d2:	5f 4f       	sbci	r21, 0xFF	; 255
    16d4:	be 01       	movw	r22, r28
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	87 2d       	mov	r24, r7
    16dc:	0e 94 cc 04 	call	0x998	; 0x998 <performLogicGate>
		tryNOR:
		cond = TRUE;
    16e0:	11 e0       	ldi	r17, 0x01	; 1
    16e2:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," NOR ");
    16e4:	49 e7       	ldi	r20, 0x79	; 121
    16e6:	51 e0       	ldi	r21, 0x01	; 1
    16e8:	be 01       	movw	r22, r28
    16ea:	6b 5f       	subi	r22, 0xFB	; 251
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	ce 01       	movw	r24, r28
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	0e 94 76 05 	call	0xaec	; 0xaec <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    16f6:	be 01       	movw	r22, r28
    16f8:	63 5f       	subi	r22, 0xF3	; 243
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	ce 01       	movw	r24, r28
    16fe:	09 96       	adiw	r24, 0x09	; 9
    1700:	0e 94 d7 06 	call	0xdae	; 0xdae <getLogicResult>
		if (cond == 1)
    1704:	8d 85       	ldd	r24, Y+13	; 0x0d
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	71 f4       	brne	.+28     	; 0x1726 <BRAIN_TEST_LOGIC+0x32a>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    170a:	8c e5       	ldi	r24, 0x5C	; 92
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
			DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    1712:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <tries>
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	ec 59       	subi	r30, 0x9C	; 156
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	60 81       	ld	r22, Z
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
    1724:	c8 c0       	rjmp	.+400    	; 0x18b6 <BRAIN_TEST_LOGIC+0x4ba>
		}else if (cond==2){
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	09 f4       	brne	.+2      	; 0x172c <BRAIN_TEST_LOGIC+0x330>
    172a:	d3 c0       	rjmp	.+422    	; 0x18d2 <BRAIN_TEST_LOGIC+0x4d6>
			return;
		}else
		{
			count = triesCount(tries);
    172c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    1730:	0e 94 b3 09 	call	0x1366	; 0x1366 <triesCount>
			if(count == 0)
    1734:	81 11       	cpse	r24, r1
    1736:	0e c0       	rjmp	.+28     	; 0x1754 <BRAIN_TEST_LOGIC+0x358>
			{
				LogicWrongAnswer(REAL_RES);
    1738:	ce 01       	movw	r24, r28
    173a:	09 96       	adiw	r24, 0x09	; 9
    173c:	0e 94 d3 05 	call	0xba6	; 0xba6 <LogicWrongAnswer>
    1740:	2f ef       	ldi	r18, 0xFF	; 255
    1742:	83 ed       	ldi	r24, 0xD3	; 211
    1744:	90 e3       	ldi	r25, 0x30	; 48
    1746:	21 50       	subi	r18, 0x01	; 1
    1748:	80 40       	sbci	r24, 0x00	; 0
    174a:	90 40       	sbci	r25, 0x00	; 0
    174c:	e1 f7       	brne	.-8      	; 0x1746 <BRAIN_TEST_LOGIC+0x34a>
    174e:	00 c0       	rjmp	.+0      	; 0x1750 <BRAIN_TEST_LOGIC+0x354>
    1750:	00 00       	nop
    1752:	7f ce       	rjmp	.-770    	; 0x1452 <BRAIN_TEST_LOGIC+0x56>
    1754:	ef ef       	ldi	r30, 0xFF	; 255
    1756:	f9 e6       	ldi	r31, 0x69	; 105
    1758:	28 e1       	ldi	r18, 0x18	; 24
    175a:	e1 50       	subi	r30, 0x01	; 1
    175c:	f0 40       	sbci	r31, 0x00	; 0
    175e:	20 40       	sbci	r18, 0x00	; 0
    1760:	e1 f7       	brne	.-8      	; 0x175a <BRAIN_TEST_LOGIC+0x35e>
    1762:	00 c0       	rjmp	.+0      	; 0x1764 <BRAIN_TEST_LOGIC+0x368>
    1764:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    1766:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
			goto tryNOR;
    176a:	bb cf       	rjmp	.-138    	; 0x16e2 <BRAIN_TEST_LOGIC+0x2e6>
		}
	}
	else if (temp == 4)     //XOR
    176c:	84 e0       	ldi	r24, 0x04	; 4
    176e:	68 12       	cpse	r6, r24
    1770:	51 c0       	rjmp	.+162    	; 0x1814 <BRAIN_TEST_LOGIC+0x418>
	{
		
		performLogicGate(4,num1,num2,REAL_RES);
    1772:	9e 01       	movw	r18, r28
    1774:	27 5f       	subi	r18, 0xF7	; 247
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	ae 01       	movw	r20, r28
    177a:	4b 5f       	subi	r20, 0xFB	; 251
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	be 01       	movw	r22, r28
    1780:	6f 5f       	subi	r22, 0xFF	; 255
    1782:	7f 4f       	sbci	r23, 0xFF	; 255
    1784:	0e 94 cc 04 	call	0x998	; 0x998 <performLogicGate>
		tryXOR:
		cond = TRUE;
    1788:	11 e0       	ldi	r17, 0x01	; 1
    178a:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," XOR ");
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	51 e0       	ldi	r21, 0x01	; 1
    1790:	be 01       	movw	r22, r28
    1792:	6b 5f       	subi	r22, 0xFB	; 251
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	0e 94 76 05 	call	0xaec	; 0xaec <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    179e:	be 01       	movw	r22, r28
    17a0:	63 5f       	subi	r22, 0xF3	; 243
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	ce 01       	movw	r24, r28
    17a6:	09 96       	adiw	r24, 0x09	; 9
    17a8:	0e 94 d7 06 	call	0xdae	; 0xdae <getLogicResult>
		if (cond == 1)
    17ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	71 f4       	brne	.+28     	; 0x17ce <BRAIN_TEST_LOGIC+0x3d2>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    17b2:	8c e5       	ldi	r24, 0x5C	; 92
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
			DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    17ba:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <tries>
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	ec 59       	subi	r30, 0x9C	; 156
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	60 81       	ld	r22, Z
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
    17cc:	74 c0       	rjmp	.+232    	; 0x18b6 <BRAIN_TEST_LOGIC+0x4ba>
		}else if (cond==2){
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <BRAIN_TEST_LOGIC+0x3d8>
    17d2:	7f c0       	rjmp	.+254    	; 0x18d2 <BRAIN_TEST_LOGIC+0x4d6>
			return;
		}else{
			count = triesCount(tries);
    17d4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    17d8:	0e 94 b3 09 	call	0x1366	; 0x1366 <triesCount>
			if(count == 0)
    17dc:	81 11       	cpse	r24, r1
    17de:	0e c0       	rjmp	.+28     	; 0x17fc <BRAIN_TEST_LOGIC+0x400>
			{
				LogicWrongAnswer(REAL_RES);
    17e0:	ce 01       	movw	r24, r28
    17e2:	09 96       	adiw	r24, 0x09	; 9
    17e4:	0e 94 d3 05 	call	0xba6	; 0xba6 <LogicWrongAnswer>
    17e8:	9f ef       	ldi	r25, 0xFF	; 255
    17ea:	e3 ed       	ldi	r30, 0xD3	; 211
    17ec:	f0 e3       	ldi	r31, 0x30	; 48
    17ee:	91 50       	subi	r25, 0x01	; 1
    17f0:	e0 40       	sbci	r30, 0x00	; 0
    17f2:	f0 40       	sbci	r31, 0x00	; 0
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <BRAIN_TEST_LOGIC+0x3f2>
    17f6:	00 c0       	rjmp	.+0      	; 0x17f8 <BRAIN_TEST_LOGIC+0x3fc>
    17f8:	00 00       	nop
    17fa:	2b ce       	rjmp	.-938    	; 0x1452 <BRAIN_TEST_LOGIC+0x56>
    17fc:	2f ef       	ldi	r18, 0xFF	; 255
    17fe:	89 e6       	ldi	r24, 0x69	; 105
    1800:	98 e1       	ldi	r25, 0x18	; 24
    1802:	21 50       	subi	r18, 0x01	; 1
    1804:	80 40       	sbci	r24, 0x00	; 0
    1806:	90 40       	sbci	r25, 0x00	; 0
    1808:	e1 f7       	brne	.-8      	; 0x1802 <BRAIN_TEST_LOGIC+0x406>
    180a:	00 c0       	rjmp	.+0      	; 0x180c <BRAIN_TEST_LOGIC+0x410>
    180c:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    180e:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>

			goto tryXOR;
    1812:	bb cf       	rjmp	.-138    	; 0x178a <BRAIN_TEST_LOGIC+0x38e>
		}
	}
	else                    //XNOR
	{
		
		performLogicGate(5,num1,num2,REAL_RES);
    1814:	9e 01       	movw	r18, r28
    1816:	27 5f       	subi	r18, 0xF7	; 247
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	ae 01       	movw	r20, r28
    181c:	4b 5f       	subi	r20, 0xFB	; 251
    181e:	5f 4f       	sbci	r21, 0xFF	; 255
    1820:	be 01       	movw	r22, r28
    1822:	6f 5f       	subi	r22, 0xFF	; 255
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	85 e0       	ldi	r24, 0x05	; 5
    1828:	0e 94 cc 04 	call	0x998	; 0x998 <performLogicGate>
		tryXNOR:
		cond = TRUE;
    182c:	11 e0       	ldi	r17, 0x01	; 1
    182e:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," XNOR ");
    1830:	45 e8       	ldi	r20, 0x85	; 133
    1832:	51 e0       	ldi	r21, 0x01	; 1
    1834:	be 01       	movw	r22, r28
    1836:	6b 5f       	subi	r22, 0xFB	; 251
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	ce 01       	movw	r24, r28
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	0e 94 76 05 	call	0xaec	; 0xaec <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    1842:	be 01       	movw	r22, r28
    1844:	63 5f       	subi	r22, 0xF3	; 243
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	ce 01       	movw	r24, r28
    184a:	09 96       	adiw	r24, 0x09	; 9
    184c:	0e 94 d7 06 	call	0xdae	; 0xdae <getLogicResult>
		
		if (cond == 1)
    1850:	8d 85       	ldd	r24, Y+13	; 0x0d
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	71 f4       	brne	.+28     	; 0x1872 <BRAIN_TEST_LOGIC+0x476>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    1856:	8c e5       	ldi	r24, 0x5C	; 92
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
			DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    185e:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <tries>
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	ec 59       	subi	r30, 0x9C	; 156
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	60 81       	ld	r22, Z
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
    1870:	22 c0       	rjmp	.+68     	; 0x18b6 <BRAIN_TEST_LOGIC+0x4ba>
		}else if (cond==2){
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	71 f1       	breq	.+92     	; 0x18d2 <BRAIN_TEST_LOGIC+0x4d6>
			return;
		}else{
			count = triesCount(tries);
    1876:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    187a:	0e 94 b3 09 	call	0x1366	; 0x1366 <triesCount>
			if(count == 0)
    187e:	81 11       	cpse	r24, r1
    1880:	0e c0       	rjmp	.+28     	; 0x189e <BRAIN_TEST_LOGIC+0x4a2>
			{
				LogicWrongAnswer(REAL_RES);
    1882:	ce 01       	movw	r24, r28
    1884:	09 96       	adiw	r24, 0x09	; 9
    1886:	0e 94 d3 05 	call	0xba6	; 0xba6 <LogicWrongAnswer>
    188a:	ef ef       	ldi	r30, 0xFF	; 255
    188c:	f3 ed       	ldi	r31, 0xD3	; 211
    188e:	20 e3       	ldi	r18, 0x30	; 48
    1890:	e1 50       	subi	r30, 0x01	; 1
    1892:	f0 40       	sbci	r31, 0x00	; 0
    1894:	20 40       	sbci	r18, 0x00	; 0
    1896:	e1 f7       	brne	.-8      	; 0x1890 <BRAIN_TEST_LOGIC+0x494>
    1898:	00 c0       	rjmp	.+0      	; 0x189a <BRAIN_TEST_LOGIC+0x49e>
    189a:	00 00       	nop
    189c:	da cd       	rjmp	.-1100   	; 0x1452 <BRAIN_TEST_LOGIC+0x56>
    189e:	8f ef       	ldi	r24, 0xFF	; 255
    18a0:	99 e6       	ldi	r25, 0x69	; 105
    18a2:	e8 e1       	ldi	r30, 0x18	; 24
    18a4:	81 50       	subi	r24, 0x01	; 1
    18a6:	90 40       	sbci	r25, 0x00	; 0
    18a8:	e0 40       	sbci	r30, 0x00	; 0
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <BRAIN_TEST_LOGIC+0x4a8>
    18ac:	00 c0       	rjmp	.+0      	; 0x18ae <BRAIN_TEST_LOGIC+0x4b2>
    18ae:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    18b0:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>

			goto tryXNOR;
    18b4:	bc cf       	rjmp	.-136    	; 0x182e <BRAIN_TEST_LOGIC+0x432>
    18b6:	ff ef       	ldi	r31, 0xFF	; 255
    18b8:	23 ed       	ldi	r18, 0xD3	; 211
    18ba:	80 e3       	ldi	r24, 0x30	; 48
    18bc:	f1 50       	subi	r31, 0x01	; 1
    18be:	20 40       	sbci	r18, 0x00	; 0
    18c0:	80 40       	sbci	r24, 0x00	; 0
    18c2:	e1 f7       	brne	.-8      	; 0x18bc <BRAIN_TEST_LOGIC+0x4c0>
    18c4:	00 c0       	rjmp	.+0      	; 0x18c6 <BRAIN_TEST_LOGIC+0x4ca>
    18c6:	00 00       	nop
		}
	}
	_delay_ms(1000);
	if(BRAIN_TEST_OPTION)
    18c8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <BRAIN_TEST_OPTION>
    18cc:	88 23       	and	r24, r24
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <BRAIN_TEST_LOGIC+0x4d6>
    18d0:	c0 cd       	rjmp	.-1152   	; 0x1452 <BRAIN_TEST_LOGIC+0x56>
	{
		return;
	}
	goto Brain_Test_rand_logic;
}
    18d2:	2d 96       	adiw	r28, 0x0d	; 13
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	df 90       	pop	r13
    18ec:	cf 90       	pop	r12
    18ee:	bf 90       	pop	r11
    18f0:	af 90       	pop	r10
    18f2:	9f 90       	pop	r9
    18f4:	8f 90       	pop	r8
    18f6:	7f 90       	pop	r7
    18f8:	6f 90       	pop	r6
    18fa:	08 95       	ret

000018fc <BRAIN_TEST_ARTH>:

void BRAIN_TEST_ARTH() {
    18fc:	2f 92       	push	r2
    18fe:	3f 92       	push	r3
    1900:	4f 92       	push	r4
    1902:	5f 92       	push	r5
    1904:	6f 92       	push	r6
    1906:	7f 92       	push	r7
    1908:	8f 92       	push	r8
    190a:	9f 92       	push	r9
    190c:	af 92       	push	r10
    190e:	bf 92       	push	r11
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	29 97       	sbiw	r28, 0x09	; 9
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
	// Clear the LCD screen
	LCD_vidClearScreen4bit();
    1930:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>

	// Get input from the user
	while (i <= 7) {
		SEL = getFromKeypad();
		if (SEL == '=') {
			numRes[i] = '\0'; // Null-terminate the input array
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	2c 01       	movw	r4, r24
	LCD_vidMoveCursor4bit(2, 1);
	LCD_voidDisplayString4bit("= ");

	// Initialize variables for input and calculation
	i = 0;
	counter = 0;
    193a:	71 2c       	mov	r7, r1
    193c:	81 2c       	mov	r8, r1

	// Get input from the user
	while (i <= 7) {
		SEL = getFromKeypad();
		if (SEL == '=') {
			numRes[i] = '\0'; // Null-terminate the input array
    193e:	89 87       	std	Y+9, r24	; 0x09
    1940:	65 2c       	mov	r6, r5
	u16 sum;
	s16 res;

	// Label to allow going back to generate new numbers
	Brain_Test_rand_arth:
	tries = 3; // Number of tries allowed
    1942:	93 e0       	ldi	r25, 0x03	; 3
    1944:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <tries>
	DIO_vidWritePort(sev_seg_port, char_arr[tries]);
    1948:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <char_arr+0x3>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
	num1 = rand() % 101; // Random number generation for operand 1
    1952:	0e 94 37 10 	call	0x206e	; 0x206e <rand>
    1956:	65 e6       	ldi	r22, 0x65	; 101
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__divmodhi4>
    195e:	18 2f       	mov	r17, r24
    1960:	08 2f       	mov	r16, r24
	num2 = rand() % 101; // Random number generation for operand 2
    1962:	0e 94 37 10 	call	0x206e	; 0x206e <rand>
    1966:	65 e6       	ldi	r22, 0x65	; 101
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__divmodhi4>
    196e:	5c 01       	movw	r10, r24
    1970:	98 2e       	mov	r9, r24
	temp = rand() % 4; // Random operation (+, -, *, %)
    1972:	0e 94 37 10 	call	0x206e	; 0x206e <rand>
    1976:	83 70       	andi	r24, 0x03	; 3
    1978:	90 78       	andi	r25, 0x80	; 128
    197a:	99 23       	and	r25, r25
    197c:	24 f4       	brge	.+8      	; 0x1986 <BRAIN_TEST_ARTH+0x8a>
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	8c 6f       	ori	r24, 0xFC	; 252
    1982:	9f 6f       	ori	r25, 0xFF	; 255
    1984:	01 96       	adiw	r24, 0x01	; 1

	// Select the operation based on the generated random number
	if (temp == 0) {
    1986:	81 11       	cpse	r24, r1
    1988:	08 c0       	rjmp	.+16     	; 0x199a <BRAIN_TEST_ARTH+0x9e>
		oprand = " + ";
		res = num1 + num2;
    198a:	bb 24       	eor	r11, r11
    198c:	a1 0e       	add	r10, r17
    198e:	b1 1c       	adc	r11, r1
	num2 = rand() % 101; // Random number generation for operand 2
	temp = rand() % 4; // Random operation (+, -, *, %)

	// Select the operation based on the generated random number
	if (temp == 0) {
		oprand = " + ";
    1990:	ec e8       	ldi	r30, 0x8C	; 140
    1992:	f1 e0       	ldi	r31, 0x01	; 1
    1994:	3e 2e       	mov	r3, r30
    1996:	2f 2e       	mov	r2, r31
    1998:	23 c0       	rjmp	.+70     	; 0x19e0 <BRAIN_TEST_ARTH+0xe4>
		res = num1 + num2;
		} else if (temp == 1) {
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	69 f4       	brne	.+26     	; 0x19b8 <BRAIN_TEST_ARTH+0xbc>
		oprand = " - ";
		if (num1 < num2) {
    199e:	09 15       	cp	r16, r9
    19a0:	10 f4       	brcc	.+4      	; 0x19a6 <BRAIN_TEST_ARTH+0xaa>
			num1 = num1 + num2;
			num2 = num1 - num2;
			num1 = num1 - num2;
    19a2:	0a 2d       	mov	r16, r10
		res = num1 + num2;
		} else if (temp == 1) {
		oprand = " - ";
		if (num1 < num2) {
			num1 = num1 + num2;
			num2 = num1 - num2;
    19a4:	91 2e       	mov	r9, r17
			num1 = num1 - num2;
		}
		res = num1 - num2;
    19a6:	a0 2e       	mov	r10, r16
    19a8:	b1 2c       	mov	r11, r1
    19aa:	a9 18       	sub	r10, r9
    19ac:	b1 08       	sbc	r11, r1
	// Select the operation based on the generated random number
	if (temp == 0) {
		oprand = " + ";
		res = num1 + num2;
		} else if (temp == 1) {
		oprand = " - ";
    19ae:	80 e9       	ldi	r24, 0x90	; 144
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	38 2e       	mov	r3, r24
    19b4:	29 2e       	mov	r2, r25
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <BRAIN_TEST_ARTH+0xe4>
			num1 = num1 + num2;
			num2 = num1 - num2;
			num1 = num1 - num2;
		}
		res = num1 - num2;
		} else if (temp == 2) {
    19b8:	82 30       	cpi	r24, 0x02	; 2
    19ba:	41 f4       	brne	.+16     	; 0x19cc <BRAIN_TEST_ARTH+0xd0>
		oprand = " * ";
		res = num1 * num2;
    19bc:	a1 9e       	mul	r10, r17
    19be:	50 01       	movw	r10, r0
    19c0:	11 24       	eor	r1, r1
			num2 = num1 - num2;
			num1 = num1 - num2;
		}
		res = num1 - num2;
		} else if (temp == 2) {
		oprand = " * ";
    19c2:	e4 e9       	ldi	r30, 0x94	; 148
    19c4:	f1 e0       	ldi	r31, 0x01	; 1
    19c6:	3e 2e       	mov	r3, r30
    19c8:	2f 2e       	mov	r2, r31
    19ca:	0a c0       	rjmp	.+20     	; 0x19e0 <BRAIN_TEST_ARTH+0xe4>
		res = num1 * num2;
		} else {
		num1 = abs(num1);
		num2 = abs(num2);
		oprand = " % ";
		res = num1 % num2;
    19cc:	80 2f       	mov	r24, r16
    19ce:	69 2d       	mov	r22, r9
    19d0:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__udivmodqi4>
    19d4:	a9 2e       	mov	r10, r25
    19d6:	b1 2c       	mov	r11, r1
		oprand = " * ";
		res = num1 * num2;
		} else {
		num1 = abs(num1);
		num2 = abs(num2);
		oprand = " % ";
    19d8:	88 e9       	ldi	r24, 0x98	; 152
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	38 2e       	mov	r3, r24
    19de:	29 2e       	mov	r2, r25
		res = num1 % num2;
	}

	// Display the arithmetic operation on the LCD
	try:
	LCD_vidClearScreen4bit();
    19e0:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	LCD_vidDisplayNumber4bit(num1);
    19e4:	20 2f       	mov	r18, r16
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_vidDisplayNumber4bit>
	LCD_voidDisplayString4bit(oprand);
    19f8:	83 2d       	mov	r24, r3
    19fa:	92 2d       	mov	r25, r2
    19fc:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
	LCD_vidDisplayNumber4bit(num2);
    1a00:	29 2d       	mov	r18, r9
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_vidDisplayNumber4bit>
	LCD_vidMoveCursor4bit(2, 1);
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("= ");
    1a1c:	8c e9       	ldi	r24, 0x9C	; 156
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
    1a24:	fe 01       	movw	r30, r28
    1a26:	31 96       	adiw	r30, 0x01	; 1
    1a28:	6f 01       	movw	r12, r30

	// Initialize variables for input and calculation
	i = 0;
	counter = 0;
    1a2a:	e7 2c       	mov	r14, r7
    1a2c:	f8 2c       	mov	r15, r8
	sum = 0;

	// Get input from the user
	while (i <= 7) {
		SEL = getFromKeypad();
    1a2e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
    1a32:	18 2f       	mov	r17, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
		if (SEL == '=') {
    1a36:	8d 33       	cpi	r24, 0x3D	; 61
    1a38:	91 05       	cpc	r25, r1
    1a3a:	39 f4       	brne	.+14     	; 0x1a4a <BRAIN_TEST_ARTH+0x14e>
			numRes[i] = '\0'; // Null-terminate the input array
    1a3c:	f2 01       	movw	r30, r4
    1a3e:	ee 0d       	add	r30, r14
    1a40:	f1 1d       	adc	r31, r1
    1a42:	10 82       	st	Z, r1
			LCD_vidClearScreen4bit();
    1a44:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
			break;
    1a48:	1e c0       	rjmp	.+60     	; 0x1a86 <BRAIN_TEST_ARTH+0x18a>
		} else if (SEL == 'C') {
    1a4a:	83 34       	cpi	r24, 0x43	; 67
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	79 f4       	brne	.+30     	; 0x1a6e <BRAIN_TEST_ARTH+0x172>
			BRAIN_TEST_RAND_OPTION = 1; // Return to menu if 'C' is pressed
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
			LCD_vidClearScreen4bit();
    1a56:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
    1a5a:	ff ef       	ldi	r31, 0xFF	; 255
    1a5c:	29 e6       	ldi	r18, 0x69	; 105
    1a5e:	88 e1       	ldi	r24, 0x18	; 24
    1a60:	f1 50       	subi	r31, 0x01	; 1
    1a62:	20 40       	sbci	r18, 0x00	; 0
    1a64:	80 40       	sbci	r24, 0x00	; 0
    1a66:	e1 f7       	brne	.-8      	; 0x1a60 <BRAIN_TEST_ARTH+0x164>
    1a68:	00 c0       	rjmp	.+0      	; 0x1a6a <BRAIN_TEST_ARTH+0x16e>
    1a6a:	00 00       	nop
    1a6c:	4b c0       	rjmp	.+150    	; 0x1b04 <BRAIN_TEST_ARTH+0x208>
			_delay_ms(500);
			return;
			} else {
			LCD_vidDisplayChar4bit(SEL);
    1a6e:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_vidDisplayChar4bit>
			numRes[i] = SEL;
    1a72:	f6 01       	movw	r30, r12
    1a74:	11 93       	st	Z+, r17
    1a76:	6f 01       	movw	r12, r30
    1a78:	ff ef       	ldi	r31, 0xFF	; 255
    1a7a:	ef 1a       	sub	r14, r31
    1a7c:	ff 0a       	sbc	r15, r31
	i = 0;
	counter = 0;
	sum = 0;

	// Get input from the user
	while (i <= 7) {
    1a7e:	28 e0       	ldi	r18, 0x08	; 8
    1a80:	e2 16       	cp	r14, r18
    1a82:	f1 04       	cpc	r15, r1
    1a84:	a1 f6       	brne	.-88     	; 0x1a2e <BRAIN_TEST_ARTH+0x132>
		}
		i++;
	}

	// Convert input to integer for comparison
	sum = arrToInt(numRes, counter);
    1a86:	6e 2d       	mov	r22, r14
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	96 2d       	mov	r25, r6
    1a8c:	0e 94 1a 07 	call	0xe34	; 0xe34 <arrToInt>

	// Check if the sum matches the result
	if (sum == res) {
    1a90:	a6 16       	cp	r10, r22
    1a92:	b7 06       	cpc	r11, r23
    1a94:	a9 f4       	brne	.+42     	; 0x1ac0 <BRAIN_TEST_ARTH+0x1c4>
		LCD_vidClearScreen4bit();
    1a96:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
		LCD_voidDisplayString4bit("Correct Answer:)");
    1a9a:	8f e9       	ldi	r24, 0x9F	; 159
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	93 ed       	ldi	r25, 0xD3	; 211
    1aa6:	e0 e3       	ldi	r30, 0x30	; 48
    1aa8:	81 50       	subi	r24, 0x01	; 1
    1aaa:	90 40       	sbci	r25, 0x00	; 0
    1aac:	e0 40       	sbci	r30, 0x00	; 0
    1aae:	e1 f7       	brne	.-8      	; 0x1aa8 <BRAIN_TEST_ARTH+0x1ac>
    1ab0:	00 c0       	rjmp	.+0      	; 0x1ab2 <BRAIN_TEST_ARTH+0x1b6>
    1ab2:	00 00       	nop
		LCD_vidClearScreen4bit();
		goto try; // Try again if the answer is incorrect
	}

	_delay_ms(1000);
	if (BRAIN_TEST_OPTION) {
    1ab4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <BRAIN_TEST_OPTION>
    1ab8:	88 23       	and	r24, r24
    1aba:	09 f4       	brne	.+2      	; 0x1abe <BRAIN_TEST_ARTH+0x1c2>
    1abc:	42 cf       	rjmp	.-380    	; 0x1942 <BRAIN_TEST_ARTH+0x46>
    1abe:	22 c0       	rjmp	.+68     	; 0x1b04 <BRAIN_TEST_ARTH+0x208>
	// Check if the sum matches the result
	if (sum == res) {
		LCD_vidClearScreen4bit();
		LCD_voidDisplayString4bit("Correct Answer:)");
		} else {
		count = triesCount(tries);
    1ac0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    1ac4:	0e 94 b3 09 	call	0x1366	; 0x1366 <triesCount>
		if (count == 0) {
    1ac8:	81 11       	cpse	r24, r1
    1aca:	10 c0       	rjmp	.+32     	; 0x1aec <BRAIN_TEST_ARTH+0x1f0>
			ArthWrongAnswer(res);
    1acc:	b5 01       	movw	r22, r10
    1ace:	bb 0c       	add	r11, r11
    1ad0:	88 0b       	sbc	r24, r24
    1ad2:	99 0b       	sbc	r25, r25
    1ad4:	0e 94 95 05 	call	0xb2a	; 0xb2a <ArthWrongAnswer>
    1ad8:	ff ef       	ldi	r31, 0xFF	; 255
    1ada:	23 ed       	ldi	r18, 0xD3	; 211
    1adc:	80 e3       	ldi	r24, 0x30	; 48
    1ade:	f1 50       	subi	r31, 0x01	; 1
    1ae0:	20 40       	sbci	r18, 0x00	; 0
    1ae2:	80 40       	sbci	r24, 0x00	; 0
    1ae4:	e1 f7       	brne	.-8      	; 0x1ade <BRAIN_TEST_ARTH+0x1e2>
    1ae6:	00 c0       	rjmp	.+0      	; 0x1ae8 <BRAIN_TEST_ARTH+0x1ec>
    1ae8:	00 00       	nop
    1aea:	2b cf       	rjmp	.-426    	; 0x1942 <BRAIN_TEST_ARTH+0x46>
    1aec:	9f ef       	ldi	r25, 0xFF	; 255
    1aee:	e9 e6       	ldi	r30, 0x69	; 105
    1af0:	f8 e1       	ldi	r31, 0x18	; 24
    1af2:	91 50       	subi	r25, 0x01	; 1
    1af4:	e0 40       	sbci	r30, 0x00	; 0
    1af6:	f0 40       	sbci	r31, 0x00	; 0
    1af8:	e1 f7       	brne	.-8      	; 0x1af2 <BRAIN_TEST_ARTH+0x1f6>
    1afa:	00 c0       	rjmp	.+0      	; 0x1afc <BRAIN_TEST_ARTH+0x200>
    1afc:	00 00       	nop
			_delay_ms(1000);
			goto Brain_Test_rand_arth;
		}
		_delay_ms(500);
		LCD_vidClearScreen4bit();
    1afe:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
		goto try; // Try again if the answer is incorrect
    1b02:	6e cf       	rjmp	.-292    	; 0x19e0 <BRAIN_TEST_ARTH+0xe4>
	_delay_ms(1000);
	if (BRAIN_TEST_OPTION) {
		return; // Return to menu if option is chosen
	}
	goto Brain_Test_rand_arth;
}
    1b04:	29 96       	adiw	r28, 0x09	; 9
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	df 90       	pop	r13
    1b1e:	cf 90       	pop	r12
    1b20:	bf 90       	pop	r11
    1b22:	af 90       	pop	r10
    1b24:	9f 90       	pop	r9
    1b26:	8f 90       	pop	r8
    1b28:	7f 90       	pop	r7
    1b2a:	6f 90       	pop	r6
    1b2c:	5f 90       	pop	r5
    1b2e:	4f 90       	pop	r4
    1b30:	3f 90       	pop	r3
    1b32:	2f 90       	pop	r2
    1b34:	08 95       	ret

00001b36 <BRAIN_TEST_SPECIFIC>:
}

void BRAIN_TEST_SPECIFIC(){
	u8 eq_mode;
	getMode :
	LCD_vidClearScreen4bit();
    1b36:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	LCD_vidMoveCursor4bit(1,1);
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit(" Choose Option : ");
    1b42:	80 eb       	ldi	r24, 0xB0	; 176
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit(2,1);
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	82 e0       	ldi	r24, 0x02	; 2
    1b4e:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("1_ Logic 2_ Arth");
    1b52:	82 ec       	ldi	r24, 0xC2	; 194
    1b54:	91 e0       	ldi	r25, 0x01	; 1
    1b56:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
	eq_mode = getFromKeypad();
    1b5a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
	switch (eq_mode){
    1b5e:	81 33       	cpi	r24, 0x31	; 49
    1b60:	19 f0       	breq	.+6      	; 0x1b68 <BRAIN_TEST_SPECIFIC+0x32>
    1b62:	82 33       	cpi	r24, 0x32	; 50
    1b64:	21 f0       	breq	.+8      	; 0x1b6e <BRAIN_TEST_SPECIFIC+0x38>
    1b66:	06 c0       	rjmp	.+12     	; 0x1b74 <BRAIN_TEST_SPECIFIC+0x3e>
		case '1' :
			BRAIN_TEST_LOGIC();
    1b68:	0e 94 fe 09 	call	0x13fc	; 0x13fc <BRAIN_TEST_LOGIC>
			break;
    1b6c:	08 95       	ret
		case '2' :
			BRAIN_TEST_ARTH();
    1b6e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <BRAIN_TEST_ARTH>
			break;
    1b72:	08 95       	ret
		default:
			ERROR_CHOICE();
    1b74:	0e 94 40 09 	call	0x1280	; 0x1280 <ERROR_CHOICE>
			goto getMode;
    1b78:	de cf       	rjmp	.-68     	; 0x1b36 <BRAIN_TEST_SPECIFIC>

00001b7a <BRAIN_TEST_RANDOM>:
	}
}

	
void BRAIN_TEST_RANDOM()
{
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
	u8 eq_mode;
	
	brain_test_rand:
	eq_mode = rand()%2;
    1b7e:	0e 94 37 10 	call	0x206e	; 0x206e <rand>
    1b82:	ec 01       	movw	r28, r24
	LCD_vidClearScreen4bit();
    1b84:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	switch (eq_mode){
    1b88:	ce 01       	movw	r24, r28
    1b8a:	81 70       	andi	r24, 0x01	; 1
    1b8c:	90 78       	andi	r25, 0x80	; 128
    1b8e:	99 23       	and	r25, r25
    1b90:	24 f4       	brge	.+8      	; 0x1b9a <BRAIN_TEST_RANDOM+0x20>
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	8e 6f       	ori	r24, 0xFE	; 254
    1b96:	9f 6f       	ori	r25, 0xFF	; 255
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	99 27       	eor	r25, r25
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	19 f0       	breq	.+6      	; 0x1ba6 <BRAIN_TEST_RANDOM+0x2c>
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	51 f0       	breq	.+20     	; 0x1bb8 <BRAIN_TEST_RANDOM+0x3e>
    1ba4:	11 c0       	rjmp	.+34     	; 0x1bc8 <BRAIN_TEST_RANDOM+0x4e>
		case 0 :
			BRAIN_TEST_RAND_OPTION=0;
    1ba6:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__data_end>
			BRAIN_TEST_ARTH();
    1baa:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <BRAIN_TEST_ARTH>
			if(!BRAIN_TEST_RAND_OPTION){
    1bae:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
    1bb2:	88 23       	and	r24, r24
    1bb4:	21 f3       	breq	.-56     	; 0x1b7e <BRAIN_TEST_RANDOM+0x4>
    1bb6:	08 c0       	rjmp	.+16     	; 0x1bc8 <BRAIN_TEST_RANDOM+0x4e>
				goto brain_test_rand;
			}
			break;
		case 1 :
			BRAIN_TEST_RAND_OPTION=0;
    1bb8:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__data_end>
			BRAIN_TEST_LOGIC();
    1bbc:	0e 94 fe 09 	call	0x13fc	; 0x13fc <BRAIN_TEST_LOGIC>
			if(!BRAIN_TEST_RAND_OPTION){
    1bc0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
    1bc4:	88 23       	and	r24, r24
    1bc6:	d9 f2       	breq	.-74     	; 0x1b7e <BRAIN_TEST_RANDOM+0x4>
			break;
		default:
			break;
	}
	
}
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <BRAIN_TEST>:

// Brain Test Functions

void BRAIN_TEST(){
	
	tries = 3;
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <tries>
	DIO_vidWritePort(sev_seg_port,char_arr[tries]);
    1bd4:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <char_arr+0x3>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_vidWritePort>
	Brain_Test:
	LCD_vidClearScreen4bit();
    1bde:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	LCD_voidDisplayString4bit("Choose a mode");
    1be2:	83 ed       	ldi	r24, 0xD3	; 211
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit(2,1);
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("1-rand 2-spec");
    1bf2:	81 ee       	ldi	r24, 0xE1	; 225
    1bf4:	91 e0       	ldi	r25, 0x01	; 1
    1bf6:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
	u8 mode1 =getFromKeypad();
    1bfa:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
	switch(mode1) {
    1bfe:	82 33       	cpi	r24, 0x32	; 50
    1c00:	51 f0       	breq	.+20     	; 0x1c16 <BRAIN_TEST+0x48>
    1c02:	83 34       	cpi	r24, 0x43	; 67
    1c04:	81 f0       	breq	.+32     	; 0x1c26 <BRAIN_TEST+0x58>
    1c06:	81 33       	cpi	r24, 0x31	; 49
    1c08:	59 f4       	brne	.+22     	; 0x1c20 <BRAIN_TEST+0x52>
		case '1' :
			BRAIN_TEST_OPTION=1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <BRAIN_TEST_OPTION>
			BRAIN_TEST_RANDOM();
    1c10:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <BRAIN_TEST_RANDOM>
			break;
    1c14:	08 95       	ret
		case '2' :
			BRAIN_TEST_OPTION=0;
    1c16:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <BRAIN_TEST_OPTION>
			BRAIN_TEST_SPECIFIC();
    1c1a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <BRAIN_TEST_SPECIFIC>
			break;
    1c1e:	08 95       	ret
		case 'C' :
			return;
			break;
		default :
			ERROR_CHOICE();
    1c20:	0e 94 40 09 	call	0x1280	; 0x1280 <ERROR_CHOICE>
			goto Brain_Test;
    1c24:	dc cf       	rjmp	.-72     	; 0x1bde <BRAIN_TEST+0x10>
    1c26:	08 95       	ret

00001c28 <main>:


int main(void)
{
	// Initialization //
	DIO_vidSetPinMode(rw_port,rw_pin,OUTPUT);
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
	DIO_vidWritePin(rw_port,rw_pin,LOW);
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	Init();
    1c3c:	0e 94 8c 09 	call	0x1318	; 0x1318 <Init>
	LCD_voidDisplayString4bit("   Welcome :)   ");
    1c40:	8f ee       	ldi	r24, 0xEF	; 239
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
    1c48:	2f ef       	ldi	r18, 0xFF	; 255
    1c4a:	89 e6       	ldi	r24, 0x69	; 105
    1c4c:	98 e1       	ldi	r25, 0x18	; 24
    1c4e:	21 50       	subi	r18, 0x01	; 1
    1c50:	80 40       	sbci	r24, 0x00	; 0
    1c52:	90 40       	sbci	r25, 0x00	; 0
    1c54:	e1 f7       	brne	.-8      	; 0x1c4e <main+0x26>
    1c56:	00 c0       	rjmp	.+0      	; 0x1c58 <main+0x30>
    1c58:	00 00       	nop
	_delay_ms(500);
	LCD_vidClearScreen4bit();
    1c5a:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_vidClearScreen4bit>
	LCD_voidDisplayString4bit("This Project is ");
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit(2,1);
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("Made By ASMAK :)");
    1c6e:	81 e1       	ldi	r24, 0x11	; 17
    1c70:	92 e0       	ldi	r25, 0x02	; 2
    1c72:	0e 94 a0 03 	call	0x740	; 0x740 <LCD_voidDisplayString4bit>
    1c76:	2f ef       	ldi	r18, 0xFF	; 255
    1c78:	83 ed       	ldi	r24, 0xD3	; 211
    1c7a:	90 e3       	ldi	r25, 0x30	; 48
    1c7c:	21 50       	subi	r18, 0x01	; 1
    1c7e:	80 40       	sbci	r24, 0x00	; 0
    1c80:	90 40       	sbci	r25, 0x00	; 0
    1c82:	e1 f7       	brne	.-8      	; 0x1c7c <main+0x54>
    1c84:	00 c0       	rjmp	.+0      	; 0x1c86 <main+0x5e>
    1c86:	00 00       	nop
	_delay_ms(1000);
	entry:ENTRY_MODE();
    1c88:	0e 94 74 09 	call	0x12e8	; 0x12e8 <ENTRY_MODE>
	u8 mode =getFromKeypad();
    1c8c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <getFromKeypad>
	
	switch(mode) {
    1c90:	82 33       	cpi	r24, 0x32	; 50
    1c92:	39 f0       	breq	.+14     	; 0x1ca2 <main+0x7a>
    1c94:	83 33       	cpi	r24, 0x33	; 51
    1c96:	41 f0       	breq	.+16     	; 0x1ca8 <main+0x80>
    1c98:	81 33       	cpi	r24, 0x31	; 49
    1c9a:	49 f4       	brne	.+18     	; 0x1cae <main+0x86>
		case '1' :
			BRAIN_TEST();
    1c9c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <BRAIN_TEST>
			break;
    1ca0:	f3 cf       	rjmp	.-26     	; 0x1c88 <main+0x60>
		case '2' :
			CALCULATOR();
    1ca2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <CALCULATOR>
			break;
    1ca6:	f0 cf       	rjmp	.-32     	; 0x1c88 <main+0x60>
		case '3' :
			CONVERTER();
    1ca8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <CONVERTER>
			break;
    1cac:	ed cf       	rjmp	.-38     	; 0x1c88 <main+0x60>
		default :
			ERROR_CHOICE();
    1cae:	0e 94 40 09 	call	0x1280	; 0x1280 <ERROR_CHOICE>
			goto entry;
    1cb2:	ea cf       	rjmp	.-44     	; 0x1c88 <main+0x60>

00001cb4 <__udivmodqi4>:
    1cb4:	99 1b       	sub	r25, r25
    1cb6:	79 e0       	ldi	r23, 0x09	; 9
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <__udivmodqi4_ep>

00001cba <__udivmodqi4_loop>:
    1cba:	99 1f       	adc	r25, r25
    1cbc:	96 17       	cp	r25, r22
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <__udivmodqi4_ep>
    1cc0:	96 1b       	sub	r25, r22

00001cc2 <__udivmodqi4_ep>:
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	7a 95       	dec	r23
    1cc6:	c9 f7       	brne	.-14     	; 0x1cba <__udivmodqi4_loop>
    1cc8:	80 95       	com	r24
    1cca:	08 95       	ret

00001ccc <__divmodhi4>:
    1ccc:	97 fb       	bst	r25, 7
    1cce:	07 2e       	mov	r0, r23
    1cd0:	16 f4       	brtc	.+4      	; 0x1cd6 <__divmodhi4+0xa>
    1cd2:	00 94       	com	r0
    1cd4:	07 d0       	rcall	.+14     	; 0x1ce4 <__divmodhi4_neg1>
    1cd6:	77 fd       	sbrc	r23, 7
    1cd8:	09 d0       	rcall	.+18     	; 0x1cec <__divmodhi4_neg2>
    1cda:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__udivmodhi4>
    1cde:	07 fc       	sbrc	r0, 7
    1ce0:	05 d0       	rcall	.+10     	; 0x1cec <__divmodhi4_neg2>
    1ce2:	3e f4       	brtc	.+14     	; 0x1cf2 <__divmodhi4_exit>

00001ce4 <__divmodhi4_neg1>:
    1ce4:	90 95       	com	r25
    1ce6:	81 95       	neg	r24
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	08 95       	ret

00001cec <__divmodhi4_neg2>:
    1cec:	70 95       	com	r23
    1cee:	61 95       	neg	r22
    1cf0:	7f 4f       	sbci	r23, 0xFF	; 255

00001cf2 <__divmodhi4_exit>:
    1cf2:	08 95       	ret

00001cf4 <__muldi3>:
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	1f 93       	push	r17
    1cfa:	0f 93       	push	r16
    1cfc:	9a 9d       	mul	r25, r10
    1cfe:	f0 2d       	mov	r31, r0
    1d00:	21 9f       	mul	r18, r17
    1d02:	f0 0d       	add	r31, r0
    1d04:	8b 9d       	mul	r24, r11
    1d06:	f0 0d       	add	r31, r0
    1d08:	8a 9d       	mul	r24, r10
    1d0a:	e0 2d       	mov	r30, r0
    1d0c:	f1 0d       	add	r31, r1
    1d0e:	03 9f       	mul	r16, r19
    1d10:	f0 0d       	add	r31, r0
    1d12:	02 9f       	mul	r16, r18
    1d14:	e0 0d       	add	r30, r0
    1d16:	f1 1d       	adc	r31, r1
    1d18:	4e 9d       	mul	r20, r14
    1d1a:	e0 0d       	add	r30, r0
    1d1c:	f1 1d       	adc	r31, r1
    1d1e:	5e 9d       	mul	r21, r14
    1d20:	f0 0d       	add	r31, r0
    1d22:	4f 9d       	mul	r20, r15
    1d24:	f0 0d       	add	r31, r0
    1d26:	7f 93       	push	r23
    1d28:	6f 93       	push	r22
    1d2a:	bf 92       	push	r11
    1d2c:	af 92       	push	r10
    1d2e:	5f 93       	push	r21
    1d30:	4f 93       	push	r20
    1d32:	d5 01       	movw	r26, r10
    1d34:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__umulhisi3>
    1d38:	8b 01       	movw	r16, r22
    1d3a:	ac 01       	movw	r20, r24
    1d3c:	d7 01       	movw	r26, r14
    1d3e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__umulhisi3>
    1d42:	eb 01       	movw	r28, r22
    1d44:	e8 0f       	add	r30, r24
    1d46:	f9 1f       	adc	r31, r25
    1d48:	d6 01       	movw	r26, r12
    1d4a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__muldi3_6>
    1d4e:	2f 91       	pop	r18
    1d50:	3f 91       	pop	r19
    1d52:	d6 01       	movw	r26, r12
    1d54:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__umulhisi3>
    1d58:	c6 0f       	add	r28, r22
    1d5a:	d7 1f       	adc	r29, r23
    1d5c:	e8 1f       	adc	r30, r24
    1d5e:	f9 1f       	adc	r31, r25
    1d60:	af 91       	pop	r26
    1d62:	bf 91       	pop	r27
    1d64:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__muldi3_6>
    1d68:	2f 91       	pop	r18
    1d6a:	3f 91       	pop	r19
    1d6c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__umulhisi3>
    1d70:	c6 0f       	add	r28, r22
    1d72:	d7 1f       	adc	r29, r23
    1d74:	e8 1f       	adc	r30, r24
    1d76:	f9 1f       	adc	r31, r25
    1d78:	d6 01       	movw	r26, r12
    1d7a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__umulhisi3>
    1d7e:	e6 0f       	add	r30, r22
    1d80:	f7 1f       	adc	r31, r23
    1d82:	98 01       	movw	r18, r16
    1d84:	be 01       	movw	r22, r28
    1d86:	cf 01       	movw	r24, r30
    1d88:	11 24       	eor	r1, r1
    1d8a:	0f 91       	pop	r16
    1d8c:	1f 91       	pop	r17
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <__muldi3_6>:
    1d94:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__umulhisi3>
    1d98:	46 0f       	add	r20, r22
    1d9a:	57 1f       	adc	r21, r23
    1d9c:	c8 1f       	adc	r28, r24
    1d9e:	d9 1f       	adc	r29, r25
    1da0:	08 f4       	brcc	.+2      	; 0x1da4 <__muldi3_6+0x10>
    1da2:	31 96       	adiw	r30, 0x01	; 1
    1da4:	08 95       	ret

00001da6 <__moddi3>:
    1da6:	68 94       	set
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <__divdi3_moddi3>

00001daa <__divdi3>:
    1daa:	e8 94       	clt

00001dac <__divdi3_moddi3>:
    1dac:	f9 2f       	mov	r31, r25
    1dae:	f1 2b       	or	r31, r17
    1db0:	12 f0       	brmi	.+4      	; 0x1db6 <__divdi3_moddi3+0xa>
    1db2:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__udivdi3_umoddi3>
    1db6:	a0 e0       	ldi	r26, 0x00	; 0
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e1 ee       	ldi	r30, 0xE1	; 225
    1dbc:	fe e0       	ldi	r31, 0x0E	; 14
    1dbe:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__prologue_saves__+0xc>
    1dc2:	09 2e       	mov	r0, r25
    1dc4:	05 94       	asr	r0
    1dc6:	22 f4       	brpl	.+8      	; 0x1dd0 <__divdi3_moddi3+0x24>
    1dc8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__negdi2>
    1dcc:	11 23       	and	r17, r17
    1dce:	92 f4       	brpl	.+36     	; 0x1df4 <__divdi3_moddi3+0x48>
    1dd0:	f0 e8       	ldi	r31, 0x80	; 128
    1dd2:	0f 26       	eor	r0, r31
    1dd4:	ff ef       	ldi	r31, 0xFF	; 255
    1dd6:	e0 94       	com	r14
    1dd8:	f0 94       	com	r15
    1dda:	00 95       	com	r16
    1ddc:	10 95       	com	r17
    1dde:	b0 94       	com	r11
    1de0:	c0 94       	com	r12
    1de2:	d0 94       	com	r13
    1de4:	a1 94       	neg	r10
    1de6:	bf 0a       	sbc	r11, r31
    1de8:	cf 0a       	sbc	r12, r31
    1dea:	df 0a       	sbc	r13, r31
    1dec:	ef 0a       	sbc	r14, r31
    1dee:	ff 0a       	sbc	r15, r31
    1df0:	0f 0b       	sbc	r16, r31
    1df2:	1f 0b       	sbc	r17, r31
    1df4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__udivmod64>
    1df8:	07 fc       	sbrc	r0, 7
    1dfa:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__negdi2>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	ec e0       	ldi	r30, 0x0C	; 12
    1e04:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__epilogue_restores__+0xc>

00001e08 <__umoddi3>:
    1e08:	68 94       	set
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <__udivdi3_umoddi3>

00001e0c <__udivdi3>:
    1e0c:	e8 94       	clt

00001e0e <__udivdi3_umoddi3>:
    1e0e:	8f 92       	push	r8
    1e10:	9f 92       	push	r9
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__udivmod64>
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	9f 90       	pop	r9
    1e20:	8f 90       	pop	r8
    1e22:	08 95       	ret

00001e24 <__udivmod64>:
    1e24:	88 24       	eor	r8, r8
    1e26:	99 24       	eor	r9, r9
    1e28:	f4 01       	movw	r30, r8
    1e2a:	e4 01       	movw	r28, r8
    1e2c:	b0 e4       	ldi	r27, 0x40	; 64
    1e2e:	9f 93       	push	r25
    1e30:	aa 27       	eor	r26, r26
    1e32:	9a 15       	cp	r25, r10
    1e34:	8b 04       	cpc	r8, r11
    1e36:	9c 04       	cpc	r9, r12
    1e38:	ed 05       	cpc	r30, r13
    1e3a:	fe 05       	cpc	r31, r14
    1e3c:	cf 05       	cpc	r28, r15
    1e3e:	d0 07       	cpc	r29, r16
    1e40:	a1 07       	cpc	r26, r17
    1e42:	98 f4       	brcc	.+38     	; 0x1e6a <__udivmod64+0x46>
    1e44:	ad 2f       	mov	r26, r29
    1e46:	dc 2f       	mov	r29, r28
    1e48:	cf 2f       	mov	r28, r31
    1e4a:	fe 2f       	mov	r31, r30
    1e4c:	e9 2d       	mov	r30, r9
    1e4e:	98 2c       	mov	r9, r8
    1e50:	89 2e       	mov	r8, r25
    1e52:	98 2f       	mov	r25, r24
    1e54:	87 2f       	mov	r24, r23
    1e56:	76 2f       	mov	r23, r22
    1e58:	65 2f       	mov	r22, r21
    1e5a:	54 2f       	mov	r21, r20
    1e5c:	43 2f       	mov	r20, r19
    1e5e:	32 2f       	mov	r19, r18
    1e60:	22 27       	eor	r18, r18
    1e62:	b8 50       	subi	r27, 0x08	; 8
    1e64:	31 f7       	brne	.-52     	; 0x1e32 <__udivmod64+0xe>
    1e66:	bf 91       	pop	r27
    1e68:	27 c0       	rjmp	.+78     	; 0x1eb8 <__udivmod64+0x94>
    1e6a:	1b 2e       	mov	r1, r27
    1e6c:	bf 91       	pop	r27
    1e6e:	bb 27       	eor	r27, r27
    1e70:	22 0f       	add	r18, r18
    1e72:	33 1f       	adc	r19, r19
    1e74:	44 1f       	adc	r20, r20
    1e76:	55 1f       	adc	r21, r21
    1e78:	66 1f       	adc	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	88 1c       	adc	r8, r8
    1e82:	99 1c       	adc	r9, r9
    1e84:	ee 1f       	adc	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	cc 1f       	adc	r28, r28
    1e8a:	dd 1f       	adc	r29, r29
    1e8c:	aa 1f       	adc	r26, r26
    1e8e:	bb 1f       	adc	r27, r27
    1e90:	8a 14       	cp	r8, r10
    1e92:	9b 04       	cpc	r9, r11
    1e94:	ec 05       	cpc	r30, r12
    1e96:	fd 05       	cpc	r31, r13
    1e98:	ce 05       	cpc	r28, r14
    1e9a:	df 05       	cpc	r29, r15
    1e9c:	a0 07       	cpc	r26, r16
    1e9e:	b1 07       	cpc	r27, r17
    1ea0:	48 f0       	brcs	.+18     	; 0x1eb4 <__udivmod64+0x90>
    1ea2:	8a 18       	sub	r8, r10
    1ea4:	9b 08       	sbc	r9, r11
    1ea6:	ec 09       	sbc	r30, r12
    1ea8:	fd 09       	sbc	r31, r13
    1eaa:	ce 09       	sbc	r28, r14
    1eac:	df 09       	sbc	r29, r15
    1eae:	a0 0b       	sbc	r26, r16
    1eb0:	b1 0b       	sbc	r27, r17
    1eb2:	21 60       	ori	r18, 0x01	; 1
    1eb4:	1a 94       	dec	r1
    1eb6:	e1 f6       	brne	.-72     	; 0x1e70 <__udivmod64+0x4c>
    1eb8:	2e f4       	brtc	.+10     	; 0x1ec4 <__udivmod64+0xa0>
    1eba:	94 01       	movw	r18, r8
    1ebc:	af 01       	movw	r20, r30
    1ebe:	be 01       	movw	r22, r28
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	00 0c       	add	r0, r0
    1ec4:	08 95       	ret

00001ec6 <__negdi2>:
    1ec6:	60 95       	com	r22
    1ec8:	70 95       	com	r23
    1eca:	80 95       	com	r24
    1ecc:	90 95       	com	r25
    1ece:	30 95       	com	r19
    1ed0:	40 95       	com	r20
    1ed2:	50 95       	com	r21
    1ed4:	21 95       	neg	r18
    1ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed8:	4f 4f       	sbci	r20, 0xFF	; 255
    1eda:	5f 4f       	sbci	r21, 0xFF	; 255
    1edc:	6f 4f       	sbci	r22, 0xFF	; 255
    1ede:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	08 95       	ret

00001ee6 <__prologue_saves__>:
    1ee6:	2f 92       	push	r2
    1ee8:	3f 92       	push	r3
    1eea:	4f 92       	push	r4
    1eec:	5f 92       	push	r5
    1eee:	6f 92       	push	r6
    1ef0:	7f 92       	push	r7
    1ef2:	8f 92       	push	r8
    1ef4:	9f 92       	push	r9
    1ef6:	af 92       	push	r10
    1ef8:	bf 92       	push	r11
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	ca 1b       	sub	r28, r26
    1f10:	db 0b       	sbc	r29, r27
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	09 94       	ijmp

00001f1e <__epilogue_restores__>:
    1f1e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f20:	39 88       	ldd	r3, Y+17	; 0x11
    1f22:	48 88       	ldd	r4, Y+16	; 0x10
    1f24:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f26:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f28:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f30:	b9 84       	ldd	r11, Y+9	; 0x09
    1f32:	c8 84       	ldd	r12, Y+8	; 0x08
    1f34:	df 80       	ldd	r13, Y+7	; 0x07
    1f36:	ee 80       	ldd	r14, Y+6	; 0x06
    1f38:	fd 80       	ldd	r15, Y+5	; 0x05
    1f3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f3c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f40:	b9 81       	ldd	r27, Y+1	; 0x01
    1f42:	ce 0f       	add	r28, r30
    1f44:	d1 1d       	adc	r29, r1
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	ed 01       	movw	r28, r26
    1f52:	08 95       	ret

00001f54 <__adddi3>:
    1f54:	2a 0d       	add	r18, r10
    1f56:	3b 1d       	adc	r19, r11
    1f58:	4c 1d       	adc	r20, r12
    1f5a:	5d 1d       	adc	r21, r13
    1f5c:	6e 1d       	adc	r22, r14
    1f5e:	7f 1d       	adc	r23, r15
    1f60:	80 1f       	adc	r24, r16
    1f62:	91 1f       	adc	r25, r17
    1f64:	08 95       	ret

00001f66 <__subdi3>:
    1f66:	2a 19       	sub	r18, r10
    1f68:	3b 09       	sbc	r19, r11
    1f6a:	4c 09       	sbc	r20, r12
    1f6c:	5d 09       	sbc	r21, r13
    1f6e:	6e 09       	sbc	r22, r14
    1f70:	7f 09       	sbc	r23, r15
    1f72:	80 0b       	sbc	r24, r16
    1f74:	91 0b       	sbc	r25, r17
    1f76:	08 95       	ret

00001f78 <__cmpdi2_s8>:
    1f78:	00 24       	eor	r0, r0
    1f7a:	a7 fd       	sbrc	r26, 7
    1f7c:	00 94       	com	r0
    1f7e:	2a 17       	cp	r18, r26
    1f80:	30 05       	cpc	r19, r0
    1f82:	40 05       	cpc	r20, r0
    1f84:	50 05       	cpc	r21, r0
    1f86:	60 05       	cpc	r22, r0
    1f88:	70 05       	cpc	r23, r0
    1f8a:	80 05       	cpc	r24, r0
    1f8c:	90 05       	cpc	r25, r0
    1f8e:	08 95       	ret

00001f90 <__udivmodhi4>:
    1f90:	aa 1b       	sub	r26, r26
    1f92:	bb 1b       	sub	r27, r27
    1f94:	51 e1       	ldi	r21, 0x11	; 17
    1f96:	07 c0       	rjmp	.+14     	; 0x1fa6 <__udivmodhi4_ep>

00001f98 <__udivmodhi4_loop>:
    1f98:	aa 1f       	adc	r26, r26
    1f9a:	bb 1f       	adc	r27, r27
    1f9c:	a6 17       	cp	r26, r22
    1f9e:	b7 07       	cpc	r27, r23
    1fa0:	10 f0       	brcs	.+4      	; 0x1fa6 <__udivmodhi4_ep>
    1fa2:	a6 1b       	sub	r26, r22
    1fa4:	b7 0b       	sbc	r27, r23

00001fa6 <__udivmodhi4_ep>:
    1fa6:	88 1f       	adc	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	5a 95       	dec	r21
    1fac:	a9 f7       	brne	.-22     	; 0x1f98 <__udivmodhi4_loop>
    1fae:	80 95       	com	r24
    1fb0:	90 95       	com	r25
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	08 95       	ret

00001fb8 <__umulhisi3>:
    1fb8:	a2 9f       	mul	r26, r18
    1fba:	b0 01       	movw	r22, r0
    1fbc:	b3 9f       	mul	r27, r19
    1fbe:	c0 01       	movw	r24, r0
    1fc0:	a3 9f       	mul	r26, r19
    1fc2:	70 0d       	add	r23, r0
    1fc4:	81 1d       	adc	r24, r1
    1fc6:	11 24       	eor	r1, r1
    1fc8:	91 1d       	adc	r25, r1
    1fca:	b2 9f       	mul	r27, r18
    1fcc:	70 0d       	add	r23, r0
    1fce:	81 1d       	adc	r24, r1
    1fd0:	11 24       	eor	r1, r1
    1fd2:	91 1d       	adc	r25, r1
    1fd4:	08 95       	ret

00001fd6 <do_rand>:
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	ec 01       	movw	r28, r24
    1fec:	68 81       	ld	r22, Y
    1fee:	79 81       	ldd	r23, Y+1	; 0x01
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff4:	61 15       	cp	r22, r1
    1ff6:	71 05       	cpc	r23, r1
    1ff8:	81 05       	cpc	r24, r1
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	21 f4       	brne	.+8      	; 0x2006 <do_rand+0x30>
    1ffe:	64 e2       	ldi	r22, 0x24	; 36
    2000:	79 ed       	ldi	r23, 0xD9	; 217
    2002:	8b e5       	ldi	r24, 0x5B	; 91
    2004:	97 e0       	ldi	r25, 0x07	; 7
    2006:	2d e1       	ldi	r18, 0x1D	; 29
    2008:	33 ef       	ldi	r19, 0xF3	; 243
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	0e 94 0a 13 	call	0x2614	; 0x2614 <__divmodsi4>
    2012:	49 01       	movw	r8, r18
    2014:	5a 01       	movw	r10, r20
    2016:	9b 01       	movw	r18, r22
    2018:	ac 01       	movw	r20, r24
    201a:	a7 ea       	ldi	r26, 0xA7	; 167
    201c:	b1 e4       	ldi	r27, 0x41	; 65
    201e:	0e 94 29 13 	call	0x2652	; 0x2652 <__muluhisi3>
    2022:	6b 01       	movw	r12, r22
    2024:	7c 01       	movw	r14, r24
    2026:	ac ee       	ldi	r26, 0xEC	; 236
    2028:	b4 ef       	ldi	r27, 0xF4	; 244
    202a:	a5 01       	movw	r20, r10
    202c:	94 01       	movw	r18, r8
    202e:	0e 94 37 13 	call	0x266e	; 0x266e <__mulohisi3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	8c 0d       	add	r24, r12
    2038:	9d 1d       	adc	r25, r13
    203a:	ae 1d       	adc	r26, r14
    203c:	bf 1d       	adc	r27, r15
    203e:	b7 ff       	sbrs	r27, 7
    2040:	03 c0       	rjmp	.+6      	; 0x2048 <do_rand+0x72>
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	a1 09       	sbc	r26, r1
    2046:	b0 48       	sbci	r27, 0x80	; 128
    2048:	88 83       	st	Y, r24
    204a:	99 83       	std	Y+1, r25	; 0x01
    204c:	aa 83       	std	Y+2, r26	; 0x02
    204e:	bb 83       	std	Y+3, r27	; 0x03
    2050:	9f 77       	andi	r25, 0x7F	; 127
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	df 90       	pop	r13
    205c:	cf 90       	pop	r12
    205e:	bf 90       	pop	r11
    2060:	af 90       	pop	r10
    2062:	9f 90       	pop	r9
    2064:	8f 90       	pop	r8
    2066:	08 95       	ret

00002068 <rand_r>:
    2068:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <do_rand>
    206c:	08 95       	ret

0000206e <rand>:
    206e:	80 e6       	ldi	r24, 0x60	; 96
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <do_rand>
    2076:	08 95       	ret

00002078 <srand>:
    2078:	a0 e0       	ldi	r26, 0x00	; 0
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    2080:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    2084:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    2088:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    208c:	08 95       	ret

0000208e <strrev>:
    208e:	dc 01       	movw	r26, r24
    2090:	fc 01       	movw	r30, r24
    2092:	67 2f       	mov	r22, r23
    2094:	71 91       	ld	r23, Z+
    2096:	77 23       	and	r23, r23
    2098:	e1 f7       	brne	.-8      	; 0x2092 <strrev+0x4>
    209a:	32 97       	sbiw	r30, 0x02	; 2
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <strrev+0x18>
    209e:	7c 91       	ld	r23, X
    20a0:	6d 93       	st	X+, r22
    20a2:	70 83       	st	Z, r23
    20a4:	62 91       	ld	r22, -Z
    20a6:	ae 17       	cp	r26, r30
    20a8:	bf 07       	cpc	r27, r31
    20aa:	c8 f3       	brcs	.-14     	; 0x209e <strrev+0x10>
    20ac:	08 95       	ret

000020ae <sprintf>:
    20ae:	ae e0       	ldi	r26, 0x0E	; 14
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	ed e5       	ldi	r30, 0x5D	; 93
    20b4:	f0 e1       	ldi	r31, 0x10	; 16
    20b6:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__prologue_saves__+0x1c>
    20ba:	0d 89       	ldd	r16, Y+21	; 0x15
    20bc:	1e 89       	ldd	r17, Y+22	; 0x16
    20be:	86 e0       	ldi	r24, 0x06	; 6
    20c0:	8c 83       	std	Y+4, r24	; 0x04
    20c2:	1a 83       	std	Y+2, r17	; 0x02
    20c4:	09 83       	std	Y+1, r16	; 0x01
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	9f e7       	ldi	r25, 0x7F	; 127
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	ae 01       	movw	r20, r28
    20d0:	47 5e       	subi	r20, 0xE7	; 231
    20d2:	5f 4f       	sbci	r21, 0xFF	; 255
    20d4:	6f 89       	ldd	r22, Y+23	; 0x17
    20d6:	78 8d       	ldd	r23, Y+24	; 0x18
    20d8:	ce 01       	movw	r24, r28
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	0e 94 79 10 	call	0x20f2	; 0x20f2 <vfprintf>
    20e0:	ef 81       	ldd	r30, Y+7	; 0x07
    20e2:	f8 85       	ldd	r31, Y+8	; 0x08
    20e4:	e0 0f       	add	r30, r16
    20e6:	f1 1f       	adc	r31, r17
    20e8:	10 82       	st	Z, r1
    20ea:	2e 96       	adiw	r28, 0x0e	; 14
    20ec:	e4 e0       	ldi	r30, 0x04	; 4
    20ee:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__epilogue_restores__+0x1c>

000020f2 <vfprintf>:
    20f2:	ab e0       	ldi	r26, 0x0B	; 11
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	ef e7       	ldi	r30, 0x7F	; 127
    20f8:	f0 e1       	ldi	r31, 0x10	; 16
    20fa:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__prologue_saves__>
    20fe:	6c 01       	movw	r12, r24
    2100:	7b 01       	movw	r14, r22
    2102:	8a 01       	movw	r16, r20
    2104:	fc 01       	movw	r30, r24
    2106:	17 82       	std	Z+7, r1	; 0x07
    2108:	16 82       	std	Z+6, r1	; 0x06
    210a:	83 81       	ldd	r24, Z+3	; 0x03
    210c:	81 ff       	sbrs	r24, 1
    210e:	cc c1       	rjmp	.+920    	; 0x24a8 <vfprintf+0x3b6>
    2110:	ce 01       	movw	r24, r28
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	3c 01       	movw	r6, r24
    2116:	f6 01       	movw	r30, r12
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	f7 01       	movw	r30, r14
    211c:	93 fd       	sbrc	r25, 3
    211e:	85 91       	lpm	r24, Z+
    2120:	93 ff       	sbrs	r25, 3
    2122:	81 91       	ld	r24, Z+
    2124:	7f 01       	movw	r14, r30
    2126:	88 23       	and	r24, r24
    2128:	09 f4       	brne	.+2      	; 0x212c <vfprintf+0x3a>
    212a:	ba c1       	rjmp	.+884    	; 0x24a0 <vfprintf+0x3ae>
    212c:	85 32       	cpi	r24, 0x25	; 37
    212e:	39 f4       	brne	.+14     	; 0x213e <vfprintf+0x4c>
    2130:	93 fd       	sbrc	r25, 3
    2132:	85 91       	lpm	r24, Z+
    2134:	93 ff       	sbrs	r25, 3
    2136:	81 91       	ld	r24, Z+
    2138:	7f 01       	movw	r14, r30
    213a:	85 32       	cpi	r24, 0x25	; 37
    213c:	29 f4       	brne	.+10     	; 0x2148 <vfprintf+0x56>
    213e:	b6 01       	movw	r22, r12
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fputc>
    2146:	e7 cf       	rjmp	.-50     	; 0x2116 <vfprintf+0x24>
    2148:	91 2c       	mov	r9, r1
    214a:	21 2c       	mov	r2, r1
    214c:	31 2c       	mov	r3, r1
    214e:	ff e1       	ldi	r31, 0x1F	; 31
    2150:	f3 15       	cp	r31, r3
    2152:	d8 f0       	brcs	.+54     	; 0x218a <vfprintf+0x98>
    2154:	8b 32       	cpi	r24, 0x2B	; 43
    2156:	79 f0       	breq	.+30     	; 0x2176 <vfprintf+0x84>
    2158:	38 f4       	brcc	.+14     	; 0x2168 <vfprintf+0x76>
    215a:	80 32       	cpi	r24, 0x20	; 32
    215c:	79 f0       	breq	.+30     	; 0x217c <vfprintf+0x8a>
    215e:	83 32       	cpi	r24, 0x23	; 35
    2160:	a1 f4       	brne	.+40     	; 0x218a <vfprintf+0x98>
    2162:	23 2d       	mov	r18, r3
    2164:	20 61       	ori	r18, 0x10	; 16
    2166:	1d c0       	rjmp	.+58     	; 0x21a2 <vfprintf+0xb0>
    2168:	8d 32       	cpi	r24, 0x2D	; 45
    216a:	61 f0       	breq	.+24     	; 0x2184 <vfprintf+0x92>
    216c:	80 33       	cpi	r24, 0x30	; 48
    216e:	69 f4       	brne	.+26     	; 0x218a <vfprintf+0x98>
    2170:	23 2d       	mov	r18, r3
    2172:	21 60       	ori	r18, 0x01	; 1
    2174:	16 c0       	rjmp	.+44     	; 0x21a2 <vfprintf+0xb0>
    2176:	83 2d       	mov	r24, r3
    2178:	82 60       	ori	r24, 0x02	; 2
    217a:	38 2e       	mov	r3, r24
    217c:	e3 2d       	mov	r30, r3
    217e:	e4 60       	ori	r30, 0x04	; 4
    2180:	3e 2e       	mov	r3, r30
    2182:	2a c0       	rjmp	.+84     	; 0x21d8 <vfprintf+0xe6>
    2184:	f3 2d       	mov	r31, r3
    2186:	f8 60       	ori	r31, 0x08	; 8
    2188:	1d c0       	rjmp	.+58     	; 0x21c4 <vfprintf+0xd2>
    218a:	37 fc       	sbrc	r3, 7
    218c:	2d c0       	rjmp	.+90     	; 0x21e8 <vfprintf+0xf6>
    218e:	20 ed       	ldi	r18, 0xD0	; 208
    2190:	28 0f       	add	r18, r24
    2192:	2a 30       	cpi	r18, 0x0A	; 10
    2194:	40 f0       	brcs	.+16     	; 0x21a6 <vfprintf+0xb4>
    2196:	8e 32       	cpi	r24, 0x2E	; 46
    2198:	b9 f4       	brne	.+46     	; 0x21c8 <vfprintf+0xd6>
    219a:	36 fc       	sbrc	r3, 6
    219c:	81 c1       	rjmp	.+770    	; 0x24a0 <vfprintf+0x3ae>
    219e:	23 2d       	mov	r18, r3
    21a0:	20 64       	ori	r18, 0x40	; 64
    21a2:	32 2e       	mov	r3, r18
    21a4:	19 c0       	rjmp	.+50     	; 0x21d8 <vfprintf+0xe6>
    21a6:	36 fe       	sbrs	r3, 6
    21a8:	06 c0       	rjmp	.+12     	; 0x21b6 <vfprintf+0xc4>
    21aa:	8a e0       	ldi	r24, 0x0A	; 10
    21ac:	98 9e       	mul	r9, r24
    21ae:	20 0d       	add	r18, r0
    21b0:	11 24       	eor	r1, r1
    21b2:	92 2e       	mov	r9, r18
    21b4:	11 c0       	rjmp	.+34     	; 0x21d8 <vfprintf+0xe6>
    21b6:	ea e0       	ldi	r30, 0x0A	; 10
    21b8:	2e 9e       	mul	r2, r30
    21ba:	20 0d       	add	r18, r0
    21bc:	11 24       	eor	r1, r1
    21be:	22 2e       	mov	r2, r18
    21c0:	f3 2d       	mov	r31, r3
    21c2:	f0 62       	ori	r31, 0x20	; 32
    21c4:	3f 2e       	mov	r3, r31
    21c6:	08 c0       	rjmp	.+16     	; 0x21d8 <vfprintf+0xe6>
    21c8:	8c 36       	cpi	r24, 0x6C	; 108
    21ca:	21 f4       	brne	.+8      	; 0x21d4 <vfprintf+0xe2>
    21cc:	83 2d       	mov	r24, r3
    21ce:	80 68       	ori	r24, 0x80	; 128
    21d0:	38 2e       	mov	r3, r24
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <vfprintf+0xe6>
    21d4:	88 36       	cpi	r24, 0x68	; 104
    21d6:	41 f4       	brne	.+16     	; 0x21e8 <vfprintf+0xf6>
    21d8:	f7 01       	movw	r30, r14
    21da:	93 fd       	sbrc	r25, 3
    21dc:	85 91       	lpm	r24, Z+
    21de:	93 ff       	sbrs	r25, 3
    21e0:	81 91       	ld	r24, Z+
    21e2:	7f 01       	movw	r14, r30
    21e4:	81 11       	cpse	r24, r1
    21e6:	b3 cf       	rjmp	.-154    	; 0x214e <vfprintf+0x5c>
    21e8:	98 2f       	mov	r25, r24
    21ea:	9f 7d       	andi	r25, 0xDF	; 223
    21ec:	95 54       	subi	r25, 0x45	; 69
    21ee:	93 30       	cpi	r25, 0x03	; 3
    21f0:	28 f4       	brcc	.+10     	; 0x21fc <vfprintf+0x10a>
    21f2:	0c 5f       	subi	r16, 0xFC	; 252
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	9f e3       	ldi	r25, 0x3F	; 63
    21f8:	99 83       	std	Y+1, r25	; 0x01
    21fa:	0d c0       	rjmp	.+26     	; 0x2216 <vfprintf+0x124>
    21fc:	83 36       	cpi	r24, 0x63	; 99
    21fe:	31 f0       	breq	.+12     	; 0x220c <vfprintf+0x11a>
    2200:	83 37       	cpi	r24, 0x73	; 115
    2202:	71 f0       	breq	.+28     	; 0x2220 <vfprintf+0x12e>
    2204:	83 35       	cpi	r24, 0x53	; 83
    2206:	09 f0       	breq	.+2      	; 0x220a <vfprintf+0x118>
    2208:	59 c0       	rjmp	.+178    	; 0x22bc <vfprintf+0x1ca>
    220a:	21 c0       	rjmp	.+66     	; 0x224e <vfprintf+0x15c>
    220c:	f8 01       	movw	r30, r16
    220e:	80 81       	ld	r24, Z
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	0e 5f       	subi	r16, 0xFE	; 254
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	88 24       	eor	r8, r8
    2218:	83 94       	inc	r8
    221a:	91 2c       	mov	r9, r1
    221c:	53 01       	movw	r10, r6
    221e:	13 c0       	rjmp	.+38     	; 0x2246 <vfprintf+0x154>
    2220:	28 01       	movw	r4, r16
    2222:	f2 e0       	ldi	r31, 0x02	; 2
    2224:	4f 0e       	add	r4, r31
    2226:	51 1c       	adc	r5, r1
    2228:	f8 01       	movw	r30, r16
    222a:	a0 80       	ld	r10, Z
    222c:	b1 80       	ldd	r11, Z+1	; 0x01
    222e:	36 fe       	sbrs	r3, 6
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <vfprintf+0x146>
    2232:	69 2d       	mov	r22, r9
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	02 c0       	rjmp	.+4      	; 0x223c <vfprintf+0x14a>
    2238:	6f ef       	ldi	r22, 0xFF	; 255
    223a:	7f ef       	ldi	r23, 0xFF	; 255
    223c:	c5 01       	movw	r24, r10
    223e:	0e 94 65 12 	call	0x24ca	; 0x24ca <strnlen>
    2242:	4c 01       	movw	r8, r24
    2244:	82 01       	movw	r16, r4
    2246:	f3 2d       	mov	r31, r3
    2248:	ff 77       	andi	r31, 0x7F	; 127
    224a:	3f 2e       	mov	r3, r31
    224c:	16 c0       	rjmp	.+44     	; 0x227a <vfprintf+0x188>
    224e:	28 01       	movw	r4, r16
    2250:	22 e0       	ldi	r18, 0x02	; 2
    2252:	42 0e       	add	r4, r18
    2254:	51 1c       	adc	r5, r1
    2256:	f8 01       	movw	r30, r16
    2258:	a0 80       	ld	r10, Z
    225a:	b1 80       	ldd	r11, Z+1	; 0x01
    225c:	36 fe       	sbrs	r3, 6
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <vfprintf+0x174>
    2260:	69 2d       	mov	r22, r9
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	02 c0       	rjmp	.+4      	; 0x226a <vfprintf+0x178>
    2266:	6f ef       	ldi	r22, 0xFF	; 255
    2268:	7f ef       	ldi	r23, 0xFF	; 255
    226a:	c5 01       	movw	r24, r10
    226c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <strnlen_P>
    2270:	4c 01       	movw	r8, r24
    2272:	f3 2d       	mov	r31, r3
    2274:	f0 68       	ori	r31, 0x80	; 128
    2276:	3f 2e       	mov	r3, r31
    2278:	82 01       	movw	r16, r4
    227a:	33 fc       	sbrc	r3, 3
    227c:	1b c0       	rjmp	.+54     	; 0x22b4 <vfprintf+0x1c2>
    227e:	82 2d       	mov	r24, r2
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	88 16       	cp	r8, r24
    2284:	99 06       	cpc	r9, r25
    2286:	b0 f4       	brcc	.+44     	; 0x22b4 <vfprintf+0x1c2>
    2288:	b6 01       	movw	r22, r12
    228a:	80 e2       	ldi	r24, 0x20	; 32
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fputc>
    2292:	2a 94       	dec	r2
    2294:	f4 cf       	rjmp	.-24     	; 0x227e <vfprintf+0x18c>
    2296:	f5 01       	movw	r30, r10
    2298:	37 fc       	sbrc	r3, 7
    229a:	85 91       	lpm	r24, Z+
    229c:	37 fe       	sbrs	r3, 7
    229e:	81 91       	ld	r24, Z+
    22a0:	5f 01       	movw	r10, r30
    22a2:	b6 01       	movw	r22, r12
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fputc>
    22aa:	21 10       	cpse	r2, r1
    22ac:	2a 94       	dec	r2
    22ae:	21 e0       	ldi	r18, 0x01	; 1
    22b0:	82 1a       	sub	r8, r18
    22b2:	91 08       	sbc	r9, r1
    22b4:	81 14       	cp	r8, r1
    22b6:	91 04       	cpc	r9, r1
    22b8:	71 f7       	brne	.-36     	; 0x2296 <vfprintf+0x1a4>
    22ba:	e8 c0       	rjmp	.+464    	; 0x248c <vfprintf+0x39a>
    22bc:	84 36       	cpi	r24, 0x64	; 100
    22be:	11 f0       	breq	.+4      	; 0x22c4 <vfprintf+0x1d2>
    22c0:	89 36       	cpi	r24, 0x69	; 105
    22c2:	41 f5       	brne	.+80     	; 0x2314 <vfprintf+0x222>
    22c4:	f8 01       	movw	r30, r16
    22c6:	37 fe       	sbrs	r3, 7
    22c8:	07 c0       	rjmp	.+14     	; 0x22d8 <vfprintf+0x1e6>
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	0c 5f       	subi	r16, 0xFC	; 252
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	08 c0       	rjmp	.+16     	; 0x22e8 <vfprintf+0x1f6>
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	07 2e       	mov	r0, r23
    22de:	00 0c       	add	r0, r0
    22e0:	88 0b       	sbc	r24, r24
    22e2:	99 0b       	sbc	r25, r25
    22e4:	0e 5f       	subi	r16, 0xFE	; 254
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	f3 2d       	mov	r31, r3
    22ea:	ff 76       	andi	r31, 0x6F	; 111
    22ec:	3f 2e       	mov	r3, r31
    22ee:	97 ff       	sbrs	r25, 7
    22f0:	09 c0       	rjmp	.+18     	; 0x2304 <vfprintf+0x212>
    22f2:	90 95       	com	r25
    22f4:	80 95       	com	r24
    22f6:	70 95       	com	r23
    22f8:	61 95       	neg	r22
    22fa:	7f 4f       	sbci	r23, 0xFF	; 255
    22fc:	8f 4f       	sbci	r24, 0xFF	; 255
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	f0 68       	ori	r31, 0x80	; 128
    2302:	3f 2e       	mov	r3, r31
    2304:	2a e0       	ldi	r18, 0x0A	; 10
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	a3 01       	movw	r20, r6
    230a:	0e 94 ac 12 	call	0x2558	; 0x2558 <__ultoa_invert>
    230e:	88 2e       	mov	r8, r24
    2310:	86 18       	sub	r8, r6
    2312:	45 c0       	rjmp	.+138    	; 0x239e <vfprintf+0x2ac>
    2314:	85 37       	cpi	r24, 0x75	; 117
    2316:	31 f4       	brne	.+12     	; 0x2324 <vfprintf+0x232>
    2318:	23 2d       	mov	r18, r3
    231a:	2f 7e       	andi	r18, 0xEF	; 239
    231c:	b2 2e       	mov	r11, r18
    231e:	2a e0       	ldi	r18, 0x0A	; 10
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	25 c0       	rjmp	.+74     	; 0x236e <vfprintf+0x27c>
    2324:	93 2d       	mov	r25, r3
    2326:	99 7f       	andi	r25, 0xF9	; 249
    2328:	b9 2e       	mov	r11, r25
    232a:	8f 36       	cpi	r24, 0x6F	; 111
    232c:	c1 f0       	breq	.+48     	; 0x235e <vfprintf+0x26c>
    232e:	18 f4       	brcc	.+6      	; 0x2336 <vfprintf+0x244>
    2330:	88 35       	cpi	r24, 0x58	; 88
    2332:	79 f0       	breq	.+30     	; 0x2352 <vfprintf+0x260>
    2334:	b5 c0       	rjmp	.+362    	; 0x24a0 <vfprintf+0x3ae>
    2336:	80 37       	cpi	r24, 0x70	; 112
    2338:	19 f0       	breq	.+6      	; 0x2340 <vfprintf+0x24e>
    233a:	88 37       	cpi	r24, 0x78	; 120
    233c:	21 f0       	breq	.+8      	; 0x2346 <vfprintf+0x254>
    233e:	b0 c0       	rjmp	.+352    	; 0x24a0 <vfprintf+0x3ae>
    2340:	e9 2f       	mov	r30, r25
    2342:	e0 61       	ori	r30, 0x10	; 16
    2344:	be 2e       	mov	r11, r30
    2346:	b4 fe       	sbrs	r11, 4
    2348:	0d c0       	rjmp	.+26     	; 0x2364 <vfprintf+0x272>
    234a:	fb 2d       	mov	r31, r11
    234c:	f4 60       	ori	r31, 0x04	; 4
    234e:	bf 2e       	mov	r11, r31
    2350:	09 c0       	rjmp	.+18     	; 0x2364 <vfprintf+0x272>
    2352:	34 fe       	sbrs	r3, 4
    2354:	0a c0       	rjmp	.+20     	; 0x236a <vfprintf+0x278>
    2356:	29 2f       	mov	r18, r25
    2358:	26 60       	ori	r18, 0x06	; 6
    235a:	b2 2e       	mov	r11, r18
    235c:	06 c0       	rjmp	.+12     	; 0x236a <vfprintf+0x278>
    235e:	28 e0       	ldi	r18, 0x08	; 8
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	05 c0       	rjmp	.+10     	; 0x236e <vfprintf+0x27c>
    2364:	20 e1       	ldi	r18, 0x10	; 16
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	02 c0       	rjmp	.+4      	; 0x236e <vfprintf+0x27c>
    236a:	20 e1       	ldi	r18, 0x10	; 16
    236c:	32 e0       	ldi	r19, 0x02	; 2
    236e:	f8 01       	movw	r30, r16
    2370:	b7 fe       	sbrs	r11, 7
    2372:	07 c0       	rjmp	.+14     	; 0x2382 <vfprintf+0x290>
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	0c 5f       	subi	r16, 0xFC	; 252
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	06 c0       	rjmp	.+12     	; 0x238e <vfprintf+0x29c>
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 5f       	subi	r16, 0xFE	; 254
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	a3 01       	movw	r20, r6
    2390:	0e 94 ac 12 	call	0x2558	; 0x2558 <__ultoa_invert>
    2394:	88 2e       	mov	r8, r24
    2396:	86 18       	sub	r8, r6
    2398:	fb 2d       	mov	r31, r11
    239a:	ff 77       	andi	r31, 0x7F	; 127
    239c:	3f 2e       	mov	r3, r31
    239e:	36 fe       	sbrs	r3, 6
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <vfprintf+0x2ca>
    23a2:	23 2d       	mov	r18, r3
    23a4:	2e 7f       	andi	r18, 0xFE	; 254
    23a6:	a2 2e       	mov	r10, r18
    23a8:	89 14       	cp	r8, r9
    23aa:	58 f4       	brcc	.+22     	; 0x23c2 <vfprintf+0x2d0>
    23ac:	34 fe       	sbrs	r3, 4
    23ae:	0b c0       	rjmp	.+22     	; 0x23c6 <vfprintf+0x2d4>
    23b0:	32 fc       	sbrc	r3, 2
    23b2:	09 c0       	rjmp	.+18     	; 0x23c6 <vfprintf+0x2d4>
    23b4:	83 2d       	mov	r24, r3
    23b6:	8e 7e       	andi	r24, 0xEE	; 238
    23b8:	a8 2e       	mov	r10, r24
    23ba:	05 c0       	rjmp	.+10     	; 0x23c6 <vfprintf+0x2d4>
    23bc:	b8 2c       	mov	r11, r8
    23be:	a3 2c       	mov	r10, r3
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <vfprintf+0x2d6>
    23c2:	b8 2c       	mov	r11, r8
    23c4:	01 c0       	rjmp	.+2      	; 0x23c8 <vfprintf+0x2d6>
    23c6:	b9 2c       	mov	r11, r9
    23c8:	a4 fe       	sbrs	r10, 4
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <vfprintf+0x2f8>
    23cc:	fe 01       	movw	r30, r28
    23ce:	e8 0d       	add	r30, r8
    23d0:	f1 1d       	adc	r31, r1
    23d2:	80 81       	ld	r24, Z
    23d4:	80 33       	cpi	r24, 0x30	; 48
    23d6:	21 f4       	brne	.+8      	; 0x23e0 <vfprintf+0x2ee>
    23d8:	9a 2d       	mov	r25, r10
    23da:	99 7e       	andi	r25, 0xE9	; 233
    23dc:	a9 2e       	mov	r10, r25
    23de:	09 c0       	rjmp	.+18     	; 0x23f2 <vfprintf+0x300>
    23e0:	a2 fe       	sbrs	r10, 2
    23e2:	06 c0       	rjmp	.+12     	; 0x23f0 <vfprintf+0x2fe>
    23e4:	b3 94       	inc	r11
    23e6:	b3 94       	inc	r11
    23e8:	04 c0       	rjmp	.+8      	; 0x23f2 <vfprintf+0x300>
    23ea:	8a 2d       	mov	r24, r10
    23ec:	86 78       	andi	r24, 0x86	; 134
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <vfprintf+0x300>
    23f0:	b3 94       	inc	r11
    23f2:	a3 fc       	sbrc	r10, 3
    23f4:	11 c0       	rjmp	.+34     	; 0x2418 <vfprintf+0x326>
    23f6:	a0 fe       	sbrs	r10, 0
    23f8:	06 c0       	rjmp	.+12     	; 0x2406 <vfprintf+0x314>
    23fa:	b2 14       	cp	r11, r2
    23fc:	88 f4       	brcc	.+34     	; 0x2420 <vfprintf+0x32e>
    23fe:	28 0c       	add	r2, r8
    2400:	92 2c       	mov	r9, r2
    2402:	9b 18       	sub	r9, r11
    2404:	0e c0       	rjmp	.+28     	; 0x2422 <vfprintf+0x330>
    2406:	b2 14       	cp	r11, r2
    2408:	60 f4       	brcc	.+24     	; 0x2422 <vfprintf+0x330>
    240a:	b6 01       	movw	r22, r12
    240c:	80 e2       	ldi	r24, 0x20	; 32
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fputc>
    2414:	b3 94       	inc	r11
    2416:	f7 cf       	rjmp	.-18     	; 0x2406 <vfprintf+0x314>
    2418:	b2 14       	cp	r11, r2
    241a:	18 f4       	brcc	.+6      	; 0x2422 <vfprintf+0x330>
    241c:	2b 18       	sub	r2, r11
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <vfprintf+0x332>
    2420:	98 2c       	mov	r9, r8
    2422:	21 2c       	mov	r2, r1
    2424:	a4 fe       	sbrs	r10, 4
    2426:	10 c0       	rjmp	.+32     	; 0x2448 <vfprintf+0x356>
    2428:	b6 01       	movw	r22, r12
    242a:	80 e3       	ldi	r24, 0x30	; 48
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fputc>
    2432:	a2 fe       	sbrs	r10, 2
    2434:	17 c0       	rjmp	.+46     	; 0x2464 <vfprintf+0x372>
    2436:	a1 fc       	sbrc	r10, 1
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <vfprintf+0x34e>
    243a:	88 e7       	ldi	r24, 0x78	; 120
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <vfprintf+0x352>
    2440:	88 e5       	ldi	r24, 0x58	; 88
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	b6 01       	movw	r22, r12
    2446:	0c c0       	rjmp	.+24     	; 0x2460 <vfprintf+0x36e>
    2448:	8a 2d       	mov	r24, r10
    244a:	86 78       	andi	r24, 0x86	; 134
    244c:	59 f0       	breq	.+22     	; 0x2464 <vfprintf+0x372>
    244e:	a1 fe       	sbrs	r10, 1
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <vfprintf+0x364>
    2452:	8b e2       	ldi	r24, 0x2B	; 43
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <vfprintf+0x366>
    2456:	80 e2       	ldi	r24, 0x20	; 32
    2458:	a7 fc       	sbrc	r10, 7
    245a:	8d e2       	ldi	r24, 0x2D	; 45
    245c:	b6 01       	movw	r22, r12
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fputc>
    2464:	89 14       	cp	r8, r9
    2466:	38 f4       	brcc	.+14     	; 0x2476 <vfprintf+0x384>
    2468:	b6 01       	movw	r22, r12
    246a:	80 e3       	ldi	r24, 0x30	; 48
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fputc>
    2472:	9a 94       	dec	r9
    2474:	f7 cf       	rjmp	.-18     	; 0x2464 <vfprintf+0x372>
    2476:	8a 94       	dec	r8
    2478:	f3 01       	movw	r30, r6
    247a:	e8 0d       	add	r30, r8
    247c:	f1 1d       	adc	r31, r1
    247e:	80 81       	ld	r24, Z
    2480:	b6 01       	movw	r22, r12
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fputc>
    2488:	81 10       	cpse	r8, r1
    248a:	f5 cf       	rjmp	.-22     	; 0x2476 <vfprintf+0x384>
    248c:	22 20       	and	r2, r2
    248e:	09 f4       	brne	.+2      	; 0x2492 <vfprintf+0x3a0>
    2490:	42 ce       	rjmp	.-892    	; 0x2116 <vfprintf+0x24>
    2492:	b6 01       	movw	r22, r12
    2494:	80 e2       	ldi	r24, 0x20	; 32
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fputc>
    249c:	2a 94       	dec	r2
    249e:	f6 cf       	rjmp	.-20     	; 0x248c <vfprintf+0x39a>
    24a0:	f6 01       	movw	r30, r12
    24a2:	86 81       	ldd	r24, Z+6	; 0x06
    24a4:	97 81       	ldd	r25, Z+7	; 0x07
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <vfprintf+0x3ba>
    24a8:	8f ef       	ldi	r24, 0xFF	; 255
    24aa:	9f ef       	ldi	r25, 0xFF	; 255
    24ac:	2b 96       	adiw	r28, 0x0b	; 11
    24ae:	e2 e1       	ldi	r30, 0x12	; 18
    24b0:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__epilogue_restores__>

000024b4 <strnlen_P>:
    24b4:	fc 01       	movw	r30, r24
    24b6:	05 90       	lpm	r0, Z+
    24b8:	61 50       	subi	r22, 0x01	; 1
    24ba:	70 40       	sbci	r23, 0x00	; 0
    24bc:	01 10       	cpse	r0, r1
    24be:	d8 f7       	brcc	.-10     	; 0x24b6 <strnlen_P+0x2>
    24c0:	80 95       	com	r24
    24c2:	90 95       	com	r25
    24c4:	8e 0f       	add	r24, r30
    24c6:	9f 1f       	adc	r25, r31
    24c8:	08 95       	ret

000024ca <strnlen>:
    24ca:	fc 01       	movw	r30, r24
    24cc:	61 50       	subi	r22, 0x01	; 1
    24ce:	70 40       	sbci	r23, 0x00	; 0
    24d0:	01 90       	ld	r0, Z+
    24d2:	01 10       	cpse	r0, r1
    24d4:	d8 f7       	brcc	.-10     	; 0x24cc <strnlen+0x2>
    24d6:	80 95       	com	r24
    24d8:	90 95       	com	r25
    24da:	8e 0f       	add	r24, r30
    24dc:	9f 1f       	adc	r25, r31
    24de:	08 95       	ret

000024e0 <fputc>:
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	fb 01       	movw	r30, r22
    24ea:	23 81       	ldd	r18, Z+3	; 0x03
    24ec:	21 fd       	sbrc	r18, 1
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <fputc+0x16>
    24f0:	8f ef       	ldi	r24, 0xFF	; 255
    24f2:	9f ef       	ldi	r25, 0xFF	; 255
    24f4:	2c c0       	rjmp	.+88     	; 0x254e <fputc+0x6e>
    24f6:	22 ff       	sbrs	r18, 2
    24f8:	16 c0       	rjmp	.+44     	; 0x2526 <fputc+0x46>
    24fa:	46 81       	ldd	r20, Z+6	; 0x06
    24fc:	57 81       	ldd	r21, Z+7	; 0x07
    24fe:	24 81       	ldd	r18, Z+4	; 0x04
    2500:	35 81       	ldd	r19, Z+5	; 0x05
    2502:	42 17       	cp	r20, r18
    2504:	53 07       	cpc	r21, r19
    2506:	44 f4       	brge	.+16     	; 0x2518 <fputc+0x38>
    2508:	a0 81       	ld	r26, Z
    250a:	b1 81       	ldd	r27, Z+1	; 0x01
    250c:	9d 01       	movw	r18, r26
    250e:	2f 5f       	subi	r18, 0xFF	; 255
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	31 83       	std	Z+1, r19	; 0x01
    2514:	20 83       	st	Z, r18
    2516:	8c 93       	st	X, r24
    2518:	26 81       	ldd	r18, Z+6	; 0x06
    251a:	37 81       	ldd	r19, Z+7	; 0x07
    251c:	2f 5f       	subi	r18, 0xFF	; 255
    251e:	3f 4f       	sbci	r19, 0xFF	; 255
    2520:	37 83       	std	Z+7, r19	; 0x07
    2522:	26 83       	std	Z+6, r18	; 0x06
    2524:	14 c0       	rjmp	.+40     	; 0x254e <fputc+0x6e>
    2526:	8b 01       	movw	r16, r22
    2528:	ec 01       	movw	r28, r24
    252a:	fb 01       	movw	r30, r22
    252c:	00 84       	ldd	r0, Z+8	; 0x08
    252e:	f1 85       	ldd	r31, Z+9	; 0x09
    2530:	e0 2d       	mov	r30, r0
    2532:	09 95       	icall
    2534:	89 2b       	or	r24, r25
    2536:	e1 f6       	brne	.-72     	; 0x24f0 <fputc+0x10>
    2538:	d8 01       	movw	r26, r16
    253a:	16 96       	adiw	r26, 0x06	; 6
    253c:	8d 91       	ld	r24, X+
    253e:	9c 91       	ld	r25, X
    2540:	17 97       	sbiw	r26, 0x07	; 7
    2542:	01 96       	adiw	r24, 0x01	; 1
    2544:	17 96       	adiw	r26, 0x07	; 7
    2546:	9c 93       	st	X, r25
    2548:	8e 93       	st	-X, r24
    254a:	16 97       	sbiw	r26, 0x06	; 6
    254c:	ce 01       	movw	r24, r28
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	1f 91       	pop	r17
    2554:	0f 91       	pop	r16
    2556:	08 95       	ret

00002558 <__ultoa_invert>:
    2558:	fa 01       	movw	r30, r20
    255a:	aa 27       	eor	r26, r26
    255c:	28 30       	cpi	r18, 0x08	; 8
    255e:	51 f1       	breq	.+84     	; 0x25b4 <__ultoa_invert+0x5c>
    2560:	20 31       	cpi	r18, 0x10	; 16
    2562:	81 f1       	breq	.+96     	; 0x25c4 <__ultoa_invert+0x6c>
    2564:	e8 94       	clt
    2566:	6f 93       	push	r22
    2568:	6e 7f       	andi	r22, 0xFE	; 254
    256a:	6e 5f       	subi	r22, 0xFE	; 254
    256c:	7f 4f       	sbci	r23, 0xFF	; 255
    256e:	8f 4f       	sbci	r24, 0xFF	; 255
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	af 4f       	sbci	r26, 0xFF	; 255
    2574:	b1 e0       	ldi	r27, 0x01	; 1
    2576:	3e d0       	rcall	.+124    	; 0x25f4 <__ultoa_invert+0x9c>
    2578:	b4 e0       	ldi	r27, 0x04	; 4
    257a:	3c d0       	rcall	.+120    	; 0x25f4 <__ultoa_invert+0x9c>
    257c:	67 0f       	add	r22, r23
    257e:	78 1f       	adc	r23, r24
    2580:	89 1f       	adc	r24, r25
    2582:	9a 1f       	adc	r25, r26
    2584:	a1 1d       	adc	r26, r1
    2586:	68 0f       	add	r22, r24
    2588:	79 1f       	adc	r23, r25
    258a:	8a 1f       	adc	r24, r26
    258c:	91 1d       	adc	r25, r1
    258e:	a1 1d       	adc	r26, r1
    2590:	6a 0f       	add	r22, r26
    2592:	71 1d       	adc	r23, r1
    2594:	81 1d       	adc	r24, r1
    2596:	91 1d       	adc	r25, r1
    2598:	a1 1d       	adc	r26, r1
    259a:	20 d0       	rcall	.+64     	; 0x25dc <__ultoa_invert+0x84>
    259c:	09 f4       	brne	.+2      	; 0x25a0 <__ultoa_invert+0x48>
    259e:	68 94       	set
    25a0:	3f 91       	pop	r19
    25a2:	2a e0       	ldi	r18, 0x0A	; 10
    25a4:	26 9f       	mul	r18, r22
    25a6:	11 24       	eor	r1, r1
    25a8:	30 19       	sub	r19, r0
    25aa:	30 5d       	subi	r19, 0xD0	; 208
    25ac:	31 93       	st	Z+, r19
    25ae:	de f6       	brtc	.-74     	; 0x2566 <__ultoa_invert+0xe>
    25b0:	cf 01       	movw	r24, r30
    25b2:	08 95       	ret
    25b4:	46 2f       	mov	r20, r22
    25b6:	47 70       	andi	r20, 0x07	; 7
    25b8:	40 5d       	subi	r20, 0xD0	; 208
    25ba:	41 93       	st	Z+, r20
    25bc:	b3 e0       	ldi	r27, 0x03	; 3
    25be:	0f d0       	rcall	.+30     	; 0x25de <__ultoa_invert+0x86>
    25c0:	c9 f7       	brne	.-14     	; 0x25b4 <__ultoa_invert+0x5c>
    25c2:	f6 cf       	rjmp	.-20     	; 0x25b0 <__ultoa_invert+0x58>
    25c4:	46 2f       	mov	r20, r22
    25c6:	4f 70       	andi	r20, 0x0F	; 15
    25c8:	40 5d       	subi	r20, 0xD0	; 208
    25ca:	4a 33       	cpi	r20, 0x3A	; 58
    25cc:	18 f0       	brcs	.+6      	; 0x25d4 <__ultoa_invert+0x7c>
    25ce:	49 5d       	subi	r20, 0xD9	; 217
    25d0:	31 fd       	sbrc	r19, 1
    25d2:	40 52       	subi	r20, 0x20	; 32
    25d4:	41 93       	st	Z+, r20
    25d6:	02 d0       	rcall	.+4      	; 0x25dc <__ultoa_invert+0x84>
    25d8:	a9 f7       	brne	.-22     	; 0x25c4 <__ultoa_invert+0x6c>
    25da:	ea cf       	rjmp	.-44     	; 0x25b0 <__ultoa_invert+0x58>
    25dc:	b4 e0       	ldi	r27, 0x04	; 4
    25de:	a6 95       	lsr	r26
    25e0:	97 95       	ror	r25
    25e2:	87 95       	ror	r24
    25e4:	77 95       	ror	r23
    25e6:	67 95       	ror	r22
    25e8:	ba 95       	dec	r27
    25ea:	c9 f7       	brne	.-14     	; 0x25de <__ultoa_invert+0x86>
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	61 05       	cpc	r22, r1
    25f0:	71 05       	cpc	r23, r1
    25f2:	08 95       	ret
    25f4:	9b 01       	movw	r18, r22
    25f6:	ac 01       	movw	r20, r24
    25f8:	0a 2e       	mov	r0, r26
    25fa:	06 94       	lsr	r0
    25fc:	57 95       	ror	r21
    25fe:	47 95       	ror	r20
    2600:	37 95       	ror	r19
    2602:	27 95       	ror	r18
    2604:	ba 95       	dec	r27
    2606:	c9 f7       	brne	.-14     	; 0x25fa <__ultoa_invert+0xa2>
    2608:	62 0f       	add	r22, r18
    260a:	73 1f       	adc	r23, r19
    260c:	84 1f       	adc	r24, r20
    260e:	95 1f       	adc	r25, r21
    2610:	a0 1d       	adc	r26, r0
    2612:	08 95       	ret

00002614 <__divmodsi4>:
    2614:	05 2e       	mov	r0, r21
    2616:	97 fb       	bst	r25, 7
    2618:	1e f4       	brtc	.+6      	; 0x2620 <__divmodsi4+0xc>
    261a:	00 94       	com	r0
    261c:	0e 94 21 13 	call	0x2642	; 0x2642 <__negsi2>
    2620:	57 fd       	sbrc	r21, 7
    2622:	07 d0       	rcall	.+14     	; 0x2632 <__divmodsi4_neg2>
    2624:	0e 94 3c 13 	call	0x2678	; 0x2678 <__udivmodsi4>
    2628:	07 fc       	sbrc	r0, 7
    262a:	03 d0       	rcall	.+6      	; 0x2632 <__divmodsi4_neg2>
    262c:	4e f4       	brtc	.+18     	; 0x2640 <__divmodsi4_exit>
    262e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__negsi2>

00002632 <__divmodsi4_neg2>:
    2632:	50 95       	com	r21
    2634:	40 95       	com	r20
    2636:	30 95       	com	r19
    2638:	21 95       	neg	r18
    263a:	3f 4f       	sbci	r19, 0xFF	; 255
    263c:	4f 4f       	sbci	r20, 0xFF	; 255
    263e:	5f 4f       	sbci	r21, 0xFF	; 255

00002640 <__divmodsi4_exit>:
    2640:	08 95       	ret

00002642 <__negsi2>:
    2642:	90 95       	com	r25
    2644:	80 95       	com	r24
    2646:	70 95       	com	r23
    2648:	61 95       	neg	r22
    264a:	7f 4f       	sbci	r23, 0xFF	; 255
    264c:	8f 4f       	sbci	r24, 0xFF	; 255
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	08 95       	ret

00002652 <__muluhisi3>:
    2652:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__umulhisi3>
    2656:	a5 9f       	mul	r26, r21
    2658:	90 0d       	add	r25, r0
    265a:	b4 9f       	mul	r27, r20
    265c:	90 0d       	add	r25, r0
    265e:	a4 9f       	mul	r26, r20
    2660:	80 0d       	add	r24, r0
    2662:	91 1d       	adc	r25, r1
    2664:	11 24       	eor	r1, r1
    2666:	08 95       	ret

00002668 <__mulshisi3>:
    2668:	b7 ff       	sbrs	r27, 7
    266a:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__muluhisi3>

0000266e <__mulohisi3>:
    266e:	0e 94 29 13 	call	0x2652	; 0x2652 <__muluhisi3>
    2672:	82 1b       	sub	r24, r18
    2674:	93 0b       	sbc	r25, r19
    2676:	08 95       	ret

00002678 <__udivmodsi4>:
    2678:	a1 e2       	ldi	r26, 0x21	; 33
    267a:	1a 2e       	mov	r1, r26
    267c:	aa 1b       	sub	r26, r26
    267e:	bb 1b       	sub	r27, r27
    2680:	fd 01       	movw	r30, r26
    2682:	0d c0       	rjmp	.+26     	; 0x269e <__udivmodsi4_ep>

00002684 <__udivmodsi4_loop>:
    2684:	aa 1f       	adc	r26, r26
    2686:	bb 1f       	adc	r27, r27
    2688:	ee 1f       	adc	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	a2 17       	cp	r26, r18
    268e:	b3 07       	cpc	r27, r19
    2690:	e4 07       	cpc	r30, r20
    2692:	f5 07       	cpc	r31, r21
    2694:	20 f0       	brcs	.+8      	; 0x269e <__udivmodsi4_ep>
    2696:	a2 1b       	sub	r26, r18
    2698:	b3 0b       	sbc	r27, r19
    269a:	e4 0b       	sbc	r30, r20
    269c:	f5 0b       	sbc	r31, r21

0000269e <__udivmodsi4_ep>:
    269e:	66 1f       	adc	r22, r22
    26a0:	77 1f       	adc	r23, r23
    26a2:	88 1f       	adc	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	1a 94       	dec	r1
    26a8:	69 f7       	brne	.-38     	; 0x2684 <__udivmodsi4_loop>
    26aa:	60 95       	com	r22
    26ac:	70 95       	com	r23
    26ae:	80 95       	com	r24
    26b0:	90 95       	com	r25
    26b2:	9b 01       	movw	r18, r22
    26b4:	ac 01       	movw	r20, r24
    26b6:	bd 01       	movw	r22, r26
    26b8:	cf 01       	movw	r24, r30
    26ba:	08 95       	ret

000026bc <_exit>:
    26bc:	f8 94       	cli

000026be <__stop_program>:
    26be:	ff cf       	rjmp	.-2      	; 0x26be <__stop_program>
