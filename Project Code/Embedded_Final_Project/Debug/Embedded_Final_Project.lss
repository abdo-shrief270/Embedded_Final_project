
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c2  00800060  00002668  000026fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800222  00800222  000028be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000028be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000291c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fb6  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c53  00000000  00000000  00006b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019aa  00000000  00000000  00007771  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  0000911c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a15  00000000  00000000  0000989c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000334c  00000000  00000000  0000a2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000d5fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 32       	cpi	r26, 0x29	; 41
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <main>
      8a:	0c 94 32 13 	jmp	0x2664	; 0x2664 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
      92:	fc 01       	movw	r30, r24
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <__system_time>
      9c:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <__system_time+0x1>
      a0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <__system_time+0x2>
      a4:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <__system_time+0x3>
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	30 97       	sbiw	r30, 0x00	; 0
      ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
      ae:	60 83       	st	Z, r22
      b0:	71 83       	std	Z+1, r23	; 0x01
      b2:	82 83       	std	Z+2, r24	; 0x02
      b4:	93 83       	std	Z+3, r25	; 0x03
      b6:	08 95       	ret

000000b8 <DIO_vidSetPinMode>:
            {
                DDRD = 0xff;
            }
            else
            {
                DDRD = 0x00;
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	01 f1       	breq	.+64     	; 0xfc <DIO_vidSetPinMode+0x44>
      bc:	30 f0       	brcs	.+12     	; 0xca <DIO_vidSetPinMode+0x12>
      be:	82 30       	cpi	r24, 0x02	; 2
      c0:	b1 f1       	breq	.+108    	; 0x12e <DIO_vidSetPinMode+0x76>
      c2:	83 30       	cpi	r24, 0x03	; 3
      c4:	09 f4       	brne	.+2      	; 0xc8 <DIO_vidSetPinMode+0x10>
      c6:	4c c0       	rjmp	.+152    	; 0x160 <DIO_vidSetPinMode+0xa8>
      c8:	08 95       	ret
      ca:	41 30       	cpi	r20, 0x01	; 1
      cc:	59 f4       	brne	.+22     	; 0xe4 <DIO_vidSetPinMode+0x2c>
      ce:	2a b3       	in	r18, 0x1a	; 26
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_vidSetPinMode+0x22>
      d6:	88 0f       	add	r24, r24
      d8:	99 1f       	adc	r25, r25
      da:	6a 95       	dec	r22
      dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_vidSetPinMode+0x1e>
      de:	82 2b       	or	r24, r18
      e0:	8a bb       	out	0x1a, r24	; 26
      e2:	08 95       	ret
      e4:	2a b3       	in	r18, 0x1a	; 26
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_vidSetPinMode+0x38>
      ec:	88 0f       	add	r24, r24
      ee:	99 1f       	adc	r25, r25
      f0:	6a 95       	dec	r22
      f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_vidSetPinMode+0x34>
      f4:	80 95       	com	r24
      f6:	82 23       	and	r24, r18
      f8:	8a bb       	out	0x1a, r24	; 26
      fa:	08 95       	ret
      fc:	41 30       	cpi	r20, 0x01	; 1
      fe:	59 f4       	brne	.+22     	; 0x116 <DIO_vidSetPinMode+0x5e>
     100:	27 b3       	in	r18, 0x17	; 23
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_vidSetPinMode+0x54>
     108:	88 0f       	add	r24, r24
     10a:	99 1f       	adc	r25, r25
     10c:	6a 95       	dec	r22
     10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_vidSetPinMode+0x50>
     110:	82 2b       	or	r24, r18
     112:	87 bb       	out	0x17, r24	; 23
     114:	08 95       	ret
     116:	27 b3       	in	r18, 0x17	; 23
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_vidSetPinMode+0x6a>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	6a 95       	dec	r22
     124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_vidSetPinMode+0x66>
     126:	80 95       	com	r24
     128:	82 23       	and	r24, r18
     12a:	87 bb       	out	0x17, r24	; 23
     12c:	08 95       	ret
     12e:	41 30       	cpi	r20, 0x01	; 1
     130:	59 f4       	brne	.+22     	; 0x148 <DIO_vidSetPinMode+0x90>
     132:	24 b3       	in	r18, 0x14	; 20
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_vidSetPinMode+0x86>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	6a 95       	dec	r22
     140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_vidSetPinMode+0x82>
     142:	82 2b       	or	r24, r18
     144:	84 bb       	out	0x14, r24	; 20
     146:	08 95       	ret
     148:	24 b3       	in	r18, 0x14	; 20
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_vidSetPinMode+0x9c>
     150:	88 0f       	add	r24, r24
     152:	99 1f       	adc	r25, r25
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_vidSetPinMode+0x98>
     158:	80 95       	com	r24
     15a:	82 23       	and	r24, r18
     15c:	84 bb       	out	0x14, r24	; 20
     15e:	08 95       	ret
     160:	41 30       	cpi	r20, 0x01	; 1
     162:	59 f4       	brne	.+22     	; 0x17a <DIO_vidSetPinMode+0xc2>
     164:	21 b3       	in	r18, 0x11	; 17
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vidSetPinMode+0xb8>
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vidSetPinMode+0xb4>
     174:	82 2b       	or	r24, r18
     176:	81 bb       	out	0x11, r24	; 17
     178:	08 95       	ret
     17a:	21 b3       	in	r18, 0x11	; 17
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_vidSetPinMode+0xce>
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25
     186:	6a 95       	dec	r22
     188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_vidSetPinMode+0xca>
     18a:	80 95       	com	r24
     18c:	82 23       	and	r24, r18
     18e:	81 bb       	out	0x11, r24	; 17
     190:	08 95       	ret

00000192 <DIO_vidWritePin>:
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	01 f1       	breq	.+64     	; 0x1d6 <DIO_vidWritePin+0x44>
     196:	30 f0       	brcs	.+12     	; 0x1a4 <DIO_vidWritePin+0x12>
     198:	82 30       	cpi	r24, 0x02	; 2
     19a:	b1 f1       	breq	.+108    	; 0x208 <DIO_vidWritePin+0x76>
     19c:	83 30       	cpi	r24, 0x03	; 3
     19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_vidWritePin+0x10>
     1a0:	4c c0       	rjmp	.+152    	; 0x23a <DIO_vidWritePin+0xa8>
     1a2:	08 95       	ret
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	59 f4       	brne	.+22     	; 0x1be <DIO_vidWritePin+0x2c>
     1a8:	2b b3       	in	r18, 0x1b	; 27
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vidWritePin+0x22>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vidWritePin+0x1e>
     1b8:	82 2b       	or	r24, r18
     1ba:	8b bb       	out	0x1b, r24	; 27
     1bc:	08 95       	ret
     1be:	2b b3       	in	r18, 0x1b	; 27
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_vidWritePin+0x38>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_vidWritePin+0x34>
     1ce:	80 95       	com	r24
     1d0:	82 23       	and	r24, r18
     1d2:	8b bb       	out	0x1b, r24	; 27
     1d4:	08 95       	ret
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_vidWritePin+0x5e>
     1da:	28 b3       	in	r18, 0x18	; 24
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vidWritePin+0x54>
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	6a 95       	dec	r22
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vidWritePin+0x50>
     1ea:	82 2b       	or	r24, r18
     1ec:	88 bb       	out	0x18, r24	; 24
     1ee:	08 95       	ret
     1f0:	28 b3       	in	r18, 0x18	; 24
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_vidWritePin+0x6a>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_vidWritePin+0x66>
     200:	80 95       	com	r24
     202:	82 23       	and	r24, r18
     204:	88 bb       	out	0x18, r24	; 24
     206:	08 95       	ret
     208:	41 30       	cpi	r20, 0x01	; 1
     20a:	59 f4       	brne	.+22     	; 0x222 <DIO_vidWritePin+0x90>
     20c:	25 b3       	in	r18, 0x15	; 21
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_vidWritePin+0x86>
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	6a 95       	dec	r22
     21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_vidWritePin+0x82>
     21c:	82 2b       	or	r24, r18
     21e:	85 bb       	out	0x15, r24	; 21
     220:	08 95       	ret
     222:	25 b3       	in	r18, 0x15	; 21
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_vidWritePin+0x9c>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_vidWritePin+0x98>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	85 bb       	out	0x15, r24	; 21
     238:	08 95       	ret
     23a:	41 30       	cpi	r20, 0x01	; 1
     23c:	59 f4       	brne	.+22     	; 0x254 <DIO_vidWritePin+0xc2>
     23e:	22 b3       	in	r18, 0x12	; 18
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_vidWritePin+0xb8>
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	6a 95       	dec	r22
     24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_vidWritePin+0xb4>
     24e:	82 2b       	or	r24, r18
     250:	82 bb       	out	0x12, r24	; 18
     252:	08 95       	ret
     254:	22 b3       	in	r18, 0x12	; 18
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_vidWritePin+0xce>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	6a 95       	dec	r22
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_vidWritePin+0xca>
     264:	80 95       	com	r24
     266:	82 23       	and	r24, r18
     268:	82 bb       	out	0x12, r24	; 18
     26a:	08 95       	ret

0000026c <DIO_enuReadPin>:
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	c9 f0       	breq	.+50     	; 0x2a2 <DIO_enuReadPin+0x36>
     270:	28 f0       	brcs	.+10     	; 0x27c <DIO_enuReadPin+0x10>
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	49 f1       	breq	.+82     	; 0x2c8 <DIO_enuReadPin+0x5c>
     276:	83 30       	cpi	r24, 0x03	; 3
     278:	d1 f1       	breq	.+116    	; 0x2ee <DIO_enuReadPin+0x82>
     27a:	4b c0       	rjmp	.+150    	; 0x312 <DIO_enuReadPin+0xa6>
     27c:	29 b3       	in	r18, 0x19	; 25
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	06 2e       	mov	r0, r22
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_enuReadPin+0x1e>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_enuReadPin+0x1a>
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	82 23       	and	r24, r18
     292:	93 23       	and	r25, r19
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_enuReadPin+0x2e>
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	6a 95       	dec	r22
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_enuReadPin+0x2a>
     29e:	98 2f       	mov	r25, r24
     2a0:	38 c0       	rjmp	.+112    	; 0x312 <DIO_enuReadPin+0xa6>
     2a2:	26 b3       	in	r18, 0x16	; 22
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	06 2e       	mov	r0, r22
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_enuReadPin+0x44>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	0a 94       	dec	r0
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_enuReadPin+0x40>
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	82 23       	and	r24, r18
     2b8:	93 23       	and	r25, r19
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_enuReadPin+0x54>
     2bc:	95 95       	asr	r25
     2be:	87 95       	ror	r24
     2c0:	6a 95       	dec	r22
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_enuReadPin+0x50>
     2c4:	98 2f       	mov	r25, r24
     2c6:	25 c0       	rjmp	.+74     	; 0x312 <DIO_enuReadPin+0xa6>
     2c8:	23 b3       	in	r18, 0x13	; 19
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	06 2e       	mov	r0, r22
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_enuReadPin+0x6a>
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	0a 94       	dec	r0
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_enuReadPin+0x66>
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	82 23       	and	r24, r18
     2de:	93 23       	and	r25, r19
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_enuReadPin+0x7a>
     2e2:	95 95       	asr	r25
     2e4:	87 95       	ror	r24
     2e6:	6a 95       	dec	r22
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_enuReadPin+0x76>
     2ea:	98 2f       	mov	r25, r24
     2ec:	12 c0       	rjmp	.+36     	; 0x312 <DIO_enuReadPin+0xa6>
     2ee:	20 b3       	in	r18, 0x10	; 16
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	06 2e       	mov	r0, r22
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_enuReadPin+0x90>
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	0a 94       	dec	r0
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_enuReadPin+0x8c>
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	82 23       	and	r24, r18
     304:	93 23       	and	r25, r19
     306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_enuReadPin+0xa0>
     308:	95 95       	asr	r25
     30a:	87 95       	ror	r24
     30c:	6a 95       	dec	r22
     30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_enuReadPin+0x9c>
     310:	98 2f       	mov	r25, r24
     312:	89 2f       	mov	r24, r25
     314:	08 95       	ret

00000316 <DIO_vidWritePort>:
    }
}

void DIO_vidWritePort(_enuGPIOX enuPortNum, u8 u8OutputValue)
{
    switch(enuPortNum)
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	41 f0       	breq	.+16     	; 0x32a <DIO_vidWritePort+0x14>
     31a:	28 f0       	brcs	.+10     	; 0x326 <DIO_vidWritePort+0x10>
     31c:	82 30       	cpi	r24, 0x02	; 2
     31e:	39 f0       	breq	.+14     	; 0x32e <DIO_vidWritePort+0x18>
     320:	83 30       	cpi	r24, 0x03	; 3
     322:	39 f0       	breq	.+14     	; 0x332 <DIO_vidWritePort+0x1c>
     324:	08 95       	ret
    {
        case GPIOA:
            PORTA = u8OutputValue;
     326:	6b bb       	out	0x1b, r22	; 27
            break;
     328:	08 95       	ret
        case GPIOB:
            PORTB = u8OutputValue;
     32a:	68 bb       	out	0x18, r22	; 24
            break;
     32c:	08 95       	ret
        case GPIOC:
            PORTC = u8OutputValue;
     32e:	65 bb       	out	0x15, r22	; 21
            break;
     330:	08 95       	ret
        case GPIOD:
            PORTD = u8OutputValue;
     332:	62 bb       	out	0x12, r22	; 18
     334:	08 95       	ret

00000336 <DIO_vidSetLowNibbleMode>:
    }
}


void DIO_vidSetLowNibbleMode(_enuGPIOX enuPortNum, _enuMODE enuMODE)
{
     336:	cf 93       	push	r28
     338:	c8 2f       	mov	r28, r24
    if(enuMODE == OUTPUT)
     33a:	61 30       	cpi	r22, 0x01	; 1
     33c:	a1 f4       	brne	.+40     	; 0x366 <DIO_vidSetLowNibbleMode+0x30>
    {
        DIO_vidSetPinMode(enuPortNum, PIN0, OUTPUT);
     33e:	41 e0       	ldi	r20, 0x01	; 1
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN1, OUTPUT);
     346:	41 e0       	ldi	r20, 0x01	; 1
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	8c 2f       	mov	r24, r28
     34c:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN2, OUTPUT);
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	62 e0       	ldi	r22, 0x02	; 2
     354:	8c 2f       	mov	r24, r28
     356:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN3, OUTPUT);
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	63 e0       	ldi	r22, 0x03	; 3
     35e:	8c 2f       	mov	r24, r28
     360:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     364:	13 c0       	rjmp	.+38     	; 0x38c <DIO_vidSetLowNibbleMode+0x56>
    }
    else
    {
        DIO_vidSetPinMode(enuPortNum, PIN0, INPUT);
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN1, INPUT);
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	8c 2f       	mov	r24, r28
     374:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN2, INPUT);
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	62 e0       	ldi	r22, 0x02	; 2
     37c:	8c 2f       	mov	r24, r28
     37e:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN3, INPUT);
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	63 e0       	ldi	r22, 0x03	; 3
     386:	8c 2f       	mov	r24, r28
     388:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
    }
}
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <DIO_vidSetHighNibbleMode>:

void DIO_vidSetHighNibbleMode(_enuGPIOX enuPortNum, _enuMODE enuMODE)
{
     390:	cf 93       	push	r28
     392:	c8 2f       	mov	r28, r24
    if(enuMODE == OUTPUT)
     394:	61 30       	cpi	r22, 0x01	; 1
     396:	a1 f4       	brne	.+40     	; 0x3c0 <DIO_vidSetHighNibbleMode+0x30>
    {
        DIO_vidSetPinMode(enuPortNum, PIN4, OUTPUT);
     398:	41 e0       	ldi	r20, 0x01	; 1
     39a:	64 e0       	ldi	r22, 0x04	; 4
     39c:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN5, OUTPUT);
     3a0:	41 e0       	ldi	r20, 0x01	; 1
     3a2:	65 e0       	ldi	r22, 0x05	; 5
     3a4:	8c 2f       	mov	r24, r28
     3a6:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN6, OUTPUT);
     3aa:	41 e0       	ldi	r20, 0x01	; 1
     3ac:	66 e0       	ldi	r22, 0x06	; 6
     3ae:	8c 2f       	mov	r24, r28
     3b0:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN7, OUTPUT);
     3b4:	41 e0       	ldi	r20, 0x01	; 1
     3b6:	67 e0       	ldi	r22, 0x07	; 7
     3b8:	8c 2f       	mov	r24, r28
     3ba:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
     3be:	13 c0       	rjmp	.+38     	; 0x3e6 <DIO_vidSetHighNibbleMode+0x56>
    }
    else
    {
        DIO_vidSetPinMode(enuPortNum, PIN4, INPUT);
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	64 e0       	ldi	r22, 0x04	; 4
     3c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN5, INPUT);
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	65 e0       	ldi	r22, 0x05	; 5
     3cc:	8c 2f       	mov	r24, r28
     3ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN6, INPUT);
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	66 e0       	ldi	r22, 0x06	; 6
     3d6:	8c 2f       	mov	r24, r28
     3d8:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
        DIO_vidSetPinMode(enuPortNum, PIN7, INPUT);
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	67 e0       	ldi	r22, 0x07	; 7
     3e0:	8c 2f       	mov	r24, r28
     3e2:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
    }
}
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <DIO_vidWriteLowNibble>:

void DIO_vidWriteLowNibble(_enuGPIOX enuPortNum, u8 u8OutputValue)
{
    u8OutputValue &= 0x0f;
     3ea:	6f 70       	andi	r22, 0x0F	; 15
    switch(enuPortNum)
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	69 f0       	breq	.+26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f0:	28 f0       	brcs	.+10     	; 0x3fc <DIO_vidWriteLowNibble+0x12>
     3f2:	82 30       	cpi	r24, 0x02	; 2
     3f4:	89 f0       	breq	.+34     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	b1 f0       	breq	.+44     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3fa:	08 95       	ret
    {
        case GPIOA:
            PORTA &= 0xf0;
     3fc:	8b b3       	in	r24, 0x1b	; 27
     3fe:	80 7f       	andi	r24, 0xF0	; 240
     400:	8b bb       	out	0x1b, r24	; 27
            PORTA |= u8OutputValue;
     402:	8b b3       	in	r24, 0x1b	; 27
     404:	68 2b       	or	r22, r24
     406:	6b bb       	out	0x1b, r22	; 27
            break;
     408:	08 95       	ret
        case GPIOB:
            PORTB &= 0xf0;
     40a:	88 b3       	in	r24, 0x18	; 24
     40c:	80 7f       	andi	r24, 0xF0	; 240
     40e:	88 bb       	out	0x18, r24	; 24
            PORTB |= u8OutputValue;
     410:	88 b3       	in	r24, 0x18	; 24
     412:	68 2b       	or	r22, r24
     414:	68 bb       	out	0x18, r22	; 24
            break;
     416:	08 95       	ret
        case GPIOC:
            PORTC &= 0xf0;
     418:	85 b3       	in	r24, 0x15	; 21
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	85 bb       	out	0x15, r24	; 21
            PORTC |= u8OutputValue;
     41e:	85 b3       	in	r24, 0x15	; 21
     420:	68 2b       	or	r22, r24
     422:	65 bb       	out	0x15, r22	; 21
            break;
     424:	08 95       	ret
        case GPIOD:
            PORTD &= 0xf0;
     426:	82 b3       	in	r24, 0x12	; 18
     428:	80 7f       	andi	r24, 0xF0	; 240
     42a:	82 bb       	out	0x12, r24	; 18
            PORTD |= u8OutputValue;
     42c:	82 b3       	in	r24, 0x12	; 18
     42e:	68 2b       	or	r22, r24
     430:	62 bb       	out	0x12, r22	; 18
     432:	08 95       	ret

00000434 <DIO_vidWriteHighNibble>:
    }
}

void DIO_vidWriteHighNibble(_enuGPIOX enuPortNum, u8 u8OutputValue)
{
    u8OutputValue &= 0xf0;
     434:	60 7f       	andi	r22, 0xF0	; 240
    switch(enuPortNum)
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	69 f0       	breq	.+26     	; 0x454 <DIO_vidWriteHighNibble+0x20>
     43a:	28 f0       	brcs	.+10     	; 0x446 <DIO_vidWriteHighNibble+0x12>
     43c:	82 30       	cpi	r24, 0x02	; 2
     43e:	89 f0       	breq	.+34     	; 0x462 <DIO_vidWriteHighNibble+0x2e>
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	b1 f0       	breq	.+44     	; 0x470 <DIO_vidWriteHighNibble+0x3c>
     444:	08 95       	ret
    {
        case GPIOA:
            PORTA &= 0x0f;
     446:	8b b3       	in	r24, 0x1b	; 27
     448:	8f 70       	andi	r24, 0x0F	; 15
     44a:	8b bb       	out	0x1b, r24	; 27
            PORTA |= u8OutputValue;
     44c:	8b b3       	in	r24, 0x1b	; 27
     44e:	68 2b       	or	r22, r24
     450:	6b bb       	out	0x1b, r22	; 27
            break;
     452:	08 95       	ret
        case GPIOB:
            PORTB &= 0x0f;
     454:	88 b3       	in	r24, 0x18	; 24
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	88 bb       	out	0x18, r24	; 24
            PORTB |= u8OutputValue;
     45a:	88 b3       	in	r24, 0x18	; 24
     45c:	68 2b       	or	r22, r24
     45e:	68 bb       	out	0x18, r22	; 24
            break;
     460:	08 95       	ret
        case GPIOC:
            PORTC &= 0x0f;
     462:	85 b3       	in	r24, 0x15	; 21
     464:	8f 70       	andi	r24, 0x0F	; 15
     466:	85 bb       	out	0x15, r24	; 21
            PORTC |= u8OutputValue;
     468:	85 b3       	in	r24, 0x15	; 21
     46a:	68 2b       	or	r22, r24
     46c:	65 bb       	out	0x15, r22	; 21
            break;
     46e:	08 95       	ret
        case GPIOD:
            PORTD &= 0x0f;
     470:	82 b3       	in	r24, 0x12	; 18
     472:	8f 70       	andi	r24, 0x0F	; 15
     474:	82 bb       	out	0x12, r24	; 18
            PORTD |= u8OutputValue;
     476:	82 b3       	in	r24, 0x12	; 18
     478:	68 2b       	or	r22, r24
     47a:	62 bb       	out	0x12, r22	; 18
     47c:	08 95       	ret

0000047e <KPD_vidInit>:
#include "KPD_config.h"



void KPD_vidInit(_enuGPIOX enuPortNum, _enuNIBBLE enuOutNibble, _enuNIBBLE enuInNibble)
{
     47e:	cf 93       	push	r28
     480:	c8 2f       	mov	r28, r24
    if (enuOutNibble == LOW_NIBBLE)
     482:	61 11       	cpse	r22, r1
     484:	0c c0       	rjmp	.+24     	; 0x49e <KPD_vidInit+0x20>
    {
        DIO_vidSetLowNibbleMode(enuPortNum, OUTPUT);
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vidSetLowNibbleMode>
        DIO_vidSetHighNibbleMode(enuPortNum, INPUT);
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	8c 2f       	mov	r24, r28
     490:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_vidSetHighNibbleMode>
        DIO_vidWritePort(enuPortNum, 0xF0);
     494:	60 ef       	ldi	r22, 0xF0	; 240
     496:	8c 2f       	mov	r24, r28
     498:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_vidWritePort>
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <KPD_vidInit+0x36>
    }
    else
    {
        DIO_vidSetLowNibbleMode(enuPortNum, INPUT);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vidSetLowNibbleMode>
        DIO_vidSetHighNibbleMode(enuPortNum, OUTPUT);
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	8c 2f       	mov	r24, r28
     4a8:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_vidSetHighNibbleMode>
        DIO_vidWriteLowNibble(enuPortNum, 0x0F);
     4ac:	6f e0       	ldi	r22, 0x0F	; 15
     4ae:	8c 2f       	mov	r24, r28
     4b0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
    }
    
}
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <KPD_u8GetPressedKey>:
u8 KPD_u8GetPressedKey(_enuGPIOX enuPortNum, _enuNIBBLE enuOutNibble, _enuNIBBLE enuInNibble)
{
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	60 97       	sbiw	r28, 0x10	; 16
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	08 2f       	mov	r16, r24
    u8 arr[4][4]={{'1','2','3','%'},
     4d4:	80 e1       	ldi	r24, 0x10	; 16
     4d6:	e4 e6       	ldi	r30, 0x64	; 100
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	de 01       	movw	r26, r28
     4dc:	11 96       	adiw	r26, 0x01	; 1
     4de:	01 90       	ld	r0, Z+
     4e0:	0d 92       	st	X+, r0
     4e2:	8a 95       	dec	r24
     4e4:	e1 f7       	brne	.-8      	; 0x4de <KPD_u8GetPressedKey+0x26>
                  {'7','8','9','-'},
                  {'C','0','=','+'}};
	u8 u8Row , u8Coloumn ;
    _enuOUTPUT enuReadValue;
	u8 Return_val= NOT_PRESSRD;
    if (enuOutNibble == LOW_NIBBLE)
     4e6:	61 11       	cpse	r22, r1
     4e8:	23 c0       	rjmp	.+70     	; 0x530 <KPD_u8GetPressedKey+0x78>
     4ea:	f1 2c       	mov	r15, r1
    {
        for (u8Row = 0; u8Row < 4; u8Row++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
     4ec:	6f e0       	ldi	r22, 0x0F	; 15
     4ee:	80 2f       	mov	r24, r16
     4f0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
            DIO_vidWritePin(enuPortNum, u8Row, LOW);
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	6f 2d       	mov	r22, r15
     4f8:	80 2f       	mov	r24, r16
     4fa:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
            for (u8Coloumn = 0; u8Coloumn < 4; u8Coloumn++)
     4fe:	10 e0       	ldi	r17, 0x00	; 0
            {
                enuReadValue = DIO_enuReadPin(enuPortNum,(u8Coloumn+4));
     500:	64 e0       	ldi	r22, 0x04	; 4
     502:	61 0f       	add	r22, r17
     504:	80 2f       	mov	r24, r16
     506:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_enuReadPin>
                if (enuReadValue == LOW)
     50a:	81 11       	cpse	r24, r1
     50c:	0d c0       	rjmp	.+26     	; 0x528 <KPD_u8GetPressedKey+0x70>
                {
                    Return_val = arr[u8Row][u8Coloumn];
     50e:	e1 e0       	ldi	r30, 0x01	; 1
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	ec 0f       	add	r30, r28
     514:	fd 1f       	adc	r31, r29
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	f8 9e       	mul	r15, r24
     51a:	e0 0d       	add	r30, r0
     51c:	f1 1d       	adc	r31, r1
     51e:	11 24       	eor	r1, r1
     520:	e1 0f       	add	r30, r17
     522:	f1 1d       	adc	r31, r1
     524:	80 81       	ld	r24, Z
     526:	32 c0       	rjmp	.+100    	; 0x58c <KPD_u8GetPressedKey+0xd4>
    {
        for (u8Row = 0; u8Row < 4; u8Row++)
        {
            DIO_vidWriteLowNibble(enuPortNum, 0x0F);
            DIO_vidWritePin(enuPortNum, u8Row, LOW);
            for (u8Coloumn = 0; u8Coloumn < 4; u8Coloumn++)
     528:	1f 5f       	subi	r17, 0xFF	; 255
     52a:	14 30       	cpi	r17, 0x04	; 4
     52c:	49 f7       	brne	.-46     	; 0x500 <KPD_u8GetPressedKey+0x48>
     52e:	23 c0       	rjmp	.+70     	; 0x576 <KPD_u8GetPressedKey+0xbe>
     530:	f1 2c       	mov	r15, r1
    }
    else
    {
       for (u8Row = 0; u8Row < 4; u8Row++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
     532:	60 ef       	ldi	r22, 0xF0	; 240
     534:	80 2f       	mov	r24, r16
     536:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_vidWriteHighNibble>
            DIO_vidWritePin(enuPortNum, (u8Row+4), LOW);
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	6f 0d       	add	r22, r15
     540:	80 2f       	mov	r24, r16
     542:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
            for (u8Coloumn = 0; u8Coloumn < 4; u8Coloumn++)
     546:	10 e0       	ldi	r17, 0x00	; 0
            {
                enuReadValue = DIO_enuReadPin(enuPortNum,(u8Coloumn));
     548:	61 2f       	mov	r22, r17
     54a:	80 2f       	mov	r24, r16
     54c:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_enuReadPin>
                if (enuReadValue == LOW)
     550:	81 11       	cpse	r24, r1
     552:	0d c0       	rjmp	.+26     	; 0x56e <KPD_u8GetPressedKey+0xb6>
                {
                    Return_val = arr[u8Row][u8Coloumn];
     554:	e1 e0       	ldi	r30, 0x01	; 1
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	ec 0f       	add	r30, r28
     55a:	fd 1f       	adc	r31, r29
     55c:	84 e0       	ldi	r24, 0x04	; 4
     55e:	f8 9e       	mul	r15, r24
     560:	e0 0d       	add	r30, r0
     562:	f1 1d       	adc	r31, r1
     564:	11 24       	eor	r1, r1
     566:	e1 0f       	add	r30, r17
     568:	f1 1d       	adc	r31, r1
     56a:	80 81       	ld	r24, Z
     56c:	0f c0       	rjmp	.+30     	; 0x58c <KPD_u8GetPressedKey+0xd4>
    {
       for (u8Row = 0; u8Row < 4; u8Row++)
        {
            DIO_vidWriteHighNibble(enuPortNum, 0xF0);
            DIO_vidWritePin(enuPortNum, (u8Row+4), LOW);
            for (u8Coloumn = 0; u8Coloumn < 4; u8Coloumn++)
     56e:	1f 5f       	subi	r17, 0xFF	; 255
     570:	14 30       	cpi	r17, 0x04	; 4
     572:	51 f7       	brne	.-44     	; 0x548 <KPD_u8GetPressedKey+0x90>
     574:	06 c0       	rjmp	.+12     	; 0x582 <KPD_u8GetPressedKey+0xca>
	u8 u8Row , u8Coloumn ;
    _enuOUTPUT enuReadValue;
	u8 Return_val= NOT_PRESSRD;
    if (enuOutNibble == LOW_NIBBLE)
    {
        for (u8Row = 0; u8Row < 4; u8Row++)
     576:	f3 94       	inc	r15
     578:	84 e0       	ldi	r24, 0x04	; 4
     57a:	f8 12       	cpse	r15, r24
     57c:	b7 cf       	rjmp	.-146    	; 0x4ec <KPD_u8GetPressedKey+0x34>
                    Return_val = arr[u8Row][u8Coloumn];
                    break;
                }
				else
				{
					Return_val = 0xFF;
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	05 c0       	rjmp	.+10     	; 0x58c <KPD_u8GetPressedKey+0xd4>
            }  
        }
    }
    else
    {
       for (u8Row = 0; u8Row < 4; u8Row++)
     582:	f3 94       	inc	r15
     584:	84 e0       	ldi	r24, 0x04	; 4
     586:	f8 12       	cpse	r15, r24
     588:	d4 cf       	rjmp	.-88     	; 0x532 <KPD_u8GetPressedKey+0x7a>
     58a:	8f ef       	ldi	r24, 0xFF	; 255
            }  
        } 
    }
    return Return_val;
    
     58c:	60 96       	adiw	r28, 0x10	; 16
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	08 95       	ret

000005a4 <LCD_vidSendEnablePulse>:
	u16 tmpint1 = (u16)tmpval;
	float tmpfrac = tmpval - (float)tmpint1;
	u16 tmpint2 = tmpfrac * 10000;
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
	LCD_vidDisplayString(  str);
}
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     5ae:	8f e1       	ldi	r24, 0x1F	; 31
     5b0:	9e e4       	ldi	r25, 0x4E	; 78
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_vidSendEnablePulse+0xe>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <LCD_vidSendEnablePulse+0x14>
     5b8:	00 00       	nop
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     5c4:	08 95       	ret

000005c6 <LCD_vidSendCmd4bit>:
	_delay_ms(1);
	
}

void LCD_vidSendCmd4bit( u8 u8Cmd)
{
     5c6:	cf 93       	push	r28
     5c8:	c8 2f       	mov	r28, r24
		DIO_vidWriteHighNibble(enuDataPortNum, u8Cmd);
     5ca:	68 2f       	mov	r22, r24
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_vidWriteHighNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, LOW);
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	67 e0       	ldi	r22, 0x07	; 7
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_vidSendEnablePulse>
		DIO_vidWriteHighNibble(enuDataPortNum, u8Cmd<<4);
     5e8:	6c 2f       	mov	r22, r28
     5ea:	62 95       	swap	r22
     5ec:	60 7f       	andi	r22, 0xF0	; 240
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_vidWriteHighNibble>
		DIO_vidWritePin(enuRSPortNum, enuRSPinNum, LOW);
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	67 e0       	ldi	r22, 0x07	; 7
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_vidSendEnablePulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60a:	8f e9       	ldi	r24, 0x9F	; 159
     60c:	9f e0       	ldi	r25, 0x0F	; 15
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <LCD_vidSendCmd4bit+0x48>
     612:	00 c0       	rjmp	.+0      	; 0x614 <LCD_vidSendCmd4bit+0x4e>
     614:	00 00       	nop
		_delay_ms(2);
}
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <LCD_vidInit4bit>:
     61a:	2f ef       	ldi	r18, 0xFF	; 255
     61c:	80 e7       	ldi	r24, 0x70	; 112
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	21 50       	subi	r18, 0x01	; 1
     622:	80 40       	sbci	r24, 0x00	; 0
     624:	90 40       	sbci	r25, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <LCD_vidInit4bit+0x6>
     628:	00 c0       	rjmp	.+0      	; 0x62a <LCD_vidInit4bit+0x10>
     62a:	00 00       	nop


void LCD_vidInit4bit()
{
	_delay_ms(100);
	DIO_vidSetPinMode(enuRSPortNum, enuRSPinNum, OUTPUT);    
     62c:	41 e0       	ldi	r20, 0x01	; 1
     62e:	67 e0       	ldi	r22, 0x07	; 7
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
   	DIO_vidSetPinMode(enuENPortNum, enuENPinNum, OUTPUT);
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>

	DIO_vidSetHighNibbleMode(enuDataPortNum, OUTPUT);
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 c8 01 	call	0x390	; 0x390 <DIO_vidSetHighNibbleMode>
	LCD_vidSendCmd4bit( LCD_RETURN_HOME);
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_vidSendCmd4bit>
     64e:	8f e2       	ldi	r24, 0x2F	; 47
     650:	95 e7       	ldi	r25, 0x75	; 117
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <LCD_vidInit4bit+0x38>
     656:	00 c0       	rjmp	.+0      	; 0x658 <LCD_vidInit4bit+0x3e>
     658:	00 00       	nop
	_delay_ms(15);
	LCD_vidSendCmd4bit( LCD_Function_4BIT_2Lines);
     65a:	88 e2       	ldi	r24, 0x28	; 40
     65c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_vidSendCmd4bit>
     660:	8f ec       	ldi	r24, 0xCF	; 207
     662:	97 e0       	ldi	r25, 0x07	; 7
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <LCD_vidInit4bit+0x4a>
     668:	00 c0       	rjmp	.+0      	; 0x66a <LCD_vidInit4bit+0x50>
     66a:	00 00       	nop
	_delay_ms(1);
	LCD_vidSendCmd4bit( LCD_DISP_ON_CURSOR_BLINK);
     66c:	8f e0       	ldi	r24, 0x0F	; 15
     66e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_vidSendCmd4bit>
     672:	8f ec       	ldi	r24, 0xCF	; 207
     674:	97 e0       	ldi	r25, 0x07	; 7
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <LCD_vidInit4bit+0x5c>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_vidInit4bit+0x62>
     67c:	00 00       	nop
	_delay_ms(1);
	LCD_vidSendCmd4bit( LCD_CLEAR_SCREEN);
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_vidSendCmd4bit>
     684:	8f e1       	ldi	r24, 0x1F	; 31
     686:	9e e4       	ldi	r25, 0x4E	; 78
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <LCD_vidInit4bit+0x6e>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <LCD_vidInit4bit+0x74>
     68e:	00 00       	nop
	_delay_ms(10);
	LCD_vidSendCmd4bit( LCD_ENTRY_MODE);
     690:	86 e0       	ldi	r24, 0x06	; 6
     692:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_vidSendCmd4bit>
     696:	8f ec       	ldi	r24, 0xCF	; 207
     698:	97 e0       	ldi	r25, 0x07	; 7
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_vidInit4bit+0x80>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_vidInit4bit+0x86>
     6a0:	00 00       	nop
     6a2:	08 95       	ret

000006a4 <LCD_vidDisplayChar4bit>:
		LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
		_delay_ms(2);
}

void LCD_vidDisplayChar4bit( u8 u8char)
{
     6a4:	cf 93       	push	r28
     6a6:	c8 2f       	mov	r28, r24

	DIO_vidWriteHighNibble(enuDataPortNum, u8char);
     6a8:	68 2f       	mov	r22, r24
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_vidWriteHighNibble>
	DIO_vidWritePin(enuRSPortNum, enuRSPinNum, HIGH);
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	67 e0       	ldi	r22, 0x07	; 7
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_vidSendEnablePulse>
	DIO_vidWriteHighNibble(enuDataPortNum, u8char<<4);
     6c6:	6c 2f       	mov	r22, r28
     6c8:	62 95       	swap	r22
     6ca:	60 7f       	andi	r22, 0xF0	; 240
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	0e 94 1a 02 	call	0x434	; 0x434 <DIO_vidWriteHighNibble>
	DIO_vidWritePin(enuRSPortNum, enuRSPinNum, HIGH);
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	67 e0       	ldi	r22, 0x07	; 7
     6d6:	83 e0       	ldi	r24, 0x03	; 3
     6d8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	LCD_vidSendEnablePulse(enuENPortNum, enuENPinNum);
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <LCD_vidSendEnablePulse>
     6e8:	8f e9       	ldi	r24, 0x9F	; 159
     6ea:	9f e0       	ldi	r25, 0x0F	; 15
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_vidDisplayChar4bit+0x48>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <LCD_vidDisplayChar4bit+0x4e>
     6f2:	00 00       	nop
	_delay_ms(2);
	
}
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <LCD_voidDisplayString4bit>:

void LCD_voidDisplayString4bit( u8 *ptru8String)
{
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
	while((*ptru8String) != '\0')
     6fe:	88 81       	ld	r24, Y
     700:	88 23       	and	r24, r24
     702:	31 f0       	breq	.+12     	; 0x710 <LCD_voidDisplayString4bit+0x18>
     704:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vidDisplayChar4bit(*ptru8String);
     706:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_vidDisplayChar4bit>
	
}

void LCD_voidDisplayString4bit( u8 *ptru8String)
{
	while((*ptru8String) != '\0')
     70a:	89 91       	ld	r24, Y+
     70c:	81 11       	cpse	r24, r1
     70e:	fb cf       	rjmp	.-10     	; 0x706 <LCD_voidDisplayString4bit+0xe>
	{
		LCD_vidDisplayChar4bit(*ptru8String);
		ptru8String++;
	}
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <LCD_vidClearScreen4bit>:

void LCD_vidClearScreen4bit( )
{
	LCD_vidSendCmd4bit(LCD_CLEAR_SCREEN);
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_vidSendCmd4bit>
     71c:	8f e1       	ldi	r24, 0x1F	; 31
     71e:	9e e4       	ldi	r25, 0x4E	; 78
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <LCD_vidClearScreen4bit+0xa>
     724:	00 c0       	rjmp	.+0      	; 0x726 <LCD_vidClearScreen4bit+0x10>
     726:	00 00       	nop
     728:	08 95       	ret

0000072a <LCD_vidMoveCursor4bit>:
}

void LCD_vidMoveCursor4bit(u8 u8Line, u8 u8Position)
{
	u8 u8data =0;
	if(u8Line < 1 || u8Line > 2 || u8Position < 1 || u8Position > 16)
     72a:	9f ef       	ldi	r25, 0xFF	; 255
     72c:	98 0f       	add	r25, r24
     72e:	92 30       	cpi	r25, 0x02	; 2
     730:	70 f4       	brcc	.+28     	; 0x74e <LCD_vidMoveCursor4bit+0x24>
     732:	9f ef       	ldi	r25, 0xFF	; 255
     734:	96 0f       	add	r25, r22
     736:	90 31       	cpi	r25, 0x10	; 16
     738:	60 f4       	brcc	.+24     	; 0x752 <LCD_vidMoveCursor4bit+0x28>
	{
		u8data = 0x80;
	}
	else if(u8Line == 1)
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	19 f4       	brne	.+6      	; 0x744 <LCD_vidMoveCursor4bit+0x1a>
	{
		u8data = 0x80 + (u8Position - 1);
     73e:	8f e7       	ldi	r24, 0x7F	; 127
     740:	86 0f       	add	r24, r22
     742:	0a c0       	rjmp	.+20     	; 0x758 <LCD_vidMoveCursor4bit+0x2e>
	}
	else if(u8Line == 2)
     744:	82 30       	cpi	r24, 0x02	; 2
     746:	39 f4       	brne	.+14     	; 0x756 <LCD_vidMoveCursor4bit+0x2c>
	{
		u8data = 0xC0 + (u8Position - 1);
     748:	8f eb       	ldi	r24, 0xBF	; 191
     74a:	86 0f       	add	r24, r22
     74c:	05 c0       	rjmp	.+10     	; 0x758 <LCD_vidMoveCursor4bit+0x2e>
void LCD_vidMoveCursor4bit(u8 u8Line, u8 u8Position)
{
	u8 u8data =0;
	if(u8Line < 1 || u8Line > 2 || u8Position < 1 || u8Position > 16)
	{
		u8data = 0x80;
     74e:	80 e8       	ldi	r24, 0x80	; 128
     750:	03 c0       	rjmp	.+6      	; 0x758 <LCD_vidMoveCursor4bit+0x2e>
     752:	80 e8       	ldi	r24, 0x80	; 128
     754:	01 c0       	rjmp	.+2      	; 0x758 <LCD_vidMoveCursor4bit+0x2e>
	_delay_ms(10);
}

void LCD_vidMoveCursor4bit(u8 u8Line, u8 u8Position)
{
	u8 u8data =0;
     756:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if(u8Line == 2)
	{
		u8data = 0xC0 + (u8Position - 1);
	}
	LCD_vidSendCmd4bit( u8data);
     758:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_vidSendCmd4bit>
     75c:	8f ec       	ldi	r24, 0xCF	; 207
     75e:	97 e0       	ldi	r25, 0x07	; 7
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <LCD_vidMoveCursor4bit+0x36>
     764:	00 c0       	rjmp	.+0      	; 0x766 <LCD_vidMoveCursor4bit+0x3c>
     766:	00 00       	nop
     768:	08 95       	ret

0000076a <LCD_vidDisplayNumber4bit>:
	_delay_ms(1);
}

void LCD_vidDisplayNumber4bit(s64 copy_u32Number)
{
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	2b 97       	sbiw	r28, 0x0b	; 11
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
	u8 str[11];
	sprintf(str,"%d",copy_u32Number);
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	7f 93       	push	r23
     788:	6f 93       	push	r22
     78a:	5f 93       	push	r21
     78c:	4f 93       	push	r20
     78e:	3f 93       	push	r19
     790:	2f 93       	push	r18
     792:	82 e8       	ldi	r24, 0x82	; 130
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	8e 01       	movw	r16, r28
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	1f 93       	push	r17
     7a2:	0f 93       	push	r16
     7a4:	0e 94 2b 10 	call	0x2056	; 0x2056 <sprintf>
	LCD_voidDisplayString4bit(str);
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
}
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	2b 96       	adiw	r28, 0x0b	; 11
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <LCD_vidDisplayRealNumber4bit>:

void LCD_vidDisplayRealNumber4bit(s64 Number)
{
     7ce:	7f 92       	push	r7
     7d0:	8f 92       	push	r8
     7d2:	9f 92       	push	r9
     7d4:	af 92       	push	r10
     7d6:	bf 92       	push	r11
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	60 97       	sbiw	r28, 0x10	; 16
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	12 2f       	mov	r17, r18
     7fa:	b3 2f       	mov	r27, r19
     7fc:	f4 2f       	mov	r31, r20
     7fe:	e5 2f       	mov	r30, r21
     800:	76 2e       	mov	r7, r22
     802:	87 2e       	mov	r8, r23
     804:	98 2e       	mov	r9, r24
     806:	a9 2e       	mov	r10, r25
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__cmpdi2_s8>
     80e:	3c f0       	brlt	.+14     	; 0x81e <LCD_vidDisplayRealNumber4bit+0x50>
     810:	0f 2e       	mov	r0, r31
     812:	ff ef       	ldi	r31, 0xFF	; 255
     814:	cf 2e       	mov	r12, r31
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	df 2e       	mov	r13, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	06 c0       	rjmp	.+12     	; 0x82a <LCD_vidDisplayRealNumber4bit+0x5c>
     81e:	0f 2e       	mov	r0, r31
     820:	f4 e7       	ldi	r31, 0x74	; 116
     822:	cf 2e       	mov	r12, r31
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	df 2e       	mov	r13, r31
     828:	f0 2d       	mov	r31, r0
	u32 tmpval = (Number < 0)? -Number : Number;
	sprintf(str,"%s%d", tmpsign, tmpval);
     82a:	01 2f       	mov	r16, r17
     82c:	fb 2e       	mov	r15, r27
     82e:	ef 2e       	mov	r14, r31
     830:	be 2e       	mov	r11, r30
     832:	21 2f       	mov	r18, r17
     834:	3b 2f       	mov	r19, r27
     836:	4f 2f       	mov	r20, r31
     838:	5e 2f       	mov	r21, r30
     83a:	67 2d       	mov	r22, r7
     83c:	78 2d       	mov	r23, r8
     83e:	89 2d       	mov	r24, r9
     840:	9a 2d       	mov	r25, r10
     842:	a0 e0       	ldi	r26, 0x00	; 0
     844:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__cmpdi2_s8>
     848:	34 f4       	brge	.+12     	; 0x856 <LCD_vidDisplayRealNumber4bit+0x88>
     84a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__negdi2>
     84e:	02 2f       	mov	r16, r18
     850:	f3 2e       	mov	r15, r19
     852:	e4 2e       	mov	r14, r20
     854:	b5 2e       	mov	r11, r21
     856:	bf 92       	push	r11
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	df 92       	push	r13
     860:	cf 92       	push	r12
     862:	80 e8       	ldi	r24, 0x80	; 128
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	9f 93       	push	r25
     868:	8f 93       	push	r24
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5f       	subi	r16, 0xFF	; 255
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	1f 93       	push	r17
     872:	0f 93       	push	r16
     874:	0e 94 2b 10 	call	0x2056	; 0x2056 <sprintf>
	LCD_voidDisplayString4bit(str);
     878:	c8 01       	movw	r24, r16
     87a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	60 96       	adiw	r28, 0x10	; 16
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	bf 90       	pop	r11
     8a6:	af 90       	pop	r10
     8a8:	9f 90       	pop	r9
     8aa:	8f 90       	pop	r8
     8ac:	7f 90       	pop	r7
     8ae:	08 95       	ret

000008b0 <END_CALCULATOR>:
	for(i = 0 ; i < p ; i++)
	{
		num *=n;
	}
	return num;
}
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	c2 2e       	mov	r12, r18
     8c2:	d3 2e       	mov	r13, r19
     8c4:	e4 2e       	mov	r14, r20
     8c6:	f5 2e       	mov	r15, r21
     8c8:	06 2f       	mov	r16, r22
     8ca:	17 2f       	mov	r17, r23
     8cc:	d8 2f       	mov	r29, r24
     8ce:	c9 2f       	mov	r28, r25
     8d0:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     8d4:	85 e8       	ldi	r24, 0x85	; 133
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	82 e0       	ldi	r24, 0x02	; 2
     8e0:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
     8e4:	2c 2d       	mov	r18, r12
     8e6:	3d 2d       	mov	r19, r13
     8e8:	4e 2d       	mov	r20, r14
     8ea:	5f 2d       	mov	r21, r15
     8ec:	60 2f       	mov	r22, r16
     8ee:	71 2f       	mov	r23, r17
     8f0:	8d 2f       	mov	r24, r29
     8f2:	9c 2f       	mov	r25, r28
     8f4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_vidDisplayRealNumber4bit>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	83 ed       	ldi	r24, 0xD3	; 211
     8fc:	90 e3       	ldi	r25, 0x30	; 48
     8fe:	21 50       	subi	r18, 0x01	; 1
     900:	80 40       	sbci	r24, 0x00	; 0
     902:	90 40       	sbci	r25, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <END_CALCULATOR+0x4e>
     906:	00 c0       	rjmp	.+0      	; 0x908 <END_CALCULATOR+0x58>
     908:	00 00       	nop
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	08 95       	ret

0000091c <disBinNum>:
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
     926:	8c 01       	movw	r16, r24
     928:	0c 5f       	subi	r16, 0xFC	; 252
     92a:	1f 4f       	sbci	r17, 0xFF	; 255
     92c:	29 91       	ld	r18, Y+
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vidDisplayNumber4bit>
     940:	c0 17       	cp	r28, r16
     942:	d1 07       	cpc	r29, r17
     944:	99 f7       	brne	.-26     	; 0x92c <disBinNum+0x10>
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	08 95       	ret

00000950 <performLogicGate>:
     950:	df 92       	push	r13
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	eb 01       	movw	r28, r22
     960:	da 01       	movw	r26, r20
     962:	f9 01       	movw	r30, r18
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	01 e0       	ldi	r16, 0x01	; 1
     968:	f1 2c       	mov	r15, r1
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	09 f4       	brne	.+2      	; 0x970 <performLogicGate+0x20>
     96e:	48 c0       	rjmp	.+144    	; 0xa00 <performLogicGate+0xb0>
     970:	30 f4       	brcc	.+12     	; 0x97e <performLogicGate+0x2e>
     972:	88 23       	and	r24, r24
     974:	69 f0       	breq	.+26     	; 0x990 <performLogicGate+0x40>
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	09 f0       	breq	.+2      	; 0x97c <performLogicGate+0x2c>
     97a:	85 c0       	rjmp	.+266    	; 0xa86 <performLogicGate+0x136>
     97c:	25 c0       	rjmp	.+74     	; 0x9c8 <performLogicGate+0x78>
     97e:	84 30       	cpi	r24, 0x04	; 4
     980:	09 f4       	brne	.+2      	; 0x984 <performLogicGate+0x34>
     982:	76 c0       	rjmp	.+236    	; 0xa70 <performLogicGate+0x120>
     984:	08 f4       	brcc	.+2      	; 0x988 <performLogicGate+0x38>
     986:	58 c0       	rjmp	.+176    	; 0xa38 <performLogicGate+0xe8>
     988:	85 30       	cpi	r24, 0x05	; 5
     98a:	09 f4       	brne	.+2      	; 0x98e <performLogicGate+0x3e>
     98c:	76 c0       	rjmp	.+236    	; 0xa7a <performLogicGate+0x12a>
     98e:	7b c0       	rjmp	.+246    	; 0xa86 <performLogicGate+0x136>
     990:	01 e0       	ldi	r16, 0x01	; 1
     992:	f1 2c       	mov	r15, r1
     994:	10 e0       	ldi	r17, 0x00	; 0
     996:	e9 2f       	mov	r30, r25
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	d9 01       	movw	r26, r18
     99c:	ae 0f       	add	r26, r30
     99e:	bf 1f       	adc	r27, r31
     9a0:	eb 01       	movw	r28, r22
     9a2:	ce 0f       	add	r28, r30
     9a4:	df 1f       	adc	r29, r31
     9a6:	88 81       	ld	r24, Y
     9a8:	88 23       	and	r24, r24
     9aa:	41 f0       	breq	.+16     	; 0x9bc <performLogicGate+0x6c>
     9ac:	e4 0f       	add	r30, r20
     9ae:	f5 1f       	adc	r31, r21
     9b0:	80 2f       	mov	r24, r16
     9b2:	e0 81       	ld	r30, Z
     9b4:	e1 11       	cpse	r30, r1
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <performLogicGate+0x6e>
     9b8:	8f 2d       	mov	r24, r15
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <performLogicGate+0x6e>
     9bc:	81 2f       	mov	r24, r17
     9be:	8c 93       	st	X, r24
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
     9c2:	94 30       	cpi	r25, 0x04	; 4
     9c4:	40 f3       	brcs	.-48     	; 0x996 <performLogicGate+0x46>
     9c6:	66 c0       	rjmp	.+204    	; 0xa94 <performLogicGate+0x144>
     9c8:	01 e0       	ldi	r16, 0x01	; 1
     9ca:	f1 2c       	mov	r15, r1
     9cc:	11 e0       	ldi	r17, 0x01	; 1
     9ce:	e9 2f       	mov	r30, r25
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	d9 01       	movw	r26, r18
     9d4:	ae 0f       	add	r26, r30
     9d6:	bf 1f       	adc	r27, r31
     9d8:	eb 01       	movw	r28, r22
     9da:	ce 0f       	add	r28, r30
     9dc:	df 1f       	adc	r29, r31
     9de:	88 81       	ld	r24, Y
     9e0:	81 11       	cpse	r24, r1
     9e2:	08 c0       	rjmp	.+16     	; 0x9f4 <performLogicGate+0xa4>
     9e4:	e4 0f       	add	r30, r20
     9e6:	f5 1f       	adc	r31, r21
     9e8:	80 2f       	mov	r24, r16
     9ea:	e0 81       	ld	r30, Z
     9ec:	e1 11       	cpse	r30, r1
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <performLogicGate+0xa6>
     9f0:	8f 2d       	mov	r24, r15
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <performLogicGate+0xa6>
     9f4:	81 2f       	mov	r24, r17
     9f6:	8c 93       	st	X, r24
     9f8:	9f 5f       	subi	r25, 0xFF	; 255
     9fa:	94 30       	cpi	r25, 0x04	; 4
     9fc:	40 f3       	brcs	.-48     	; 0x9ce <performLogicGate+0x7e>
     9fe:	4a c0       	rjmp	.+148    	; 0xa94 <performLogicGate+0x144>
     a00:	01 e0       	ldi	r16, 0x01	; 1
     a02:	f1 2c       	mov	r15, r1
     a04:	11 e0       	ldi	r17, 0x01	; 1
     a06:	e9 2f       	mov	r30, r25
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	d9 01       	movw	r26, r18
     a0c:	ae 0f       	add	r26, r30
     a0e:	bf 1f       	adc	r27, r31
     a10:	eb 01       	movw	r28, r22
     a12:	ce 0f       	add	r28, r30
     a14:	df 1f       	adc	r29, r31
     a16:	88 81       	ld	r24, Y
     a18:	88 23       	and	r24, r24
     a1a:	41 f0       	breq	.+16     	; 0xa2c <performLogicGate+0xdc>
     a1c:	e4 0f       	add	r30, r20
     a1e:	f5 1f       	adc	r31, r21
     a20:	80 2f       	mov	r24, r16
     a22:	e0 81       	ld	r30, Z
     a24:	ee 23       	and	r30, r30
     a26:	19 f0       	breq	.+6      	; 0xa2e <performLogicGate+0xde>
     a28:	8f 2d       	mov	r24, r15
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <performLogicGate+0xde>
     a2c:	81 2f       	mov	r24, r17
     a2e:	8c 93       	st	X, r24
     a30:	9f 5f       	subi	r25, 0xFF	; 255
     a32:	94 30       	cpi	r25, 0x04	; 4
     a34:	40 f3       	brcs	.-48     	; 0xa06 <performLogicGate+0xb6>
     a36:	2e c0       	rjmp	.+92     	; 0xa94 <performLogicGate+0x144>
     a38:	01 e0       	ldi	r16, 0x01	; 1
     a3a:	f1 2c       	mov	r15, r1
     a3c:	10 e0       	ldi	r17, 0x00	; 0
     a3e:	e9 2f       	mov	r30, r25
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	d9 01       	movw	r26, r18
     a44:	ae 0f       	add	r26, r30
     a46:	bf 1f       	adc	r27, r31
     a48:	eb 01       	movw	r28, r22
     a4a:	ce 0f       	add	r28, r30
     a4c:	df 1f       	adc	r29, r31
     a4e:	88 81       	ld	r24, Y
     a50:	81 11       	cpse	r24, r1
     a52:	08 c0       	rjmp	.+16     	; 0xa64 <performLogicGate+0x114>
     a54:	e4 0f       	add	r30, r20
     a56:	f5 1f       	adc	r31, r21
     a58:	80 2f       	mov	r24, r16
     a5a:	e0 81       	ld	r30, Z
     a5c:	ee 23       	and	r30, r30
     a5e:	19 f0       	breq	.+6      	; 0xa66 <performLogicGate+0x116>
     a60:	8f 2d       	mov	r24, r15
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <performLogicGate+0x116>
     a64:	81 2f       	mov	r24, r17
     a66:	8c 93       	st	X, r24
     a68:	9f 5f       	subi	r25, 0xFF	; 255
     a6a:	94 30       	cpi	r25, 0x04	; 4
     a6c:	40 f3       	brcs	.-48     	; 0xa3e <performLogicGate+0xee>
     a6e:	12 c0       	rjmp	.+36     	; 0xa94 <performLogicGate+0x144>
     a70:	e8 80       	ld	r14, Y
     a72:	1c 91       	ld	r17, X
     a74:	1e 25       	eor	r17, r14
     a76:	10 83       	st	Z, r17
     a78:	06 c0       	rjmp	.+12     	; 0xa86 <performLogicGate+0x136>
     a7a:	10 2f       	mov	r17, r16
     a7c:	d8 80       	ld	r13, Y
     a7e:	ec 90       	ld	r14, X
     a80:	de 10       	cpse	r13, r14
     a82:	1f 2d       	mov	r17, r15
     a84:	10 83       	st	Z, r17
     a86:	9f 5f       	subi	r25, 0xFF	; 255
     a88:	21 96       	adiw	r28, 0x01	; 1
     a8a:	11 96       	adiw	r26, 0x01	; 1
     a8c:	31 96       	adiw	r30, 0x01	; 1
     a8e:	94 30       	cpi	r25, 0x04	; 4
     a90:	09 f0       	breq	.+2      	; 0xa94 <performLogicGate+0x144>
     a92:	6b cf       	rjmp	.-298    	; 0x96a <performLogicGate+0x1a>
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	08 95       	ret

00000aa4 <showLogicEquation>:
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	8c 01       	movw	r16, r24
     aae:	eb 01       	movw	r28, r22
     ab0:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     ab4:	c8 01       	movw	r24, r16
     ab6:	0e 94 8e 04 	call	0x91c	; 0x91c <disBinNum>
     aba:	8f e8       	ldi	r24, 0x8F	; 143
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     ac2:	ce 01       	movw	r24, r28
     ac4:	0e 94 8e 04 	call	0x91c	; 0x91c <disBinNum>
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <ArthWrongAnswer>:
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	6b 01       	movw	r12, r22
     ae8:	7c 01       	movw	r14, r24
     aea:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     aee:	85 e9       	ldi	r24, 0x95	; 149
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     af6:	41 e0       	ldi	r20, 0x01	; 1
     af8:	64 e0       	ldi	r22, 0x04	; 4
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     b00:	2f ef       	ldi	r18, 0xFF	; 255
     b02:	89 e6       	ldi	r24, 0x69	; 105
     b04:	98 e1       	ldi	r25, 0x18	; 24
     b06:	21 50       	subi	r18, 0x01	; 1
     b08:	80 40       	sbci	r24, 0x00	; 0
     b0a:	90 40       	sbci	r25, 0x00	; 0
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <ArthWrongAnswer+0x2c>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <ArthWrongAnswer+0x36>
     b10:	00 00       	nop
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	64 e0       	ldi	r22, 0x04	; 4
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     b1c:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     b20:	84 ea       	ldi	r24, 0xA4	; 164
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
     b30:	d7 01       	movw	r26, r14
     b32:	c6 01       	movw	r24, r12
     b34:	2c 2d       	mov	r18, r12
     b36:	39 2f       	mov	r19, r25
     b38:	4a 2f       	mov	r20, r26
     b3a:	5b 2f       	mov	r21, r27
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vidDisplayNumber4bit>
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	08 95       	ret

00000b56 <LogicWrongAnswer>:
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	8c 01       	movw	r16, r24
     b60:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     b64:	83 eb       	ldi	r24, 0xB3	; 179
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     b76:	2f ef       	ldi	r18, 0xFF	; 255
     b78:	89 e6       	ldi	r24, 0x69	; 105
     b7a:	98 e1       	ldi	r25, 0x18	; 24
     b7c:	21 50       	subi	r18, 0x01	; 1
     b7e:	80 40       	sbci	r24, 0x00	; 0
     b80:	90 40       	sbci	r25, 0x00	; 0
     b82:	e1 f7       	brne	.-8      	; 0xb7c <LogicWrongAnswer+0x26>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <LogicWrongAnswer+0x30>
     b86:	00 00       	nop
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	64 e0       	ldi	r22, 0x04	; 4
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
     b92:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     b96:	84 ea       	ldi	r24, 0xA4	; 164
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
     ba6:	e8 01       	movw	r28, r16
     ba8:	0c 5f       	subi	r16, 0xFC	; 252
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	29 91       	ld	r18, Y+
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vidDisplayNumber4bit>
     bc0:	c0 17       	cp	r28, r16
     bc2:	d1 07       	cpc	r29, r17
     bc4:	99 f7       	brne	.-26     	; 0xbac <LogicWrongAnswer+0x56>
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <binToDec>:
     bd0:	8f 92       	push	r8
     bd2:	9f 92       	push	r9
     bd4:	af 92       	push	r10
     bd6:	bf 92       	push	r11
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	fc 01       	movw	r30, r24
     bea:	90 81       	ld	r25, Z
     bec:	99 23       	and	r25, r25
     bee:	31 f1       	breq	.+76     	; 0xc3c <binToDec+0x6c>
     bf0:	8f 01       	movw	r16, r30
     bf2:	0f 5f       	subi	r16, 0xFF	; 255
     bf4:	1f 4f       	sbci	r17, 0xFF	; 255
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
     bfa:	cc 0f       	add	r28, r28
     bfc:	dd 1f       	adc	r29, r29
     bfe:	c9 0f       	add	r28, r25
     c00:	d1 1d       	adc	r29, r1
     c02:	e0 97       	sbiw	r28, 0x30	; 48
     c04:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     c08:	4e 01       	movw	r8, r28
     c0a:	2c 2f       	mov	r18, r28
     c0c:	39 2d       	mov	r19, r9
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vidDisplayNumber4bit>
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	89 e6       	ldi	r24, 0x69	; 105
     c22:	98 e1       	ldi	r25, 0x18	; 24
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	80 40       	sbci	r24, 0x00	; 0
     c28:	90 40       	sbci	r25, 0x00	; 0
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <binToDec+0x54>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <binToDec+0x5e>
     c2e:	00 00       	nop
     c30:	f8 01       	movw	r30, r16
     c32:	91 91       	ld	r25, Z+
     c34:	8f 01       	movw	r16, r30
     c36:	91 11       	cpse	r25, r1
     c38:	e0 cf       	rjmp	.-64     	; 0xbfa <binToDec+0x2a>
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <binToDec+0x70>
     c3c:	c0 e0       	ldi	r28, 0x00	; 0
     c3e:	d0 e0       	ldi	r29, 0x00	; 0
     c40:	ce 01       	movw	r24, r28
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	cf 90       	pop	r12
     c52:	bf 90       	pop	r11
     c54:	af 90       	pop	r10
     c56:	9f 90       	pop	r9
     c58:	8f 90       	pop	r8
     c5a:	08 95       	ret

00000c5c <decToBin>:
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	71 f0       	breq	.+28     	; 0xc7c <decToBin+0x20>
     c60:	fb 01       	movw	r30, r22
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	4f 5f       	subi	r20, 0xFF	; 255
     c68:	5f 4f       	sbci	r21, 0xFF	; 255
     c6a:	28 2f       	mov	r18, r24
     c6c:	21 70       	andi	r18, 0x01	; 1
     c6e:	20 5d       	subi	r18, 0xD0	; 208
     c70:	21 93       	st	Z+, r18
     c72:	96 95       	lsr	r25
     c74:	87 95       	ror	r24
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	b1 f7       	brne	.-20     	; 0xc66 <decToBin+0xa>
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <decToBin+0x24>
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	fb 01       	movw	r30, r22
     c82:	e4 0f       	add	r30, r20
     c84:	f5 1f       	adc	r31, r21
     c86:	10 82       	st	Z, r1
     c88:	cb 01       	movw	r24, r22
     c8a:	0e 94 1b 10 	call	0x2036	; 0x2036 <strrev>
     c8e:	08 95       	ret

00000c90 <getFromKeypad>:
     c90:	cf 93       	push	r28
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <KPD_u8GetPressedKey>
     c9c:	c8 2f       	mov	r28, r24
     c9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ca0:	c1 f3       	breq	.-16     	; 0xc92 <getFromKeypad+0x2>
     ca2:	41 e0       	ldi	r20, 0x01	; 1
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <KPD_u8GetPressedKey>
     cac:	c8 17       	cp	r28, r24
     cae:	c9 f3       	breq	.-14     	; 0xca2 <getFromKeypad+0x12>
     cb0:	2f ef       	ldi	r18, 0xFF	; 255
     cb2:	81 ee       	ldi	r24, 0xE1	; 225
     cb4:	94 e0       	ldi	r25, 0x04	; 4
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	80 40       	sbci	r24, 0x00	; 0
     cba:	90 40       	sbci	r25, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <getFromKeypad+0x26>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <getFromKeypad+0x30>
     cc0:	00 00       	nop
     cc2:	8c 2f       	mov	r24, r28
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <CONVERTER_BIN_TO_DEC>:
     cc8:	8f 92       	push	r8
     cca:	9f 92       	push	r9
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	61 97       	sbiw	r28, 0x11	; 17
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	7c 01       	movw	r14, r24
     cfa:	00 e0       	ldi	r16, 0x00	; 0
     cfc:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
     d00:	18 2f       	mov	r17, r24
     d02:	80 ed       	ldi	r24, 0xD0	; 208
     d04:	81 0f       	add	r24, r17
     d06:	82 30       	cpi	r24, 0x02	; 2
     d08:	e8 f0       	brcs	.+58     	; 0xd44 <CONVERTER_BIN_TO_DEC+0x7c>
     d0a:	13 34       	cpi	r17, 0x43	; 67
     d0c:	79 f4       	brne	.+30     	; 0xd2c <CONVERTER_BIN_TO_DEC+0x64>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
     d14:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     d18:	9f ef       	ldi	r25, 0xFF	; 255
     d1a:	e9 e6       	ldi	r30, 0x69	; 105
     d1c:	f8 e1       	ldi	r31, 0x18	; 24
     d1e:	91 50       	subi	r25, 0x01	; 1
     d20:	e0 40       	sbci	r30, 0x00	; 0
     d22:	f0 40       	sbci	r31, 0x00	; 0
     d24:	e1 f7       	brne	.-8      	; 0xd1e <CONVERTER_BIN_TO_DEC+0x56>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <CONVERTER_BIN_TO_DEC+0x60>
     d28:	00 00       	nop
     d2a:	39 c0       	rjmp	.+114    	; 0xd9e <CONVERTER_BIN_TO_DEC+0xd6>
     d2c:	1d 33       	cpi	r17, 0x3D	; 61
     d2e:	31 f7       	brne	.-52     	; 0xcfc <CONVERTER_BIN_TO_DEC+0x34>
     d30:	e1 e0       	ldi	r30, 0x01	; 1
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	ec 0f       	add	r30, r28
     d36:	fd 1f       	adc	r31, r29
     d38:	e0 0f       	add	r30, r16
     d3a:	f1 1d       	adc	r31, r1
     d3c:	10 82       	st	Z, r1
     d3e:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     d42:	0a c0       	rjmp	.+20     	; 0xd58 <CONVERTER_BIN_TO_DEC+0x90>
     d44:	81 2f       	mov	r24, r17
     d46:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_vidDisplayChar4bit>
     d4a:	f7 01       	movw	r30, r14
     d4c:	11 93       	st	Z+, r17
     d4e:	7f 01       	movw	r14, r30
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	00 31       	cpi	r16, 0x10	; 16
     d54:	99 f6       	brne	.-90     	; 0xcfc <CONVERTER_BIN_TO_DEC+0x34>
     d56:	19 8a       	std	Y+17, r1	; 0x11
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <binToDec>
     d60:	4c 01       	movw	r8, r24
     d62:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     d66:	84 ec       	ldi	r24, 0xC4	; 196
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
     d76:	28 2d       	mov	r18, r8
     d78:	39 2d       	mov	r19, r9
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vidDisplayNumber4bit>
     d8a:	ff ef       	ldi	r31, 0xFF	; 255
     d8c:	27 ea       	ldi	r18, 0xA7	; 167
     d8e:	81 e6       	ldi	r24, 0x61	; 97
     d90:	f1 50       	subi	r31, 0x01	; 1
     d92:	20 40       	sbci	r18, 0x00	; 0
     d94:	80 40       	sbci	r24, 0x00	; 0
     d96:	e1 f7       	brne	.-8      	; 0xd90 <CONVERTER_BIN_TO_DEC+0xc8>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <CONVERTER_BIN_TO_DEC+0xd2>
     d9a:	00 00       	nop
     d9c:	a9 cf       	rjmp	.-174    	; 0xcf0 <CONVERTER_BIN_TO_DEC+0x28>
     d9e:	61 96       	adiw	r28, 0x11	; 17
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	08 95       	ret

00000dc4 <getLogicResult>:
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	7b 01       	movw	r14, r22
     dd2:	8c 01       	movw	r16, r24
     dd4:	ec 01       	movw	r28, r24
     dd6:	24 96       	adiw	r28, 0x04	; 4
     dd8:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
     ddc:	90 ed       	ldi	r25, 0xD0	; 208
     dde:	98 0f       	add	r25, r24
     de0:	92 30       	cpi	r25, 0x02	; 2
     de2:	88 f0       	brcs	.+34     	; 0xe06 <getLogicResult+0x42>
     de4:	83 34       	cpi	r24, 0x43	; 67
     de6:	c1 f7       	brne	.-16     	; 0xdd8 <getLogicResult+0x14>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
     dee:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     df2:	2f ef       	ldi	r18, 0xFF	; 255
     df4:	89 e6       	ldi	r24, 0x69	; 105
     df6:	98 e1       	ldi	r25, 0x18	; 24
     df8:	21 50       	subi	r18, 0x01	; 1
     dfa:	80 40       	sbci	r24, 0x00	; 0
     dfc:	90 40       	sbci	r25, 0x00	; 0
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <getLogicResult+0x34>
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <getLogicResult+0x3e>
     e02:	00 00       	nop
     e04:	18 c0       	rjmp	.+48     	; 0xe36 <getLogicResult+0x72>
     e06:	f8 01       	movw	r30, r16
     e08:	41 91       	ld	r20, Z+
     e0a:	8f 01       	movw	r16, r30
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	20 53       	subi	r18, 0x30	; 48
     e14:	31 09       	sbc	r19, r1
     e16:	42 17       	cp	r20, r18
     e18:	53 07       	cpc	r21, r19
     e1a:	11 f0       	breq	.+4      	; 0xe20 <getLogicResult+0x5c>
     e1c:	f7 01       	movw	r30, r14
     e1e:	10 82       	st	Z, r1
     e20:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_vidDisplayChar4bit>
     e24:	0c 17       	cp	r16, r28
     e26:	1d 07       	cpc	r17, r29
     e28:	b9 f6       	brne	.-82     	; 0xdd8 <getLogicResult+0x14>
     e2a:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	08 95       	ret

00000e44 <arrToInt>:
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	dc 01       	movw	r26, r24
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	86 0f       	add	r24, r22
     e58:	fd 01       	movw	r30, r26
     e5a:	e8 0f       	add	r30, r24
     e5c:	f1 1d       	adc	r31, r1
     e5e:	e0 81       	ld	r30, Z
     e60:	ee 23       	and	r30, r30
     e62:	b1 f1       	breq	.+108    	; 0xed0 <arrToInt+0x8c>
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	c1 2c       	mov	r12, r1
     e68:	d1 2c       	mov	r13, r1
     e6a:	76 01       	movw	r14, r12
     e6c:	c1 e0       	ldi	r28, 0x01	; 1
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	f0 97       	sbiw	r30, 0x30	; 48
     e74:	77 23       	and	r23, r23
     e76:	91 f0       	breq	.+36     	; 0xe9c <arrToInt+0x58>
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	2c 2f       	mov	r18, r28
     e7c:	36 2f       	mov	r19, r22
     e7e:	a9 01       	movw	r20, r18
     e80:	44 0f       	add	r20, r20
     e82:	55 1f       	adc	r21, r21
     e84:	22 0f       	add	r18, r18
     e86:	33 1f       	adc	r19, r19
     e88:	22 0f       	add	r18, r18
     e8a:	33 1f       	adc	r19, r19
     e8c:	22 0f       	add	r18, r18
     e8e:	33 1f       	adc	r19, r19
     e90:	24 0f       	add	r18, r20
     e92:	35 1f       	adc	r19, r21
     e94:	9f 5f       	subi	r25, 0xFF	; 255
     e96:	79 13       	cpse	r23, r25
     e98:	f2 cf       	rjmp	.-28     	; 0xe7e <arrToInt+0x3a>
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <arrToInt+0x5c>
     e9c:	2c 2f       	mov	r18, r28
     e9e:	36 2f       	mov	r19, r22
     ea0:	e2 9f       	mul	r30, r18
     ea2:	80 01       	movw	r16, r0
     ea4:	e3 9f       	mul	r30, r19
     ea6:	10 0d       	add	r17, r0
     ea8:	f2 9f       	mul	r31, r18
     eaa:	10 0d       	add	r17, r0
     eac:	11 24       	eor	r1, r1
     eae:	01 2e       	mov	r0, r17
     eb0:	00 0c       	add	r0, r0
     eb2:	22 0b       	sbc	r18, r18
     eb4:	33 0b       	sbc	r19, r19
     eb6:	c0 0e       	add	r12, r16
     eb8:	d1 1e       	adc	r13, r17
     eba:	e2 1e       	adc	r14, r18
     ebc:	f3 1e       	adc	r15, r19
     ebe:	81 50       	subi	r24, 0x01	; 1
     ec0:	fd 01       	movw	r30, r26
     ec2:	e8 0f       	add	r30, r24
     ec4:	f1 1d       	adc	r31, r1
     ec6:	e0 81       	ld	r30, Z
     ec8:	7f 5f       	subi	r23, 0xFF	; 255
     eca:	e1 11       	cpse	r30, r1
     ecc:	d1 cf       	rjmp	.-94     	; 0xe70 <arrToInt+0x2c>
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <arrToInt+0x92>
     ed0:	c1 2c       	mov	r12, r1
     ed2:	d1 2c       	mov	r13, r1
     ed4:	76 01       	movw	r14, r12
     ed6:	c7 01       	movw	r24, r14
     ed8:	b6 01       	movw	r22, r12
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	08 95       	ret

00000eea <CONVERTER_DEC_TO_BIN>:
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	65 97       	sbiw	r28, 0x15	; 21
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	7c 01       	movw	r14, r24
     f10:	00 e0       	ldi	r16, 0x00	; 0
     f12:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
     f16:	18 2f       	mov	r17, r24
     f18:	8d 33       	cpi	r24, 0x3D	; 61
     f1a:	69 f5       	brne	.+90     	; 0xf76 <CONVERTER_DEC_TO_BIN+0x8c>
     f1c:	e1 e0       	ldi	r30, 0x01	; 1
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	ec 0f       	add	r30, r28
     f22:	fd 1f       	adc	r31, r29
     f24:	e0 0f       	add	r30, r16
     f26:	f1 1d       	adc	r31, r1
     f28:	10 82       	st	Z, r1
     f2a:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     f2e:	60 2f       	mov	r22, r16
     f30:	ce 01       	movw	r24, r28
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	0e 94 22 07 	call	0xe44	; 0xe44 <arrToInt>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	be 01       	movw	r22, r28
     f3e:	6a 5f       	subi	r22, 0xFA	; 250
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	0e 94 2e 06 	call	0xc5c	; 0xc5c <decToBin>
     f46:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     f4a:	85 ed       	ldi	r24, 0xD5	; 213
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
     f5a:	ce 01       	movw	r24, r28
     f5c:	06 96       	adiw	r24, 0x06	; 6
     f5e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	e7 ea       	ldi	r30, 0xA7	; 167
     f66:	f1 e6       	ldi	r31, 0x61	; 97
     f68:	91 50       	subi	r25, 0x01	; 1
     f6a:	e0 40       	sbci	r30, 0x00	; 0
     f6c:	f0 40       	sbci	r31, 0x00	; 0
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <CONVERTER_DEC_TO_BIN+0x7e>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <CONVERTER_DEC_TO_BIN+0x88>
     f72:	00 00       	nop
     f74:	c8 cf       	rjmp	.-112    	; 0xf06 <CONVERTER_DEC_TO_BIN+0x1c>
     f76:	83 34       	cpi	r24, 0x43	; 67
     f78:	61 f4       	brne	.+24     	; 0xf92 <CONVERTER_DEC_TO_BIN+0xa8>
     f7a:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	89 e6       	ldi	r24, 0x69	; 105
     f82:	98 e1       	ldi	r25, 0x18	; 24
     f84:	21 50       	subi	r18, 0x01	; 1
     f86:	80 40       	sbci	r24, 0x00	; 0
     f88:	90 40       	sbci	r25, 0x00	; 0
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <CONVERTER_DEC_TO_BIN+0x9a>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <CONVERTER_DEC_TO_BIN+0xa4>
     f8e:	00 00       	nop
     f90:	07 c0       	rjmp	.+14     	; 0xfa0 <CONVERTER_DEC_TO_BIN+0xb6>
     f92:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_vidDisplayChar4bit>
     f96:	f7 01       	movw	r30, r14
     f98:	11 93       	st	Z+, r17
     f9a:	7f 01       	movw	r14, r30
     f9c:	0f 5f       	subi	r16, 0xFF	; 255
     f9e:	b9 cf       	rjmp	.-142    	; 0xf12 <CONVERTER_DEC_TO_BIN+0x28>
     fa0:	65 96       	adiw	r28, 0x15	; 21
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	08 95       	ret

00000fba <CALCULATOR>:
     fba:	5f 92       	push	r5
     fbc:	6f 92       	push	r6
     fbe:	7f 92       	push	r7
     fc0:	8f 92       	push	r8
     fc2:	9f 92       	push	r9
     fc4:	af 92       	push	r10
     fc6:	bf 92       	push	r11
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	a0 97       	sbiw	r28, 0x20	; 32
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	8e 01       	movw	r16, r28
     fea:	0f 5f       	subi	r16, 0xFF	; 255
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	38 01       	movw	r6, r16
     ff0:	80 2e       	mov	r8, r16
     ff2:	57 2c       	mov	r5, r7
     ff4:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
     ff8:	19 8a       	std	Y+17, r1	; 0x11
     ffa:	1a 8a       	std	Y+18, r1	; 0x12
     ffc:	1b 8a       	std	Y+19, r1	; 0x13
     ffe:	1c 8a       	std	Y+20, r1	; 0x14
    1000:	1d 8a       	std	Y+21, r1	; 0x15
    1002:	1e 8a       	std	Y+22, r1	; 0x16
    1004:	1f 8a       	std	Y+23, r1	; 0x17
    1006:	18 8e       	std	Y+24, r1	; 0x18
    1008:	06 e4       	ldi	r16, 0x46	; 70
    100a:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
    100e:	98 2e       	mov	r9, r24
    1010:	1b e2       	ldi	r17, 0x2B	; 43
    1012:	81 17       	cp	r24, r17
    1014:	a1 f1       	breq	.+104    	; 0x107e <CALCULATOR+0xc4>
    1016:	2d e2       	ldi	r18, 0x2D	; 45
    1018:	82 17       	cp	r24, r18
    101a:	99 f1       	breq	.+102    	; 0x1082 <CALCULATOR+0xc8>
    101c:	3a e2       	ldi	r19, 0x2A	; 42
    101e:	83 17       	cp	r24, r19
    1020:	91 f1       	breq	.+100    	; 0x1086 <CALCULATOR+0xcc>
    1022:	45 e2       	ldi	r20, 0x25	; 37
    1024:	84 17       	cp	r24, r20
    1026:	89 f1       	breq	.+98     	; 0x108a <CALCULATOR+0xd0>
    1028:	53 e4       	ldi	r21, 0x43	; 67
    102a:	85 17       	cp	r24, r21
    102c:	81 f1       	breq	.+96     	; 0x108e <CALCULATOR+0xd4>
    102e:	8d e3       	ldi	r24, 0x3D	; 61
    1030:	98 16       	cp	r9, r24
    1032:	79 f1       	breq	.+94     	; 0x1092 <CALCULATOR+0xd8>
    1034:	10 e0       	ldi	r17, 0x00	; 0
    1036:	89 2d       	mov	r24, r9
    1038:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_vidDisplayChar4bit>
    103c:	f3 01       	movw	r30, r6
    103e:	e1 0f       	add	r30, r17
    1040:	f1 1d       	adc	r31, r1
    1042:	90 82       	st	Z, r9
    1044:	1f 5f       	subi	r17, 0xFF	; 255
    1046:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
    104a:	98 2e       	mov	r9, r24
    104c:	9b e2       	ldi	r25, 0x2B	; 43
    104e:	89 17       	cp	r24, r25
    1050:	09 f1       	breq	.+66     	; 0x1094 <CALCULATOR+0xda>
    1052:	0f 2e       	mov	r0, r31
    1054:	fd e2       	ldi	r31, 0x2D	; 45
    1056:	ef 2e       	mov	r14, r31
    1058:	f0 2d       	mov	r31, r0
    105a:	8e 15       	cp	r24, r14
    105c:	d9 f0       	breq	.+54     	; 0x1094 <CALCULATOR+0xda>
    105e:	0f 2e       	mov	r0, r31
    1060:	fa e2       	ldi	r31, 0x2A	; 42
    1062:	ff 2e       	mov	r15, r31
    1064:	f0 2d       	mov	r31, r0
    1066:	8f 15       	cp	r24, r15
    1068:	a9 f0       	breq	.+42     	; 0x1094 <CALCULATOR+0xda>
    106a:	25 e2       	ldi	r18, 0x25	; 37
    106c:	82 17       	cp	r24, r18
    106e:	91 f0       	breq	.+36     	; 0x1094 <CALCULATOR+0xda>
    1070:	33 e4       	ldi	r19, 0x43	; 67
    1072:	83 17       	cp	r24, r19
    1074:	79 f0       	breq	.+30     	; 0x1094 <CALCULATOR+0xda>
    1076:	4d e3       	ldi	r20, 0x3D	; 61
    1078:	84 13       	cpse	r24, r20
    107a:	dd cf       	rjmp	.-70     	; 0x1036 <CALCULATOR+0x7c>
    107c:	0b c0       	rjmp	.+22     	; 0x1094 <CALCULATOR+0xda>
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <CALCULATOR+0xda>
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <CALCULATOR+0xda>
    1086:	10 e0       	ldi	r17, 0x00	; 0
    1088:	05 c0       	rjmp	.+10     	; 0x1094 <CALCULATOR+0xda>
    108a:	10 e0       	ldi	r17, 0x00	; 0
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <CALCULATOR+0xda>
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <CALCULATOR+0xda>
    1092:	10 e0       	ldi	r17, 0x00	; 0
    1094:	f3 01       	movw	r30, r6
    1096:	e1 0f       	add	r30, r17
    1098:	f1 1d       	adc	r31, r1
    109a:	10 82       	st	Z, r1
    109c:	0a 32       	cpi	r16, 0x2A	; 42
    109e:	09 f4       	brne	.+2      	; 0x10a2 <CALCULATOR+0xe8>
    10a0:	59 c0       	rjmp	.+178    	; 0x1154 <CALCULATOR+0x19a>
    10a2:	20 f4       	brcc	.+8      	; 0x10ac <CALCULATOR+0xf2>
    10a4:	05 32       	cpi	r16, 0x25	; 37
    10a6:	09 f4       	brne	.+2      	; 0x10aa <CALCULATOR+0xf0>
    10a8:	77 c0       	rjmp	.+238    	; 0x1198 <CALCULATOR+0x1de>
    10aa:	98 c0       	rjmp	.+304    	; 0x11dc <CALCULATOR+0x222>
    10ac:	0b 32       	cpi	r16, 0x2B	; 43
    10ae:	19 f0       	breq	.+6      	; 0x10b6 <CALCULATOR+0xfc>
    10b0:	0d 32       	cpi	r16, 0x2D	; 45
    10b2:	19 f1       	breq	.+70     	; 0x10fa <CALCULATOR+0x140>
    10b4:	93 c0       	rjmp	.+294    	; 0x11dc <CALCULATOR+0x222>
    10b6:	61 2f       	mov	r22, r17
    10b8:	88 2d       	mov	r24, r8
    10ba:	95 2d       	mov	r25, r5
    10bc:	0e 94 22 07 	call	0xe44	; 0xe44 <arrToInt>
    10c0:	5b 01       	movw	r10, r22
    10c2:	6c 01       	movw	r12, r24
    10c4:	26 2f       	mov	r18, r22
    10c6:	3b 2d       	mov	r19, r11
    10c8:	4c 2d       	mov	r20, r12
    10ca:	5d 2d       	mov	r21, r13
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a9 88       	ldd	r10, Y+17	; 0x11
    10d6:	ba 88       	ldd	r11, Y+18	; 0x12
    10d8:	cb 88       	ldd	r12, Y+19	; 0x13
    10da:	dc 88       	ldd	r13, Y+20	; 0x14
    10dc:	ed 88       	ldd	r14, Y+21	; 0x15
    10de:	fe 88       	ldd	r15, Y+22	; 0x16
    10e0:	0f 89       	ldd	r16, Y+23	; 0x17
    10e2:	18 8d       	ldd	r17, Y+24	; 0x18
    10e4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__adddi3>
    10e8:	29 8b       	std	Y+17, r18	; 0x11
    10ea:	3a 8b       	std	Y+18, r19	; 0x12
    10ec:	4b 8b       	std	Y+19, r20	; 0x13
    10ee:	5c 8b       	std	Y+20, r21	; 0x14
    10f0:	6d 8b       	std	Y+21, r22	; 0x15
    10f2:	7e 8b       	std	Y+22, r23	; 0x16
    10f4:	8f 8b       	std	Y+23, r24	; 0x17
    10f6:	98 8f       	std	Y+24, r25	; 0x18
    10f8:	83 c0       	rjmp	.+262    	; 0x1200 <CALCULATOR+0x246>
    10fa:	61 2f       	mov	r22, r17
    10fc:	88 2d       	mov	r24, r8
    10fe:	95 2d       	mov	r25, r5
    1100:	0e 94 22 07 	call	0xe44	; 0xe44 <arrToInt>
    1104:	7b 01       	movw	r14, r22
    1106:	8c 01       	movw	r16, r24
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	69 8f       	std	Y+25, r22	; 0x19
    1110:	fa 8e       	std	Y+26, r15	; 0x1a
    1112:	0b 8f       	std	Y+27, r16	; 0x1b
    1114:	1c 8f       	std	Y+28, r17	; 0x1c
    1116:	2d 8f       	std	Y+29, r18	; 0x1d
    1118:	3e 8f       	std	Y+30, r19	; 0x1e
    111a:	4f 8f       	std	Y+31, r20	; 0x1f
    111c:	58 a3       	std	Y+32, r21	; 0x20
    111e:	29 89       	ldd	r18, Y+17	; 0x11
    1120:	3a 89       	ldd	r19, Y+18	; 0x12
    1122:	4b 89       	ldd	r20, Y+19	; 0x13
    1124:	5c 89       	ldd	r21, Y+20	; 0x14
    1126:	6d 89       	ldd	r22, Y+21	; 0x15
    1128:	7e 89       	ldd	r23, Y+22	; 0x16
    112a:	8f 89       	ldd	r24, Y+23	; 0x17
    112c:	98 8d       	ldd	r25, Y+24	; 0x18
    112e:	ae 2c       	mov	r10, r14
    1130:	bf 2c       	mov	r11, r15
    1132:	c0 2e       	mov	r12, r16
    1134:	d1 2e       	mov	r13, r17
    1136:	e1 2c       	mov	r14, r1
    1138:	f1 2c       	mov	r15, r1
    113a:	00 e0       	ldi	r16, 0x00	; 0
    113c:	10 e0       	ldi	r17, 0x00	; 0
    113e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__subdi3>
    1142:	29 8b       	std	Y+17, r18	; 0x11
    1144:	3a 8b       	std	Y+18, r19	; 0x12
    1146:	4b 8b       	std	Y+19, r20	; 0x13
    1148:	5c 8b       	std	Y+20, r21	; 0x14
    114a:	6d 8b       	std	Y+21, r22	; 0x15
    114c:	7e 8b       	std	Y+22, r23	; 0x16
    114e:	8f 8b       	std	Y+23, r24	; 0x17
    1150:	98 8f       	std	Y+24, r25	; 0x18
    1152:	56 c0       	rjmp	.+172    	; 0x1200 <CALCULATOR+0x246>
    1154:	61 2f       	mov	r22, r17
    1156:	88 2d       	mov	r24, r8
    1158:	95 2d       	mov	r25, r5
    115a:	0e 94 22 07 	call	0xe44	; 0xe44 <arrToInt>
    115e:	8b 01       	movw	r16, r22
    1160:	9c 01       	movw	r18, r24
    1162:	a0 2e       	mov	r10, r16
    1164:	b1 2e       	mov	r11, r17
    1166:	c2 2e       	mov	r12, r18
    1168:	d3 2e       	mov	r13, r19
    116a:	e1 2c       	mov	r14, r1
    116c:	f1 2c       	mov	r15, r1
    116e:	00 e0       	ldi	r16, 0x00	; 0
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	29 89       	ldd	r18, Y+17	; 0x11
    1174:	3a 89       	ldd	r19, Y+18	; 0x12
    1176:	4b 89       	ldd	r20, Y+19	; 0x13
    1178:	5c 89       	ldd	r21, Y+20	; 0x14
    117a:	6d 89       	ldd	r22, Y+21	; 0x15
    117c:	7e 89       	ldd	r23, Y+22	; 0x16
    117e:	8f 89       	ldd	r24, Y+23	; 0x17
    1180:	98 8d       	ldd	r25, Y+24	; 0x18
    1182:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__muldi3>
    1186:	29 8b       	std	Y+17, r18	; 0x11
    1188:	3a 8b       	std	Y+18, r19	; 0x12
    118a:	4b 8b       	std	Y+19, r20	; 0x13
    118c:	5c 8b       	std	Y+20, r21	; 0x14
    118e:	6d 8b       	std	Y+21, r22	; 0x15
    1190:	7e 8b       	std	Y+22, r23	; 0x16
    1192:	8f 8b       	std	Y+23, r24	; 0x17
    1194:	98 8f       	std	Y+24, r25	; 0x18
    1196:	34 c0       	rjmp	.+104    	; 0x1200 <CALCULATOR+0x246>
    1198:	61 2f       	mov	r22, r17
    119a:	88 2d       	mov	r24, r8
    119c:	95 2d       	mov	r25, r5
    119e:	0e 94 22 07 	call	0xe44	; 0xe44 <arrToInt>
    11a2:	8b 01       	movw	r16, r22
    11a4:	9c 01       	movw	r18, r24
    11a6:	a0 2e       	mov	r10, r16
    11a8:	b1 2e       	mov	r11, r17
    11aa:	c2 2e       	mov	r12, r18
    11ac:	d3 2e       	mov	r13, r19
    11ae:	e1 2c       	mov	r14, r1
    11b0:	f1 2c       	mov	r15, r1
    11b2:	00 e0       	ldi	r16, 0x00	; 0
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	29 89       	ldd	r18, Y+17	; 0x11
    11b8:	3a 89       	ldd	r19, Y+18	; 0x12
    11ba:	4b 89       	ldd	r20, Y+19	; 0x13
    11bc:	5c 89       	ldd	r21, Y+20	; 0x14
    11be:	6d 89       	ldd	r22, Y+21	; 0x15
    11c0:	7e 89       	ldd	r23, Y+22	; 0x16
    11c2:	8f 89       	ldd	r24, Y+23	; 0x17
    11c4:	98 8d       	ldd	r25, Y+24	; 0x18
    11c6:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__moddi3>
    11ca:	29 8b       	std	Y+17, r18	; 0x11
    11cc:	3a 8b       	std	Y+18, r19	; 0x12
    11ce:	4b 8b       	std	Y+19, r20	; 0x13
    11d0:	5c 8b       	std	Y+20, r21	; 0x14
    11d2:	6d 8b       	std	Y+21, r22	; 0x15
    11d4:	7e 8b       	std	Y+22, r23	; 0x16
    11d6:	8f 8b       	std	Y+23, r24	; 0x17
    11d8:	98 8f       	std	Y+24, r25	; 0x18
    11da:	12 c0       	rjmp	.+36     	; 0x1200 <CALCULATOR+0x246>
    11dc:	61 2f       	mov	r22, r17
    11de:	88 2d       	mov	r24, r8
    11e0:	95 2d       	mov	r25, r5
    11e2:	0e 94 22 07 	call	0xe44	; 0xe44 <arrToInt>
    11e6:	7b 01       	movw	r14, r22
    11e8:	8c 01       	movw	r16, r24
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	69 8b       	std	Y+17, r22	; 0x11
    11f2:	fa 8a       	std	Y+18, r15	; 0x12
    11f4:	0b 8b       	std	Y+19, r16	; 0x13
    11f6:	1c 8b       	std	Y+20, r17	; 0x14
    11f8:	2d 8b       	std	Y+21, r18	; 0x15
    11fa:	3e 8b       	std	Y+22, r19	; 0x16
    11fc:	4f 8b       	std	Y+23, r20	; 0x17
    11fe:	58 8f       	std	Y+24, r21	; 0x18
    1200:	0f 2e       	mov	r0, r31
    1202:	fd e3       	ldi	r31, 0x3D	; 61
    1204:	ff 2e       	mov	r15, r31
    1206:	f0 2d       	mov	r31, r0
    1208:	9f 14       	cp	r9, r15
    120a:	21 f0       	breq	.+8      	; 0x1214 <CALCULATOR+0x25a>
    120c:	03 e4       	ldi	r16, 0x43	; 67
    120e:	90 16       	cp	r9, r16
    1210:	61 f0       	breq	.+24     	; 0x122a <CALCULATOR+0x270>
    1212:	17 c0       	rjmp	.+46     	; 0x1242 <CALCULATOR+0x288>
    1214:	29 89       	ldd	r18, Y+17	; 0x11
    1216:	3a 89       	ldd	r19, Y+18	; 0x12
    1218:	4b 89       	ldd	r20, Y+19	; 0x13
    121a:	5c 89       	ldd	r21, Y+20	; 0x14
    121c:	6d 89       	ldd	r22, Y+21	; 0x15
    121e:	7e 89       	ldd	r23, Y+22	; 0x16
    1220:	8f 89       	ldd	r24, Y+23	; 0x17
    1222:	98 8d       	ldd	r25, Y+24	; 0x18
    1224:	0e 94 58 04 	call	0x8b0	; 0x8b0 <END_CALCULATOR>
    1228:	e5 ce       	rjmp	.-566    	; 0xff4 <CALCULATOR+0x3a>
    122a:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
    122e:	1f ef       	ldi	r17, 0xFF	; 255
    1230:	29 e6       	ldi	r18, 0x69	; 105
    1232:	38 e1       	ldi	r19, 0x18	; 24
    1234:	11 50       	subi	r17, 0x01	; 1
    1236:	20 40       	sbci	r18, 0x00	; 0
    1238:	30 40       	sbci	r19, 0x00	; 0
    123a:	e1 f7       	brne	.-8      	; 0x1234 <CALCULATOR+0x27a>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <CALCULATOR+0x284>
    123e:	00 00       	nop
    1240:	11 c0       	rjmp	.+34     	; 0x1264 <CALCULATOR+0x2aa>
    1242:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
    1246:	29 89       	ldd	r18, Y+17	; 0x11
    1248:	3a 89       	ldd	r19, Y+18	; 0x12
    124a:	4b 89       	ldd	r20, Y+19	; 0x13
    124c:	5c 89       	ldd	r21, Y+20	; 0x14
    124e:	6d 89       	ldd	r22, Y+21	; 0x15
    1250:	7e 89       	ldd	r23, Y+22	; 0x16
    1252:	8f 89       	ldd	r24, Y+23	; 0x17
    1254:	98 8d       	ldd	r25, Y+24	; 0x18
    1256:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LCD_vidDisplayRealNumber4bit>
    125a:	89 2d       	mov	r24, r9
    125c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_vidDisplayChar4bit>
    1260:	09 2d       	mov	r16, r9
    1262:	d3 ce       	rjmp	.-602    	; 0x100a <CALCULATOR+0x50>
    1264:	a0 96       	adiw	r28, 0x20	; 32
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	9f 90       	pop	r9
    1286:	8f 90       	pop	r8
    1288:	7f 90       	pop	r7
    128a:	6f 90       	pop	r6
    128c:	5f 90       	pop	r5
    128e:	08 95       	ret

00001290 <ERROR_CHOICE>:

void ERROR_CHOICE(){
	LCD_vidClearScreen4bit( );
    1290:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	LCD_voidDisplayString4bit( "Choose valid one");
    1294:	86 ee       	ldi	r24, 0xE6	; 230
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
    129c:	2f ef       	ldi	r18, 0xFF	; 255
    129e:	89 e6       	ldi	r24, 0x69	; 105
    12a0:	98 e1       	ldi	r25, 0x18	; 24
    12a2:	21 50       	subi	r18, 0x01	; 1
    12a4:	80 40       	sbci	r24, 0x00	; 0
    12a6:	90 40       	sbci	r25, 0x00	; 0
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <ERROR_CHOICE+0x12>
    12aa:	00 c0       	rjmp	.+0      	; 0x12ac <ERROR_CHOICE+0x1c>
    12ac:	00 00       	nop
	_delay_ms(500);
	LCD_vidClearScreen4bit( );
    12ae:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
    12b2:	08 95       	ret

000012b4 <CONVERTER>:
// Converter Functions

void CONVERTER(void){
	u8 conv_m;
	CONV_MODE :
	LCD_vidClearScreen4bit();
    12b4:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	LCD_vidMoveCursor4bit(1,1);
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("1_ Dec --> Bin ");
    12c0:	87 ef       	ldi	r24, 0xF7	; 247
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit(2,1);
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("2_ Bin --> Dec ");
    12d0:	87 e0       	ldi	r24, 0x07	; 7
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
	conv_m = getFromKeypad();
    12d8:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
	switch (conv_m){
    12dc:	81 33       	cpi	r24, 0x31	; 49
    12de:	19 f0       	breq	.+6      	; 0x12e6 <CONVERTER+0x32>
    12e0:	82 33       	cpi	r24, 0x32	; 50
    12e2:	21 f0       	breq	.+8      	; 0x12ec <CONVERTER+0x38>
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <CONVERTER+0x3e>
		case '1' :
		CONVERTER_DEC_TO_BIN();
    12e6:	0e 94 75 07 	call	0xeea	; 0xeea <CONVERTER_DEC_TO_BIN>
		break;
    12ea:	08 95       	ret
		case '2' :
		CONVERTER_BIN_TO_DEC();
    12ec:	0e 94 64 06 	call	0xcc8	; 0xcc8 <CONVERTER_BIN_TO_DEC>
		break;
    12f0:	08 95       	ret
		default:
		ERROR_CHOICE();
    12f2:	0e 94 48 09 	call	0x1290	; 0x1290 <ERROR_CHOICE>
		goto CONV_MODE;
    12f6:	de cf       	rjmp	.-68     	; 0x12b4 <CONVERTER>

000012f8 <ENTRY_MODE>:

// MAIN FUNCTIONS

void ENTRY_MODE(void)
{
	LCD_vidClearScreen4bit( );
    12f8:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	LCD_voidDisplayString4bit( "Choose a Mode :");
    12fc:	87 e1       	ldi	r24, 0x17	; 23
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit( 2,1);
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
    130c:	2f ef       	ldi	r18, 0xFF	; 255
    130e:	81 ee       	ldi	r24, 0xE1	; 225
    1310:	94 e0       	ldi	r25, 0x04	; 4
    1312:	21 50       	subi	r18, 0x01	; 1
    1314:	80 40       	sbci	r24, 0x00	; 0
    1316:	90 40       	sbci	r25, 0x00	; 0
    1318:	e1 f7       	brne	.-8      	; 0x1312 <ENTRY_MODE+0x1a>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <ENTRY_MODE+0x24>
    131c:	00 00       	nop
	_delay_ms(100);
	LCD_voidDisplayString4bit("1_BT 2_Cal 3_Con");
    131e:	87 e2       	ldi	r24, 0x27	; 39
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
    1326:	08 95       	ret

00001328 <Init>:
}

void Init(void)
{
	srand(time(NULL));
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 49 00 	call	0x92	; 0x92 <time>
    1330:	cb 01       	movw	r24, r22
    1332:	0e 94 10 10 	call	0x2020	; 0x2020 <srand>
	LCD_vidInit4bit();
    1336:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_vidInit4bit>
	KPD_vidInit(GPIOB,LOW_NIBBLE,HIGH_NIBBLE);
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	0e 94 3f 02 	call	0x47e	; 0x47e <KPD_vidInit>
	DIO_vidSetPinMode(GPIOC,PIN0,OUTPUT);
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
	DIO_vidWritePin(GPIOC,PIN0,LOW);
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	DIO_vidSetPinMode(GPIOA,PIN4,OUTPUT);
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	64 e0       	ldi	r22, 0x04	; 4
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
	DIO_vidWritePin(GPIOA,PIN4,LOW);
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	64 e0       	ldi	r22, 0x04	; 4
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	DIO_vidSetLowNibbleMode(GPIOA,OUTPUT);
    136c:	61 e0       	ldi	r22, 0x01	; 1
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vidSetLowNibbleMode>
    1374:	08 95       	ret

00001376 <triesCount>:
}

u8 triesCount(u8 try)
{
    1376:	cf 93       	push	r28

    u8 returnVal = 1;
	tries--;
    1378:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <tries>
    137c:	91 50       	subi	r25, 0x01	; 1
    137e:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <tries>
    DIO_vidWriteLowNibble(GPIOA,--try);
    1382:	cf ef       	ldi	r28, 0xFF	; 255
    1384:	c8 0f       	add	r28, r24
    1386:	6c 2f       	mov	r22, r28
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
    if (try == 0)
    138e:	c1 11       	cpse	r28, r1
    1390:	1e c0       	rjmp	.+60     	; 0x13ce <triesCount+0x58>
    {
    	LCD_voidDisplayString4bit("You have no ");
    1392:	88 e3       	ldi	r24, 0x38	; 56
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
    	LCD_vidMoveCursor4bit(2,1);
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
    	LCD_voidDisplayString4bit("tries left");
    13a2:	85 e4       	ldi	r24, 0x45	; 69
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
    13aa:	2f ef       	ldi	r18, 0xFF	; 255
    13ac:	89 e6       	ldi	r24, 0x69	; 105
    13ae:	98 e1       	ldi	r25, 0x18	; 24
    13b0:	21 50       	subi	r18, 0x01	; 1
    13b2:	80 40       	sbci	r24, 0x00	; 0
    13b4:	90 40       	sbci	r25, 0x00	; 0
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <triesCount+0x3a>
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <triesCount+0x44>
    13ba:	00 00       	nop
    	_delay_ms(500);
    	tries = 3;
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <tries>
        DIO_vidWriteLowNibble(GPIOA,tries);
    13c2:	63 e0       	ldi	r22, 0x03	; 3
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
    	returnVal = 0;
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	18 c0       	rjmp	.+48     	; 0x13fe <triesCount+0x88>
    }else{
		LCD_voidDisplayString4bit("Try Again !");
    13ce:	80 e5       	ldi	r24, 0x50	; 80
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
		DIO_vidWritePin(GPIOA,PIN4,HIGH);
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	64 e0       	ldi	r22, 0x04	; 4
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
    13e0:	2f ef       	ldi	r18, 0xFF	; 255
    13e2:	89 e6       	ldi	r24, 0x69	; 105
    13e4:	98 e1       	ldi	r25, 0x18	; 24
    13e6:	21 50       	subi	r18, 0x01	; 1
    13e8:	80 40       	sbci	r24, 0x00	; 0
    13ea:	90 40       	sbci	r25, 0x00	; 0
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <triesCount+0x70>
    13ee:	00 c0       	rjmp	.+0      	; 0x13f0 <triesCount+0x7a>
    13f0:	00 00       	nop
		_delay_ms(500);
		DIO_vidWritePin(GPIOA,PIN4,LOW);
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	64 e0       	ldi	r22, 0x04	; 4
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
}

u8 triesCount(u8 try)
{

    u8 returnVal = 1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
		DIO_vidWritePin(GPIOA,PIN4,HIGH);
		_delay_ms(500);
		DIO_vidWritePin(GPIOA,PIN4,LOW);
	}
    return returnVal;
}
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <BRAIN_TEST_LOGIC>:
	LCD_vidMoveCursor4bit(1,1);

}

void BRAIN_TEST_LOGIC()
{
    1402:	8f 92       	push	r8
    1404:	9f 92       	push	r9
    1406:	af 92       	push	r10
    1408:	bf 92       	push	r11
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	2d 97       	sbiw	r28, 0x0d	; 13
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
	LCD_vidClearScreen4bit();
    142a:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	LCD_vidMoveCursor4bit(1,1);
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
	u8 temp,i,num1[4],num2[4],res[4],SEL,REAL_RES[4],count;
	Brain_Test_rand_logic:
	tries = 3;
    1436:	0f 2e       	mov	r0, r31
    1438:	f3 e0       	ldi	r31, 0x03	; 3
    143a:	8f 2e       	mov	r8, r31
    143c:	f0 2d       	mov	r31, r0
	DIO_vidWriteLowNibble(GPIOA,tries);
	LCD_vidClearScreen4bit();
	LCD_vidMoveCursor4bit(1,1);
	temp = rand()%6;
    143e:	0f 2e       	mov	r0, r31
    1440:	f6 e0       	ldi	r31, 0x06	; 6
    1442:	af 2e       	mov	r10, r31
    1444:	b1 2c       	mov	r11, r1
    1446:	f0 2d       	mov	r31, r0
{
	LCD_vidClearScreen4bit();
	LCD_vidMoveCursor4bit(1,1);
	u8 temp,i,num1[4],num2[4],res[4],SEL,REAL_RES[4],count;
	Brain_Test_rand_logic:
	tries = 3;
    1448:	80 92 23 02 	sts	0x0223, r8	; 0x800223 <tries>
	DIO_vidWriteLowNibble(GPIOA,tries);
    144c:	68 2d       	mov	r22, r8
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
	LCD_vidClearScreen4bit();
    1454:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	LCD_vidMoveCursor4bit(1,1);
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
	temp = rand()%6;
    1460:	0e 94 0b 10 	call	0x2016	; 0x2016 <rand>
    1464:	b5 01       	movw	r22, r10
    1466:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__divmodhi4>
    146a:	98 2e       	mov	r9, r24
	bool cond= true;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	8d 87       	std	Y+13, r24	; 0x0d
    1470:	8e 01       	movw	r16, r28
    1472:	0f 5f       	subi	r16, 0xFF	; 255
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	7e 01       	movw	r14, r28
    1478:	25 e0       	ldi	r18, 0x05	; 5
    147a:	e2 0e       	add	r14, r18
    147c:	f1 1c       	adc	r15, r1
    147e:	67 01       	movw	r12, r14
	i = 0;
	while (i<4)
	{
		num1[i] = rand()%2;
    1480:	0e 94 0b 10 	call	0x2016	; 0x2016 <rand>
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	90 78       	andi	r25, 0x80	; 128
    1488:	99 23       	and	r25, r25
    148a:	24 f4       	brge	.+8      	; 0x1494 <BRAIN_TEST_LOGIC+0x92>
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	8e 6f       	ori	r24, 0xFE	; 254
    1490:	9f 6f       	ori	r25, 0xFF	; 255
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	f8 01       	movw	r30, r16
    1496:	81 93       	st	Z+, r24
    1498:	8f 01       	movw	r16, r30
		num2[i] = rand()%2;
    149a:	0e 94 0b 10 	call	0x2016	; 0x2016 <rand>
    149e:	81 70       	andi	r24, 0x01	; 1
    14a0:	90 78       	andi	r25, 0x80	; 128
    14a2:	99 23       	and	r25, r25
    14a4:	24 f4       	brge	.+8      	; 0x14ae <BRAIN_TEST_LOGIC+0xac>
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	8e 6f       	ori	r24, 0xFE	; 254
    14aa:	9f 6f       	ori	r25, 0xFF	; 255
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	f7 01       	movw	r30, r14
    14b0:	81 93       	st	Z+, r24
    14b2:	7f 01       	movw	r14, r30
	LCD_vidClearScreen4bit();
	LCD_vidMoveCursor4bit(1,1);
	temp = rand()%6;
	bool cond= true;
	i = 0;
	while (i<4)
    14b4:	0c 15       	cp	r16, r12
    14b6:	1d 05       	cpc	r17, r13
    14b8:	19 f7       	brne	.-58     	; 0x1480 <BRAIN_TEST_LOGIC+0x7e>
		num2[i] = rand()%2;
		i++;
	}
	
	// logic modes
	if(temp==0)    //AND
    14ba:	91 10       	cpse	r9, r1
    14bc:	4b c0       	rjmp	.+150    	; 0x1554 <BRAIN_TEST_LOGIC+0x152>
	{
		
		performLogicGate(0,num1,num2, REAL_RES);
    14be:	9e 01       	movw	r18, r28
    14c0:	27 5f       	subi	r18, 0xF7	; 247
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	ae 01       	movw	r20, r28
    14c6:	4b 5f       	subi	r20, 0xFB	; 251
    14c8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ca:	be 01       	movw	r22, r28
    14cc:	6f 5f       	subi	r22, 0xFF	; 255
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	0e 94 a8 04 	call	0x950	; 0x950 <performLogicGate>
		tryAND:
		
		cond = TRUE;
    14d6:	11 e0       	ldi	r17, 0x01	; 1
    14d8:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," AND ");
    14da:	4f e8       	ldi	r20, 0x8F	; 143
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	be 01       	movw	r22, r28
    14e0:	6b 5f       	subi	r22, 0xFB	; 251
    14e2:	7f 4f       	sbci	r23, 0xFF	; 255
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    14ec:	be 01       	movw	r22, r28
    14ee:	63 5f       	subi	r22, 0xF3	; 243
    14f0:	7f 4f       	sbci	r23, 0xFF	; 255
    14f2:	ce 01       	movw	r24, r28
    14f4:	09 96       	adiw	r24, 0x09	; 9
    14f6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <getLogicResult>
		if (cond)
    14fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fc:	88 23       	and	r24, r24
    14fe:	51 f0       	breq	.+20     	; 0x1514 <BRAIN_TEST_LOGIC+0x112>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    1500:	8c e5       	ldi	r24, 0x5C	; 92
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
			DIO_vidWriteLowNibble(GPIOA,tries);
    1508:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <tries>
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
    1512:	a2 c1       	rjmp	.+836    	; 0x1858 <BRAIN_TEST_LOGIC+0x456>
			}else{
			count = triesCount(tries);
    1514:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    1518:	0e 94 bb 09 	call	0x1376	; 0x1376 <triesCount>
			if(count == 0)
    151c:	81 11       	cpse	r24, r1
    151e:	0e c0       	rjmp	.+28     	; 0x153c <BRAIN_TEST_LOGIC+0x13a>
			{
				LogicWrongAnswer(REAL_RES);
    1520:	ce 01       	movw	r24, r28
    1522:	09 96       	adiw	r24, 0x09	; 9
    1524:	0e 94 ab 05 	call	0xb56	; 0xb56 <LogicWrongAnswer>
    1528:	ff ef       	ldi	r31, 0xFF	; 255
    152a:	23 ed       	ldi	r18, 0xD3	; 211
    152c:	80 e3       	ldi	r24, 0x30	; 48
    152e:	f1 50       	subi	r31, 0x01	; 1
    1530:	20 40       	sbci	r18, 0x00	; 0
    1532:	80 40       	sbci	r24, 0x00	; 0
    1534:	e1 f7       	brne	.-8      	; 0x152e <BRAIN_TEST_LOGIC+0x12c>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <BRAIN_TEST_LOGIC+0x136>
    1538:	00 00       	nop
    153a:	86 cf       	rjmp	.-244    	; 0x1448 <BRAIN_TEST_LOGIC+0x46>
    153c:	9f ef       	ldi	r25, 0xFF	; 255
    153e:	e9 e6       	ldi	r30, 0x69	; 105
    1540:	f8 e1       	ldi	r31, 0x18	; 24
    1542:	91 50       	subi	r25, 0x01	; 1
    1544:	e0 40       	sbci	r30, 0x00	; 0
    1546:	f0 40       	sbci	r31, 0x00	; 0
    1548:	e1 f7       	brne	.-8      	; 0x1542 <BRAIN_TEST_LOGIC+0x140>
    154a:	00 c0       	rjmp	.+0      	; 0x154c <BRAIN_TEST_LOGIC+0x14a>
    154c:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    154e:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
			goto tryAND;
    1552:	c2 cf       	rjmp	.-124    	; 0x14d8 <BRAIN_TEST_LOGIC+0xd6>
		}
		
	}
	else if (temp == 1)     //OR
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	92 12       	cpse	r9, r18
    1558:	4b c0       	rjmp	.+150    	; 0x15f0 <BRAIN_TEST_LOGIC+0x1ee>
	{
		
		performLogicGate(1,num1,num2, REAL_RES);
    155a:	9e 01       	movw	r18, r28
    155c:	27 5f       	subi	r18, 0xF7	; 247
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	ae 01       	movw	r20, r28
    1562:	4b 5f       	subi	r20, 0xFB	; 251
    1564:	5f 4f       	sbci	r21, 0xFF	; 255
    1566:	be 01       	movw	r22, r28
    1568:	6f 5f       	subi	r22, 0xFF	; 255
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	0e 94 a8 04 	call	0x950	; 0x950 <performLogicGate>
		tryOR:
		cond = TRUE;
    1572:	11 e0       	ldi	r17, 0x01	; 1
    1574:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," OR ");
    1576:	4d e6       	ldi	r20, 0x6D	; 109
    1578:	51 e0       	ldi	r21, 0x01	; 1
    157a:	be 01       	movw	r22, r28
    157c:	6b 5f       	subi	r22, 0xFB	; 251
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	ce 01       	movw	r24, r28
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	0e 94 52 05 	call	0xaa4	; 0xaa4 <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    1588:	be 01       	movw	r22, r28
    158a:	63 5f       	subi	r22, 0xF3	; 243
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	ce 01       	movw	r24, r28
    1590:	09 96       	adiw	r24, 0x09	; 9
    1592:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <getLogicResult>
		if (cond)
    1596:	8d 85       	ldd	r24, Y+13	; 0x0d
    1598:	88 23       	and	r24, r24
    159a:	51 f0       	breq	.+20     	; 0x15b0 <BRAIN_TEST_LOGIC+0x1ae>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    159c:	8c e5       	ldi	r24, 0x5C	; 92
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
			DIO_vidWriteLowNibble(GPIOA,tries);
    15a4:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <tries>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
    15ae:	54 c1       	rjmp	.+680    	; 0x1858 <BRAIN_TEST_LOGIC+0x456>
			}else{
			count = triesCount(tries);
    15b0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    15b4:	0e 94 bb 09 	call	0x1376	; 0x1376 <triesCount>
			if(count == 0)
    15b8:	81 11       	cpse	r24, r1
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <BRAIN_TEST_LOGIC+0x1d6>
			{
				LogicWrongAnswer(REAL_RES);
    15bc:	ce 01       	movw	r24, r28
    15be:	09 96       	adiw	r24, 0x09	; 9
    15c0:	0e 94 ab 05 	call	0xb56	; 0xb56 <LogicWrongAnswer>
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	93 ed       	ldi	r25, 0xD3	; 211
    15c8:	e0 e3       	ldi	r30, 0x30	; 48
    15ca:	81 50       	subi	r24, 0x01	; 1
    15cc:	90 40       	sbci	r25, 0x00	; 0
    15ce:	e0 40       	sbci	r30, 0x00	; 0
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <BRAIN_TEST_LOGIC+0x1c8>
    15d2:	00 c0       	rjmp	.+0      	; 0x15d4 <BRAIN_TEST_LOGIC+0x1d2>
    15d4:	00 00       	nop
    15d6:	38 cf       	rjmp	.-400    	; 0x1448 <BRAIN_TEST_LOGIC+0x46>
    15d8:	ff ef       	ldi	r31, 0xFF	; 255
    15da:	29 e6       	ldi	r18, 0x69	; 105
    15dc:	88 e1       	ldi	r24, 0x18	; 24
    15de:	f1 50       	subi	r31, 0x01	; 1
    15e0:	20 40       	sbci	r18, 0x00	; 0
    15e2:	80 40       	sbci	r24, 0x00	; 0
    15e4:	e1 f7       	brne	.-8      	; 0x15de <BRAIN_TEST_LOGIC+0x1dc>
    15e6:	00 c0       	rjmp	.+0      	; 0x15e8 <BRAIN_TEST_LOGIC+0x1e6>
    15e8:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    15ea:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>

			goto tryOR;
    15ee:	c2 cf       	rjmp	.-124    	; 0x1574 <BRAIN_TEST_LOGIC+0x172>
		}
	}
	else if (temp == 2)     //NAND
    15f0:	92 e0       	ldi	r25, 0x02	; 2
    15f2:	99 12       	cpse	r9, r25
    15f4:	4b c0       	rjmp	.+150    	; 0x168c <BRAIN_TEST_LOGIC+0x28a>
	{
		
		performLogicGate(2,num1,num2,REAL_RES);
    15f6:	9e 01       	movw	r18, r28
    15f8:	27 5f       	subi	r18, 0xF7	; 247
    15fa:	3f 4f       	sbci	r19, 0xFF	; 255
    15fc:	ae 01       	movw	r20, r28
    15fe:	4b 5f       	subi	r20, 0xFB	; 251
    1600:	5f 4f       	sbci	r21, 0xFF	; 255
    1602:	be 01       	movw	r22, r28
    1604:	6f 5f       	subi	r22, 0xFF	; 255
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	0e 94 a8 04 	call	0x950	; 0x950 <performLogicGate>
		tryNAND:
		cond = TRUE;
    160e:	11 e0       	ldi	r17, 0x01	; 1
    1610:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," NAND ");
    1612:	42 e7       	ldi	r20, 0x72	; 114
    1614:	51 e0       	ldi	r21, 0x01	; 1
    1616:	be 01       	movw	r22, r28
    1618:	6b 5f       	subi	r22, 0xFB	; 251
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	ce 01       	movw	r24, r28
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	0e 94 52 05 	call	0xaa4	; 0xaa4 <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    1624:	be 01       	movw	r22, r28
    1626:	63 5f       	subi	r22, 0xF3	; 243
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	ce 01       	movw	r24, r28
    162c:	09 96       	adiw	r24, 0x09	; 9
    162e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <getLogicResult>
		if (cond)
    1632:	8d 85       	ldd	r24, Y+13	; 0x0d
    1634:	88 23       	and	r24, r24
    1636:	51 f0       	breq	.+20     	; 0x164c <BRAIN_TEST_LOGIC+0x24a>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    1638:	8c e5       	ldi	r24, 0x5C	; 92
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
			DIO_vidWriteLowNibble(GPIOA,tries);
    1640:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <tries>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
    164a:	06 c1       	rjmp	.+524    	; 0x1858 <BRAIN_TEST_LOGIC+0x456>
			}else{
			count = triesCount(tries);
    164c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    1650:	0e 94 bb 09 	call	0x1376	; 0x1376 <triesCount>
			if(count == 0)
    1654:	81 11       	cpse	r24, r1
    1656:	0e c0       	rjmp	.+28     	; 0x1674 <BRAIN_TEST_LOGIC+0x272>
			{
				LogicWrongAnswer(REAL_RES);
    1658:	ce 01       	movw	r24, r28
    165a:	09 96       	adiw	r24, 0x09	; 9
    165c:	0e 94 ab 05 	call	0xb56	; 0xb56 <LogicWrongAnswer>
    1660:	ef ef       	ldi	r30, 0xFF	; 255
    1662:	f3 ed       	ldi	r31, 0xD3	; 211
    1664:	20 e3       	ldi	r18, 0x30	; 48
    1666:	e1 50       	subi	r30, 0x01	; 1
    1668:	f0 40       	sbci	r31, 0x00	; 0
    166a:	20 40       	sbci	r18, 0x00	; 0
    166c:	e1 f7       	brne	.-8      	; 0x1666 <BRAIN_TEST_LOGIC+0x264>
    166e:	00 c0       	rjmp	.+0      	; 0x1670 <BRAIN_TEST_LOGIC+0x26e>
    1670:	00 00       	nop
    1672:	ea ce       	rjmp	.-556    	; 0x1448 <BRAIN_TEST_LOGIC+0x46>
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	99 e6       	ldi	r25, 0x69	; 105
    1678:	e8 e1       	ldi	r30, 0x18	; 24
    167a:	81 50       	subi	r24, 0x01	; 1
    167c:	90 40       	sbci	r25, 0x00	; 0
    167e:	e0 40       	sbci	r30, 0x00	; 0
    1680:	e1 f7       	brne	.-8      	; 0x167a <BRAIN_TEST_LOGIC+0x278>
    1682:	00 c0       	rjmp	.+0      	; 0x1684 <BRAIN_TEST_LOGIC+0x282>
    1684:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    1686:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>

			goto tryNAND;
    168a:	c2 cf       	rjmp	.-124    	; 0x1610 <BRAIN_TEST_LOGIC+0x20e>
		}
	}
	else if (temp == 3)     //NOR
    168c:	f3 e0       	ldi	r31, 0x03	; 3
    168e:	9f 12       	cpse	r9, r31
    1690:	4b c0       	rjmp	.+150    	; 0x1728 <BRAIN_TEST_LOGIC+0x326>
	{
		
		performLogicGate(3,num1,num2,REAL_RES);
    1692:	9e 01       	movw	r18, r28
    1694:	27 5f       	subi	r18, 0xF7	; 247
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	ae 01       	movw	r20, r28
    169a:	4b 5f       	subi	r20, 0xFB	; 251
    169c:	5f 4f       	sbci	r21, 0xFF	; 255
    169e:	be 01       	movw	r22, r28
    16a0:	6f 5f       	subi	r22, 0xFF	; 255
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	88 2d       	mov	r24, r8
    16a6:	0e 94 a8 04 	call	0x950	; 0x950 <performLogicGate>
		tryNOR:
		cond = TRUE;
    16aa:	11 e0       	ldi	r17, 0x01	; 1
    16ac:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," NOR ");
    16ae:	49 e7       	ldi	r20, 0x79	; 121
    16b0:	51 e0       	ldi	r21, 0x01	; 1
    16b2:	be 01       	movw	r22, r28
    16b4:	6b 5f       	subi	r22, 0xFB	; 251
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	ce 01       	movw	r24, r28
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	0e 94 52 05 	call	0xaa4	; 0xaa4 <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    16c0:	be 01       	movw	r22, r28
    16c2:	63 5f       	subi	r22, 0xF3	; 243
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	ce 01       	movw	r24, r28
    16c8:	09 96       	adiw	r24, 0x09	; 9
    16ca:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <getLogicResult>
		if (cond)
    16ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d0:	88 23       	and	r24, r24
    16d2:	51 f0       	breq	.+20     	; 0x16e8 <BRAIN_TEST_LOGIC+0x2e6>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    16d4:	8c e5       	ldi	r24, 0x5C	; 92
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
			DIO_vidWriteLowNibble(GPIOA,tries);
    16dc:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <tries>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
    16e6:	b8 c0       	rjmp	.+368    	; 0x1858 <BRAIN_TEST_LOGIC+0x456>
		}
		else
		{
			count = triesCount(tries);
    16e8:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    16ec:	0e 94 bb 09 	call	0x1376	; 0x1376 <triesCount>
			if(count == 0)
    16f0:	81 11       	cpse	r24, r1
    16f2:	0e c0       	rjmp	.+28     	; 0x1710 <BRAIN_TEST_LOGIC+0x30e>
			{
				LogicWrongAnswer(REAL_RES);
    16f4:	ce 01       	movw	r24, r28
    16f6:	09 96       	adiw	r24, 0x09	; 9
    16f8:	0e 94 ab 05 	call	0xb56	; 0xb56 <LogicWrongAnswer>
    16fc:	2f ef       	ldi	r18, 0xFF	; 255
    16fe:	83 ed       	ldi	r24, 0xD3	; 211
    1700:	90 e3       	ldi	r25, 0x30	; 48
    1702:	21 50       	subi	r18, 0x01	; 1
    1704:	80 40       	sbci	r24, 0x00	; 0
    1706:	90 40       	sbci	r25, 0x00	; 0
    1708:	e1 f7       	brne	.-8      	; 0x1702 <BRAIN_TEST_LOGIC+0x300>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <BRAIN_TEST_LOGIC+0x30a>
    170c:	00 00       	nop
    170e:	9c ce       	rjmp	.-712    	; 0x1448 <BRAIN_TEST_LOGIC+0x46>
    1710:	ef ef       	ldi	r30, 0xFF	; 255
    1712:	f9 e6       	ldi	r31, 0x69	; 105
    1714:	28 e1       	ldi	r18, 0x18	; 24
    1716:	e1 50       	subi	r30, 0x01	; 1
    1718:	f0 40       	sbci	r31, 0x00	; 0
    171a:	20 40       	sbci	r18, 0x00	; 0
    171c:	e1 f7       	brne	.-8      	; 0x1716 <BRAIN_TEST_LOGIC+0x314>
    171e:	00 c0       	rjmp	.+0      	; 0x1720 <BRAIN_TEST_LOGIC+0x31e>
    1720:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    1722:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
			goto tryNOR;
    1726:	c2 cf       	rjmp	.-124    	; 0x16ac <BRAIN_TEST_LOGIC+0x2aa>
		}
	}
	else if (temp == 4)     //XOR
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	98 12       	cpse	r9, r24
    172c:	4a c0       	rjmp	.+148    	; 0x17c2 <BRAIN_TEST_LOGIC+0x3c0>
	{
		
		performLogicGate(4,num1,num2,REAL_RES);
    172e:	9e 01       	movw	r18, r28
    1730:	27 5f       	subi	r18, 0xF7	; 247
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	ae 01       	movw	r20, r28
    1736:	4b 5f       	subi	r20, 0xFB	; 251
    1738:	5f 4f       	sbci	r21, 0xFF	; 255
    173a:	be 01       	movw	r22, r28
    173c:	6f 5f       	subi	r22, 0xFF	; 255
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	0e 94 a8 04 	call	0x950	; 0x950 <performLogicGate>
		tryXOR:
		cond = TRUE;
    1744:	11 e0       	ldi	r17, 0x01	; 1
    1746:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," XOR ");
    1748:	4f e7       	ldi	r20, 0x7F	; 127
    174a:	51 e0       	ldi	r21, 0x01	; 1
    174c:	be 01       	movw	r22, r28
    174e:	6b 5f       	subi	r22, 0xFB	; 251
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	ce 01       	movw	r24, r28
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	0e 94 52 05 	call	0xaa4	; 0xaa4 <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    175a:	be 01       	movw	r22, r28
    175c:	63 5f       	subi	r22, 0xF3	; 243
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	ce 01       	movw	r24, r28
    1762:	09 96       	adiw	r24, 0x09	; 9
    1764:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <getLogicResult>
		if (cond)
    1768:	8d 85       	ldd	r24, Y+13	; 0x0d
    176a:	88 23       	and	r24, r24
    176c:	51 f0       	breq	.+20     	; 0x1782 <BRAIN_TEST_LOGIC+0x380>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    176e:	8c e5       	ldi	r24, 0x5C	; 92
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
			DIO_vidWriteLowNibble(GPIOA,tries);
    1776:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <tries>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
    1780:	6b c0       	rjmp	.+214    	; 0x1858 <BRAIN_TEST_LOGIC+0x456>
			}else{
			count = triesCount(tries);
    1782:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    1786:	0e 94 bb 09 	call	0x1376	; 0x1376 <triesCount>
			if(count == 0)
    178a:	81 11       	cpse	r24, r1
    178c:	0e c0       	rjmp	.+28     	; 0x17aa <BRAIN_TEST_LOGIC+0x3a8>
			{
				LogicWrongAnswer(REAL_RES);
    178e:	ce 01       	movw	r24, r28
    1790:	09 96       	adiw	r24, 0x09	; 9
    1792:	0e 94 ab 05 	call	0xb56	; 0xb56 <LogicWrongAnswer>
    1796:	9f ef       	ldi	r25, 0xFF	; 255
    1798:	e3 ed       	ldi	r30, 0xD3	; 211
    179a:	f0 e3       	ldi	r31, 0x30	; 48
    179c:	91 50       	subi	r25, 0x01	; 1
    179e:	e0 40       	sbci	r30, 0x00	; 0
    17a0:	f0 40       	sbci	r31, 0x00	; 0
    17a2:	e1 f7       	brne	.-8      	; 0x179c <BRAIN_TEST_LOGIC+0x39a>
    17a4:	00 c0       	rjmp	.+0      	; 0x17a6 <BRAIN_TEST_LOGIC+0x3a4>
    17a6:	00 00       	nop
    17a8:	4f ce       	rjmp	.-866    	; 0x1448 <BRAIN_TEST_LOGIC+0x46>
    17aa:	2f ef       	ldi	r18, 0xFF	; 255
    17ac:	89 e6       	ldi	r24, 0x69	; 105
    17ae:	98 e1       	ldi	r25, 0x18	; 24
    17b0:	21 50       	subi	r18, 0x01	; 1
    17b2:	80 40       	sbci	r24, 0x00	; 0
    17b4:	90 40       	sbci	r25, 0x00	; 0
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <BRAIN_TEST_LOGIC+0x3ae>
    17b8:	00 c0       	rjmp	.+0      	; 0x17ba <BRAIN_TEST_LOGIC+0x3b8>
    17ba:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    17bc:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>

			goto tryXOR;
    17c0:	c2 cf       	rjmp	.-124    	; 0x1746 <BRAIN_TEST_LOGIC+0x344>
		}
	}
	else                    //XNOR
	{
		
		performLogicGate(5,num1,num2,REAL_RES);
    17c2:	9e 01       	movw	r18, r28
    17c4:	27 5f       	subi	r18, 0xF7	; 247
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	ae 01       	movw	r20, r28
    17ca:	4b 5f       	subi	r20, 0xFB	; 251
    17cc:	5f 4f       	sbci	r21, 0xFF	; 255
    17ce:	be 01       	movw	r22, r28
    17d0:	6f 5f       	subi	r22, 0xFF	; 255
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	85 e0       	ldi	r24, 0x05	; 5
    17d6:	0e 94 a8 04 	call	0x950	; 0x950 <performLogicGate>
		tryXNOR:
		cond = TRUE;
    17da:	11 e0       	ldi	r17, 0x01	; 1
    17dc:	1d 87       	std	Y+13, r17	; 0x0d
		showLogicEquation(num1,num2," XNOR ");
    17de:	45 e8       	ldi	r20, 0x85	; 133
    17e0:	51 e0       	ldi	r21, 0x01	; 1
    17e2:	be 01       	movw	r22, r28
    17e4:	6b 5f       	subi	r22, 0xFB	; 251
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <showLogicEquation>
		getLogicResult(REAL_RES,&cond);
    17f0:	be 01       	movw	r22, r28
    17f2:	63 5f       	subi	r22, 0xF3	; 243
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	ce 01       	movw	r24, r28
    17f8:	09 96       	adiw	r24, 0x09	; 9
    17fa:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <getLogicResult>
		
		if (cond)
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	88 23       	and	r24, r24
    1802:	51 f0       	breq	.+20     	; 0x1818 <BRAIN_TEST_LOGIC+0x416>
		{
			LCD_voidDisplayString4bit(" Correct Ans :) ");
    1804:	8c e5       	ldi	r24, 0x5C	; 92
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
			DIO_vidWriteLowNibble(GPIOA,tries);
    180c:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <tries>
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
    1816:	20 c0       	rjmp	.+64     	; 0x1858 <BRAIN_TEST_LOGIC+0x456>
			}else{
			count = triesCount(tries);
    1818:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    181c:	0e 94 bb 09 	call	0x1376	; 0x1376 <triesCount>
			if(count == 0)
    1820:	81 11       	cpse	r24, r1
    1822:	0e c0       	rjmp	.+28     	; 0x1840 <BRAIN_TEST_LOGIC+0x43e>
			{
				LogicWrongAnswer(REAL_RES);
    1824:	ce 01       	movw	r24, r28
    1826:	09 96       	adiw	r24, 0x09	; 9
    1828:	0e 94 ab 05 	call	0xb56	; 0xb56 <LogicWrongAnswer>
    182c:	ef ef       	ldi	r30, 0xFF	; 255
    182e:	f3 ed       	ldi	r31, 0xD3	; 211
    1830:	20 e3       	ldi	r18, 0x30	; 48
    1832:	e1 50       	subi	r30, 0x01	; 1
    1834:	f0 40       	sbci	r31, 0x00	; 0
    1836:	20 40       	sbci	r18, 0x00	; 0
    1838:	e1 f7       	brne	.-8      	; 0x1832 <BRAIN_TEST_LOGIC+0x430>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <BRAIN_TEST_LOGIC+0x43a>
    183c:	00 00       	nop
    183e:	04 ce       	rjmp	.-1016   	; 0x1448 <BRAIN_TEST_LOGIC+0x46>
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	99 e6       	ldi	r25, 0x69	; 105
    1844:	e8 e1       	ldi	r30, 0x18	; 24
    1846:	81 50       	subi	r24, 0x01	; 1
    1848:	90 40       	sbci	r25, 0x00	; 0
    184a:	e0 40       	sbci	r30, 0x00	; 0
    184c:	e1 f7       	brne	.-8      	; 0x1846 <BRAIN_TEST_LOGIC+0x444>
    184e:	00 c0       	rjmp	.+0      	; 0x1850 <BRAIN_TEST_LOGIC+0x44e>
    1850:	00 00       	nop
				_delay_ms(1000);
				goto Brain_Test_rand_logic;
			}
			_delay_ms(500);
			LCD_vidClearScreen4bit();
    1852:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>

			goto tryXNOR;
    1856:	c2 cf       	rjmp	.-124    	; 0x17dc <BRAIN_TEST_LOGIC+0x3da>
    1858:	ff ef       	ldi	r31, 0xFF	; 255
    185a:	23 ed       	ldi	r18, 0xD3	; 211
    185c:	80 e3       	ldi	r24, 0x30	; 48
    185e:	f1 50       	subi	r31, 0x01	; 1
    1860:	20 40       	sbci	r18, 0x00	; 0
    1862:	80 40       	sbci	r24, 0x00	; 0
    1864:	e1 f7       	brne	.-8      	; 0x185e <BRAIN_TEST_LOGIC+0x45c>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <BRAIN_TEST_LOGIC+0x466>
    1868:	00 00       	nop
		}
	}
	_delay_ms(1000);
	if(BRAIN_TEST_OPTION)
    186a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <BRAIN_TEST_OPTION>
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <BRAIN_TEST_LOGIC+0x472>
    1872:	ea cd       	rjmp	.-1068   	; 0x1448 <BRAIN_TEST_LOGIC+0x46>
	{
		return;
	}
	goto Brain_Test_rand_logic;
}
    1874:	2d 96       	adiw	r28, 0x0d	; 13
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	df 90       	pop	r13
    188e:	cf 90       	pop	r12
    1890:	bf 90       	pop	r11
    1892:	af 90       	pop	r10
    1894:	9f 90       	pop	r9
    1896:	8f 90       	pop	r8
    1898:	08 95       	ret

0000189a <BRAIN_TEST_ARTH>:

void BRAIN_TEST_ARTH() {
    189a:	2f 92       	push	r2
    189c:	3f 92       	push	r3
    189e:	4f 92       	push	r4
    18a0:	5f 92       	push	r5
    18a2:	6f 92       	push	r6
    18a4:	7f 92       	push	r7
    18a6:	8f 92       	push	r8
    18a8:	9f 92       	push	r9
    18aa:	af 92       	push	r10
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	2a 97       	sbiw	r28, 0x0a	; 10
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
	// Clear the LCD screen
	LCD_vidClearScreen4bit();
    18ce:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	u16 sum;
	s16 res;

	// Label to allow going back to generate new numbers
	Brain_Test_rand_arth:
	tries = 3; // Number of tries allowed
    18d2:	0f 2e       	mov	r0, r31
    18d4:	f3 e0       	ldi	r31, 0x03	; 3
    18d6:	4f 2e       	mov	r4, r31
    18d8:	f0 2d       	mov	r31, r0

	// Get input from the user
	while (i <= 7) {
		SEL = getFromKeypad();
		if (SEL == '=') {
			numRes[i] = '\0'; // Null-terminate the input array
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	9a 87       	std	Y+10, r25	; 0x0a
    18e0:	89 87       	std	Y+9, r24	; 0x09
	LCD_vidMoveCursor4bit(2, 1);
	LCD_voidDisplayString4bit("= ");

	// Initialize variables for input and calculation
	i = 0;
	counter = 0;
    18e2:	71 2c       	mov	r7, r1
    18e4:	81 2c       	mov	r8, r1

	// Get input from the user
	while (i <= 7) {
		SEL = getFromKeypad();
		if (SEL == '=') {
			numRes[i] = '\0'; // Null-terminate the input array
    18e6:	59 84       	ldd	r5, Y+9	; 0x09
    18e8:	6a 84       	ldd	r6, Y+10	; 0x0a
	u16 sum;
	s16 res;

	// Label to allow going back to generate new numbers
	Brain_Test_rand_arth:
	tries = 3; // Number of tries allowed
    18ea:	40 92 23 02 	sts	0x0223, r4	; 0x800223 <tries>
	DIO_vidWriteLowNibble(GPIOA, tries);
    18ee:	64 2d       	mov	r22, r4
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
	num1 = rand() % 101; // Random number generation for operand 1
    18f6:	0e 94 0b 10 	call	0x2016	; 0x2016 <rand>
    18fa:	65 e6       	ldi	r22, 0x65	; 101
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__divmodhi4>
    1902:	18 2f       	mov	r17, r24
    1904:	08 2f       	mov	r16, r24
	num2 = rand() % 101; // Random number generation for operand 2
    1906:	0e 94 0b 10 	call	0x2016	; 0x2016 <rand>
    190a:	65 e6       	ldi	r22, 0x65	; 101
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__divmodhi4>
    1912:	5c 01       	movw	r10, r24
    1914:	98 2e       	mov	r9, r24
	temp = rand() % 4; // Random operation (+, -, *, %)
    1916:	0e 94 0b 10 	call	0x2016	; 0x2016 <rand>
    191a:	83 70       	andi	r24, 0x03	; 3
    191c:	90 78       	andi	r25, 0x80	; 128
    191e:	99 23       	and	r25, r25
    1920:	24 f4       	brge	.+8      	; 0x192a <BRAIN_TEST_ARTH+0x90>
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	8c 6f       	ori	r24, 0xFC	; 252
    1926:	9f 6f       	ori	r25, 0xFF	; 255
    1928:	01 96       	adiw	r24, 0x01	; 1

	// Select the operation based on the generated random number
	if (temp == 0) {
    192a:	81 11       	cpse	r24, r1
    192c:	08 c0       	rjmp	.+16     	; 0x193e <BRAIN_TEST_ARTH+0xa4>
		oprand = " + ";
		res = num1 + num2;
    192e:	bb 24       	eor	r11, r11
    1930:	a1 0e       	add	r10, r17
    1932:	b1 1c       	adc	r11, r1
	num2 = rand() % 101; // Random number generation for operand 2
	temp = rand() % 4; // Random operation (+, -, *, %)

	// Select the operation based on the generated random number
	if (temp == 0) {
		oprand = " + ";
    1934:	ec e8       	ldi	r30, 0x8C	; 140
    1936:	f1 e0       	ldi	r31, 0x01	; 1
    1938:	3e 2e       	mov	r3, r30
    193a:	2f 2e       	mov	r2, r31
    193c:	23 c0       	rjmp	.+70     	; 0x1984 <BRAIN_TEST_ARTH+0xea>
		res = num1 + num2;
		} else if (temp == 1) {
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	69 f4       	brne	.+26     	; 0x195c <BRAIN_TEST_ARTH+0xc2>
		oprand = " - ";
		if (num1 < num2) {
    1942:	09 15       	cp	r16, r9
    1944:	10 f4       	brcc	.+4      	; 0x194a <BRAIN_TEST_ARTH+0xb0>
			num1 = num1 + num2;
			num2 = num1 - num2;
			num1 = num1 - num2;
    1946:	0a 2d       	mov	r16, r10
		res = num1 + num2;
		} else if (temp == 1) {
		oprand = " - ";
		if (num1 < num2) {
			num1 = num1 + num2;
			num2 = num1 - num2;
    1948:	91 2e       	mov	r9, r17
			num1 = num1 - num2;
		}
		res = num1 - num2;
    194a:	a0 2e       	mov	r10, r16
    194c:	b1 2c       	mov	r11, r1
    194e:	a9 18       	sub	r10, r9
    1950:	b1 08       	sbc	r11, r1
	// Select the operation based on the generated random number
	if (temp == 0) {
		oprand = " + ";
		res = num1 + num2;
		} else if (temp == 1) {
		oprand = " - ";
    1952:	80 e9       	ldi	r24, 0x90	; 144
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	38 2e       	mov	r3, r24
    1958:	29 2e       	mov	r2, r25
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <BRAIN_TEST_ARTH+0xea>
			num1 = num1 + num2;
			num2 = num1 - num2;
			num1 = num1 - num2;
		}
		res = num1 - num2;
		} else if (temp == 2) {
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	41 f4       	brne	.+16     	; 0x1970 <BRAIN_TEST_ARTH+0xd6>
		oprand = " * ";
		res = num1 * num2;
    1960:	a1 9e       	mul	r10, r17
    1962:	50 01       	movw	r10, r0
    1964:	11 24       	eor	r1, r1
			num2 = num1 - num2;
			num1 = num1 - num2;
		}
		res = num1 - num2;
		} else if (temp == 2) {
		oprand = " * ";
    1966:	e4 e9       	ldi	r30, 0x94	; 148
    1968:	f1 e0       	ldi	r31, 0x01	; 1
    196a:	3e 2e       	mov	r3, r30
    196c:	2f 2e       	mov	r2, r31
    196e:	0a c0       	rjmp	.+20     	; 0x1984 <BRAIN_TEST_ARTH+0xea>
		res = num1 * num2;
		} else {
		num1 = abs(num1);
		num2 = abs(num2);
		oprand = " % ";
		res = num1 % num2;
    1970:	80 2f       	mov	r24, r16
    1972:	69 2d       	mov	r22, r9
    1974:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__udivmodqi4>
    1978:	a9 2e       	mov	r10, r25
    197a:	b1 2c       	mov	r11, r1
		oprand = " * ";
		res = num1 * num2;
		} else {
		num1 = abs(num1);
		num2 = abs(num2);
		oprand = " % ";
    197c:	88 e9       	ldi	r24, 0x98	; 152
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	38 2e       	mov	r3, r24
    1982:	29 2e       	mov	r2, r25
		res = num1 % num2;
	}

	// Display the arithmetic operation on the LCD
	try:
	LCD_vidClearScreen4bit();
    1984:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	LCD_vidDisplayNumber4bit(num1);
    1988:	20 2f       	mov	r18, r16
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vidDisplayNumber4bit>
	LCD_voidDisplayString4bit(oprand);
    199c:	83 2d       	mov	r24, r3
    199e:	92 2d       	mov	r25, r2
    19a0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
	LCD_vidDisplayNumber4bit(num2);
    19a4:	29 2d       	mov	r18, r9
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 b5 03 	call	0x76a	; 0x76a <LCD_vidDisplayNumber4bit>
	LCD_vidMoveCursor4bit(2, 1);
    19b8:	61 e0       	ldi	r22, 0x01	; 1
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("= ");
    19c0:	8c e9       	ldi	r24, 0x9C	; 156
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
    19c8:	fe 01       	movw	r30, r28
    19ca:	31 96       	adiw	r30, 0x01	; 1
    19cc:	6f 01       	movw	r12, r30

	// Initialize variables for input and calculation
	i = 0;
	counter = 0;
    19ce:	e7 2c       	mov	r14, r7
    19d0:	f8 2c       	mov	r15, r8
	sum = 0;

	// Get input from the user
	while (i <= 7) {
		SEL = getFromKeypad();
    19d2:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
    19d6:	18 2f       	mov	r17, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
		if (SEL == '=') {
    19da:	8d 33       	cpi	r24, 0x3D	; 61
    19dc:	91 05       	cpc	r25, r1
    19de:	51 f4       	brne	.+20     	; 0x19f4 <BRAIN_TEST_ARTH+0x15a>
			numRes[i] = '\0'; // Null-terminate the input array
    19e0:	e1 e0       	ldi	r30, 0x01	; 1
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	ec 0f       	add	r30, r28
    19e6:	fd 1f       	adc	r31, r29
    19e8:	ee 0d       	add	r30, r14
    19ea:	f1 1d       	adc	r31, r1
    19ec:	10 82       	st	Z, r1
			LCD_vidClearScreen4bit();
    19ee:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
			break;
    19f2:	1e c0       	rjmp	.+60     	; 0x1a30 <BRAIN_TEST_ARTH+0x196>
			} else if (SEL == 'C') {
    19f4:	83 34       	cpi	r24, 0x43	; 67
    19f6:	91 05       	cpc	r25, r1
    19f8:	79 f4       	brne	.+30     	; 0x1a18 <BRAIN_TEST_ARTH+0x17e>
			BRAIN_TEST_RAND_OPTION = 1; // Return to menu if 'C' is pressed
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
			LCD_vidClearScreen4bit();
    1a00:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
    1a04:	ff ef       	ldi	r31, 0xFF	; 255
    1a06:	29 e6       	ldi	r18, 0x69	; 105
    1a08:	88 e1       	ldi	r24, 0x18	; 24
    1a0a:	f1 50       	subi	r31, 0x01	; 1
    1a0c:	20 40       	sbci	r18, 0x00	; 0
    1a0e:	80 40       	sbci	r24, 0x00	; 0
    1a10:	e1 f7       	brne	.-8      	; 0x1a0a <BRAIN_TEST_ARTH+0x170>
    1a12:	00 c0       	rjmp	.+0      	; 0x1a14 <BRAIN_TEST_ARTH+0x17a>
    1a14:	00 00       	nop
    1a16:	4b c0       	rjmp	.+150    	; 0x1aae <BRAIN_TEST_ARTH+0x214>
			_delay_ms(500);
			return;
			} else {
			LCD_vidDisplayChar4bit(SEL);
    1a18:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_vidDisplayChar4bit>
			numRes[i] = SEL;
    1a1c:	f6 01       	movw	r30, r12
    1a1e:	11 93       	st	Z+, r17
    1a20:	6f 01       	movw	r12, r30
    1a22:	ff ef       	ldi	r31, 0xFF	; 255
    1a24:	ef 1a       	sub	r14, r31
    1a26:	ff 0a       	sbc	r15, r31
	i = 0;
	counter = 0;
	sum = 0;

	// Get input from the user
	while (i <= 7) {
    1a28:	28 e0       	ldi	r18, 0x08	; 8
    1a2a:	e2 16       	cp	r14, r18
    1a2c:	f1 04       	cpc	r15, r1
    1a2e:	89 f6       	brne	.-94     	; 0x19d2 <BRAIN_TEST_ARTH+0x138>
		}
		i++;
	}

	// Convert input to integer for comparison
	sum = arrToInt(numRes, counter);
    1a30:	6e 2d       	mov	r22, r14
    1a32:	85 2d       	mov	r24, r5
    1a34:	96 2d       	mov	r25, r6
    1a36:	0e 94 22 07 	call	0xe44	; 0xe44 <arrToInt>

	// Check if the sum matches the result
	if (sum == res) {
    1a3a:	a6 16       	cp	r10, r22
    1a3c:	b7 06       	cpc	r11, r23
    1a3e:	a9 f4       	brne	.+42     	; 0x1a6a <BRAIN_TEST_ARTH+0x1d0>
		LCD_vidClearScreen4bit();
    1a40:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
		LCD_voidDisplayString4bit("Correct Answer:)");
    1a44:	8f e9       	ldi	r24, 0x9F	; 159
    1a46:	91 e0       	ldi	r25, 0x01	; 1
    1a48:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	93 ed       	ldi	r25, 0xD3	; 211
    1a50:	e0 e3       	ldi	r30, 0x30	; 48
    1a52:	81 50       	subi	r24, 0x01	; 1
    1a54:	90 40       	sbci	r25, 0x00	; 0
    1a56:	e0 40       	sbci	r30, 0x00	; 0
    1a58:	e1 f7       	brne	.-8      	; 0x1a52 <BRAIN_TEST_ARTH+0x1b8>
    1a5a:	00 c0       	rjmp	.+0      	; 0x1a5c <BRAIN_TEST_ARTH+0x1c2>
    1a5c:	00 00       	nop
		LCD_vidClearScreen4bit();
		goto try; // Try again if the answer is incorrect
	}

	_delay_ms(1000);
	if (BRAIN_TEST_OPTION) {
    1a5e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <BRAIN_TEST_OPTION>
    1a62:	88 23       	and	r24, r24
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <BRAIN_TEST_ARTH+0x1ce>
    1a66:	41 cf       	rjmp	.-382    	; 0x18ea <BRAIN_TEST_ARTH+0x50>
    1a68:	22 c0       	rjmp	.+68     	; 0x1aae <BRAIN_TEST_ARTH+0x214>
	// Check if the sum matches the result
	if (sum == res) {
		LCD_vidClearScreen4bit();
		LCD_voidDisplayString4bit("Correct Answer:)");
		} else {
		count = triesCount(tries);
    1a6a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tries>
    1a6e:	0e 94 bb 09 	call	0x1376	; 0x1376 <triesCount>
		if (count == 0) {
    1a72:	81 11       	cpse	r24, r1
    1a74:	10 c0       	rjmp	.+32     	; 0x1a96 <BRAIN_TEST_ARTH+0x1fc>
			ArthWrongAnswer(res);
    1a76:	b5 01       	movw	r22, r10
    1a78:	bb 0c       	add	r11, r11
    1a7a:	88 0b       	sbc	r24, r24
    1a7c:	99 0b       	sbc	r25, r25
    1a7e:	0e 94 6d 05 	call	0xada	; 0xada <ArthWrongAnswer>
    1a82:	ff ef       	ldi	r31, 0xFF	; 255
    1a84:	23 ed       	ldi	r18, 0xD3	; 211
    1a86:	80 e3       	ldi	r24, 0x30	; 48
    1a88:	f1 50       	subi	r31, 0x01	; 1
    1a8a:	20 40       	sbci	r18, 0x00	; 0
    1a8c:	80 40       	sbci	r24, 0x00	; 0
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <BRAIN_TEST_ARTH+0x1ee>
    1a90:	00 c0       	rjmp	.+0      	; 0x1a92 <BRAIN_TEST_ARTH+0x1f8>
    1a92:	00 00       	nop
    1a94:	2a cf       	rjmp	.-428    	; 0x18ea <BRAIN_TEST_ARTH+0x50>
    1a96:	9f ef       	ldi	r25, 0xFF	; 255
    1a98:	e9 e6       	ldi	r30, 0x69	; 105
    1a9a:	f8 e1       	ldi	r31, 0x18	; 24
    1a9c:	91 50       	subi	r25, 0x01	; 1
    1a9e:	e0 40       	sbci	r30, 0x00	; 0
    1aa0:	f0 40       	sbci	r31, 0x00	; 0
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <BRAIN_TEST_ARTH+0x202>
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <BRAIN_TEST_ARTH+0x20c>
    1aa6:	00 00       	nop
			_delay_ms(1000);
			goto Brain_Test_rand_arth;
		}
		_delay_ms(500);
		LCD_vidClearScreen4bit();
    1aa8:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
		goto try; // Try again if the answer is incorrect
    1aac:	6b cf       	rjmp	.-298    	; 0x1984 <BRAIN_TEST_ARTH+0xea>
	_delay_ms(1000);
	if (BRAIN_TEST_OPTION) {
		return; // Return to menu if option is chosen
	}
	goto Brain_Test_rand_arth;
}
    1aae:	2a 96       	adiw	r28, 0x0a	; 10
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	df 90       	pop	r13
    1ac8:	cf 90       	pop	r12
    1aca:	bf 90       	pop	r11
    1acc:	af 90       	pop	r10
    1ace:	9f 90       	pop	r9
    1ad0:	8f 90       	pop	r8
    1ad2:	7f 90       	pop	r7
    1ad4:	6f 90       	pop	r6
    1ad6:	5f 90       	pop	r5
    1ad8:	4f 90       	pop	r4
    1ada:	3f 90       	pop	r3
    1adc:	2f 90       	pop	r2
    1ade:	08 95       	ret

00001ae0 <BRAIN_TEST_SPECIFIC>:
}

void BRAIN_TEST_SPECIFIC(){
	u8 eq_mode;
	getMode :
	LCD_vidClearScreen4bit();
    1ae0:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	LCD_vidMoveCursor4bit(1,1);
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit(" Choose Option : ");
    1aec:	80 eb       	ldi	r24, 0xB0	; 176
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit(2,1);
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("1_ Logic 2_ Arth");
    1afc:	82 ec       	ldi	r24, 0xC2	; 194
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
	eq_mode = getFromKeypad();
    1b04:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
	switch (eq_mode){
    1b08:	81 33       	cpi	r24, 0x31	; 49
    1b0a:	19 f0       	breq	.+6      	; 0x1b12 <BRAIN_TEST_SPECIFIC+0x32>
    1b0c:	82 33       	cpi	r24, 0x32	; 50
    1b0e:	21 f0       	breq	.+8      	; 0x1b18 <BRAIN_TEST_SPECIFIC+0x38>
    1b10:	06 c0       	rjmp	.+12     	; 0x1b1e <BRAIN_TEST_SPECIFIC+0x3e>
		case '1' :
			BRAIN_TEST_LOGIC();
    1b12:	0e 94 01 0a 	call	0x1402	; 0x1402 <BRAIN_TEST_LOGIC>
			break;
    1b16:	08 95       	ret
		case '2' :
			BRAIN_TEST_ARTH();
    1b18:	0e 94 4d 0c 	call	0x189a	; 0x189a <BRAIN_TEST_ARTH>
			break;
    1b1c:	08 95       	ret
		default:
			ERROR_CHOICE();
    1b1e:	0e 94 48 09 	call	0x1290	; 0x1290 <ERROR_CHOICE>
			goto getMode;
    1b22:	de cf       	rjmp	.-68     	; 0x1ae0 <BRAIN_TEST_SPECIFIC>

00001b24 <BRAIN_TEST_RANDOM>:
	}
}

	
void BRAIN_TEST_RANDOM()
{
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
	u8 eq_mode;
	
	brain_test_rand:
	eq_mode = rand()%2;
    1b28:	0e 94 0b 10 	call	0x2016	; 0x2016 <rand>
    1b2c:	ec 01       	movw	r28, r24
	LCD_vidClearScreen4bit();
    1b2e:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	switch (eq_mode){
    1b32:	ce 01       	movw	r24, r28
    1b34:	81 70       	andi	r24, 0x01	; 1
    1b36:	90 78       	andi	r25, 0x80	; 128
    1b38:	99 23       	and	r25, r25
    1b3a:	24 f4       	brge	.+8      	; 0x1b44 <BRAIN_TEST_RANDOM+0x20>
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	8e 6f       	ori	r24, 0xFE	; 254
    1b40:	9f 6f       	ori	r25, 0xFF	; 255
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	99 27       	eor	r25, r25
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	19 f0       	breq	.+6      	; 0x1b50 <BRAIN_TEST_RANDOM+0x2c>
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	51 f0       	breq	.+20     	; 0x1b62 <BRAIN_TEST_RANDOM+0x3e>
    1b4e:	11 c0       	rjmp	.+34     	; 0x1b72 <BRAIN_TEST_RANDOM+0x4e>
		case 0 :
			BRAIN_TEST_RAND_OPTION=0;
    1b50:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__data_end>
			BRAIN_TEST_ARTH();
    1b54:	0e 94 4d 0c 	call	0x189a	; 0x189a <BRAIN_TEST_ARTH>
			if(!BRAIN_TEST_RAND_OPTION){
    1b58:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
    1b5c:	88 23       	and	r24, r24
    1b5e:	21 f3       	breq	.-56     	; 0x1b28 <BRAIN_TEST_RANDOM+0x4>
    1b60:	08 c0       	rjmp	.+16     	; 0x1b72 <BRAIN_TEST_RANDOM+0x4e>
				goto brain_test_rand;
			}
			break;
		case 1 :
			BRAIN_TEST_RAND_OPTION=0;
    1b62:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__data_end>
			BRAIN_TEST_LOGIC();
    1b66:	0e 94 01 0a 	call	0x1402	; 0x1402 <BRAIN_TEST_LOGIC>
			if(!BRAIN_TEST_RAND_OPTION){
    1b6a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
    1b6e:	88 23       	and	r24, r24
    1b70:	d9 f2       	breq	.-74     	; 0x1b28 <BRAIN_TEST_RANDOM+0x4>
			break;
		default:
			break;
	}
	
}
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <BRAIN_TEST>:

// Brain Test Functions

void BRAIN_TEST(){
	
	tries = 3;
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <tries>
	DIO_vidWriteLowNibble(GPIOA,tries);
    1b7e:	63 e0       	ldi	r22, 0x03	; 3
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_vidWriteLowNibble>
	Brain_Test:
	LCD_vidClearScreen4bit();
    1b86:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	LCD_voidDisplayString4bit("Choose a mode");
    1b8a:	83 ed       	ldi	r24, 0xD3	; 211
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit(2,1);
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("1-rand 2-spec");
    1b9a:	81 ee       	ldi	r24, 0xE1	; 225
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
	u8 mode1 =getFromKeypad();
    1ba2:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
	switch(mode1) {
    1ba6:	82 33       	cpi	r24, 0x32	; 50
    1ba8:	51 f0       	breq	.+20     	; 0x1bbe <BRAIN_TEST+0x46>
    1baa:	83 34       	cpi	r24, 0x43	; 67
    1bac:	81 f0       	breq	.+32     	; 0x1bce <BRAIN_TEST+0x56>
    1bae:	81 33       	cpi	r24, 0x31	; 49
    1bb0:	59 f4       	brne	.+22     	; 0x1bc8 <BRAIN_TEST+0x50>
		case '1' :
			BRAIN_TEST_OPTION=1;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <BRAIN_TEST_OPTION>
			BRAIN_TEST_RANDOM();
    1bb8:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <BRAIN_TEST_RANDOM>
			break;
    1bbc:	08 95       	ret
		case '2' :
			BRAIN_TEST_OPTION=0;
    1bbe:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <BRAIN_TEST_OPTION>
			BRAIN_TEST_SPECIFIC();
    1bc2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <BRAIN_TEST_SPECIFIC>
			break;
    1bc6:	08 95       	ret
		case 'C' :
			return;
			break;
		default :
			ERROR_CHOICE();
    1bc8:	0e 94 48 09 	call	0x1290	; 0x1290 <ERROR_CHOICE>
			goto Brain_Test;
    1bcc:	dc cf       	rjmp	.-72     	; 0x1b86 <BRAIN_TEST+0xe>
    1bce:	08 95       	ret

00001bd0 <main>:


int main(void)
{
	// Initialization //
	DIO_vidSetPinMode(GPIOC,PIN0,OUTPUT);
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_vidSetPinMode>
	DIO_vidWritePin(GPIOC,PIN2,LOW);
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	62 e0       	ldi	r22, 0x02	; 2
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_vidWritePin>
	Init();
    1be4:	0e 94 94 09 	call	0x1328	; 0x1328 <Init>
	LCD_voidDisplayString4bit("   Welcome :)   ");
    1be8:	8f ee       	ldi	r24, 0xEF	; 239
    1bea:	91 e0       	ldi	r25, 0x01	; 1
    1bec:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
    1bf0:	2f ef       	ldi	r18, 0xFF	; 255
    1bf2:	89 e6       	ldi	r24, 0x69	; 105
    1bf4:	98 e1       	ldi	r25, 0x18	; 24
    1bf6:	21 50       	subi	r18, 0x01	; 1
    1bf8:	80 40       	sbci	r24, 0x00	; 0
    1bfa:	90 40       	sbci	r25, 0x00	; 0
    1bfc:	e1 f7       	brne	.-8      	; 0x1bf6 <main+0x26>
    1bfe:	00 c0       	rjmp	.+0      	; 0x1c00 <main+0x30>
    1c00:	00 00       	nop
	_delay_ms(500);
	LCD_vidClearScreen4bit();
    1c02:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_vidClearScreen4bit>
	LCD_voidDisplayString4bit("This Project is ");
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	92 e0       	ldi	r25, 0x02	; 2
    1c0a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
	LCD_vidMoveCursor4bit(2,1);
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_vidMoveCursor4bit>
	LCD_voidDisplayString4bit("Made By ASMAK :)");
    1c16:	81 e1       	ldi	r24, 0x11	; 17
    1c18:	92 e0       	ldi	r25, 0x02	; 2
    1c1a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_voidDisplayString4bit>
    1c1e:	2f ef       	ldi	r18, 0xFF	; 255
    1c20:	83 ed       	ldi	r24, 0xD3	; 211
    1c22:	90 e3       	ldi	r25, 0x30	; 48
    1c24:	21 50       	subi	r18, 0x01	; 1
    1c26:	80 40       	sbci	r24, 0x00	; 0
    1c28:	90 40       	sbci	r25, 0x00	; 0
    1c2a:	e1 f7       	brne	.-8      	; 0x1c24 <main+0x54>
    1c2c:	00 c0       	rjmp	.+0      	; 0x1c2e <main+0x5e>
    1c2e:	00 00       	nop
	_delay_ms(1000);
	entry:ENTRY_MODE();
    1c30:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <ENTRY_MODE>
	u8 mode =getFromKeypad();
    1c34:	0e 94 48 06 	call	0xc90	; 0xc90 <getFromKeypad>
	
	switch(mode) {
    1c38:	82 33       	cpi	r24, 0x32	; 50
    1c3a:	39 f0       	breq	.+14     	; 0x1c4a <main+0x7a>
    1c3c:	83 33       	cpi	r24, 0x33	; 51
    1c3e:	41 f0       	breq	.+16     	; 0x1c50 <main+0x80>
    1c40:	81 33       	cpi	r24, 0x31	; 49
    1c42:	49 f4       	brne	.+18     	; 0x1c56 <main+0x86>
		case '1' :
			BRAIN_TEST();
    1c44:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <BRAIN_TEST>
			break;
    1c48:	f3 cf       	rjmp	.-26     	; 0x1c30 <main+0x60>
		case '2' :
			CALCULATOR();
    1c4a:	0e 94 dd 07 	call	0xfba	; 0xfba <CALCULATOR>
			break;
    1c4e:	f0 cf       	rjmp	.-32     	; 0x1c30 <main+0x60>
		case '3' :
			CONVERTER();
    1c50:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <CONVERTER>
			break;
    1c54:	ed cf       	rjmp	.-38     	; 0x1c30 <main+0x60>
		default :
			ERROR_CHOICE();
    1c56:	0e 94 48 09 	call	0x1290	; 0x1290 <ERROR_CHOICE>
			goto entry;
    1c5a:	ea cf       	rjmp	.-44     	; 0x1c30 <main+0x60>

00001c5c <__udivmodqi4>:
    1c5c:	99 1b       	sub	r25, r25
    1c5e:	79 e0       	ldi	r23, 0x09	; 9
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <__udivmodqi4_ep>

00001c62 <__udivmodqi4_loop>:
    1c62:	99 1f       	adc	r25, r25
    1c64:	96 17       	cp	r25, r22
    1c66:	08 f0       	brcs	.+2      	; 0x1c6a <__udivmodqi4_ep>
    1c68:	96 1b       	sub	r25, r22

00001c6a <__udivmodqi4_ep>:
    1c6a:	88 1f       	adc	r24, r24
    1c6c:	7a 95       	dec	r23
    1c6e:	c9 f7       	brne	.-14     	; 0x1c62 <__udivmodqi4_loop>
    1c70:	80 95       	com	r24
    1c72:	08 95       	ret

00001c74 <__divmodhi4>:
    1c74:	97 fb       	bst	r25, 7
    1c76:	07 2e       	mov	r0, r23
    1c78:	16 f4       	brtc	.+4      	; 0x1c7e <__divmodhi4+0xa>
    1c7a:	00 94       	com	r0
    1c7c:	07 d0       	rcall	.+14     	; 0x1c8c <__divmodhi4_neg1>
    1c7e:	77 fd       	sbrc	r23, 7
    1c80:	09 d0       	rcall	.+18     	; 0x1c94 <__divmodhi4_neg2>
    1c82:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__udivmodhi4>
    1c86:	07 fc       	sbrc	r0, 7
    1c88:	05 d0       	rcall	.+10     	; 0x1c94 <__divmodhi4_neg2>
    1c8a:	3e f4       	brtc	.+14     	; 0x1c9a <__divmodhi4_exit>

00001c8c <__divmodhi4_neg1>:
    1c8c:	90 95       	com	r25
    1c8e:	81 95       	neg	r24
    1c90:	9f 4f       	sbci	r25, 0xFF	; 255
    1c92:	08 95       	ret

00001c94 <__divmodhi4_neg2>:
    1c94:	70 95       	com	r23
    1c96:	61 95       	neg	r22
    1c98:	7f 4f       	sbci	r23, 0xFF	; 255

00001c9a <__divmodhi4_exit>:
    1c9a:	08 95       	ret

00001c9c <__muldi3>:
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	1f 93       	push	r17
    1ca2:	0f 93       	push	r16
    1ca4:	9a 9d       	mul	r25, r10
    1ca6:	f0 2d       	mov	r31, r0
    1ca8:	21 9f       	mul	r18, r17
    1caa:	f0 0d       	add	r31, r0
    1cac:	8b 9d       	mul	r24, r11
    1cae:	f0 0d       	add	r31, r0
    1cb0:	8a 9d       	mul	r24, r10
    1cb2:	e0 2d       	mov	r30, r0
    1cb4:	f1 0d       	add	r31, r1
    1cb6:	03 9f       	mul	r16, r19
    1cb8:	f0 0d       	add	r31, r0
    1cba:	02 9f       	mul	r16, r18
    1cbc:	e0 0d       	add	r30, r0
    1cbe:	f1 1d       	adc	r31, r1
    1cc0:	4e 9d       	mul	r20, r14
    1cc2:	e0 0d       	add	r30, r0
    1cc4:	f1 1d       	adc	r31, r1
    1cc6:	5e 9d       	mul	r21, r14
    1cc8:	f0 0d       	add	r31, r0
    1cca:	4f 9d       	mul	r20, r15
    1ccc:	f0 0d       	add	r31, r0
    1cce:	7f 93       	push	r23
    1cd0:	6f 93       	push	r22
    1cd2:	bf 92       	push	r11
    1cd4:	af 92       	push	r10
    1cd6:	5f 93       	push	r21
    1cd8:	4f 93       	push	r20
    1cda:	d5 01       	movw	r26, r10
    1cdc:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__umulhisi3>
    1ce0:	8b 01       	movw	r16, r22
    1ce2:	ac 01       	movw	r20, r24
    1ce4:	d7 01       	movw	r26, r14
    1ce6:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__umulhisi3>
    1cea:	eb 01       	movw	r28, r22
    1cec:	e8 0f       	add	r30, r24
    1cee:	f9 1f       	adc	r31, r25
    1cf0:	d6 01       	movw	r26, r12
    1cf2:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__muldi3_6>
    1cf6:	2f 91       	pop	r18
    1cf8:	3f 91       	pop	r19
    1cfa:	d6 01       	movw	r26, r12
    1cfc:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__umulhisi3>
    1d00:	c6 0f       	add	r28, r22
    1d02:	d7 1f       	adc	r29, r23
    1d04:	e8 1f       	adc	r30, r24
    1d06:	f9 1f       	adc	r31, r25
    1d08:	af 91       	pop	r26
    1d0a:	bf 91       	pop	r27
    1d0c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__muldi3_6>
    1d10:	2f 91       	pop	r18
    1d12:	3f 91       	pop	r19
    1d14:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__umulhisi3>
    1d18:	c6 0f       	add	r28, r22
    1d1a:	d7 1f       	adc	r29, r23
    1d1c:	e8 1f       	adc	r30, r24
    1d1e:	f9 1f       	adc	r31, r25
    1d20:	d6 01       	movw	r26, r12
    1d22:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__umulhisi3>
    1d26:	e6 0f       	add	r30, r22
    1d28:	f7 1f       	adc	r31, r23
    1d2a:	98 01       	movw	r18, r16
    1d2c:	be 01       	movw	r22, r28
    1d2e:	cf 01       	movw	r24, r30
    1d30:	11 24       	eor	r1, r1
    1d32:	0f 91       	pop	r16
    1d34:	1f 91       	pop	r17
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <__muldi3_6>:
    1d3c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__umulhisi3>
    1d40:	46 0f       	add	r20, r22
    1d42:	57 1f       	adc	r21, r23
    1d44:	c8 1f       	adc	r28, r24
    1d46:	d9 1f       	adc	r29, r25
    1d48:	08 f4       	brcc	.+2      	; 0x1d4c <__muldi3_6+0x10>
    1d4a:	31 96       	adiw	r30, 0x01	; 1
    1d4c:	08 95       	ret

00001d4e <__moddi3>:
    1d4e:	68 94       	set
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <__divdi3_moddi3>

00001d52 <__divdi3>:
    1d52:	e8 94       	clt

00001d54 <__divdi3_moddi3>:
    1d54:	f9 2f       	mov	r31, r25
    1d56:	f1 2b       	or	r31, r17
    1d58:	12 f0       	brmi	.+4      	; 0x1d5e <__divdi3_moddi3+0xa>
    1d5a:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__udivdi3_umoddi3>
    1d5e:	a0 e0       	ldi	r26, 0x00	; 0
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e5 eb       	ldi	r30, 0xB5	; 181
    1d64:	fe e0       	ldi	r31, 0x0E	; 14
    1d66:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__prologue_saves__+0xc>
    1d6a:	09 2e       	mov	r0, r25
    1d6c:	05 94       	asr	r0
    1d6e:	22 f4       	brpl	.+8      	; 0x1d78 <__divdi3_moddi3+0x24>
    1d70:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__negdi2>
    1d74:	11 23       	and	r17, r17
    1d76:	92 f4       	brpl	.+36     	; 0x1d9c <__divdi3_moddi3+0x48>
    1d78:	f0 e8       	ldi	r31, 0x80	; 128
    1d7a:	0f 26       	eor	r0, r31
    1d7c:	ff ef       	ldi	r31, 0xFF	; 255
    1d7e:	e0 94       	com	r14
    1d80:	f0 94       	com	r15
    1d82:	00 95       	com	r16
    1d84:	10 95       	com	r17
    1d86:	b0 94       	com	r11
    1d88:	c0 94       	com	r12
    1d8a:	d0 94       	com	r13
    1d8c:	a1 94       	neg	r10
    1d8e:	bf 0a       	sbc	r11, r31
    1d90:	cf 0a       	sbc	r12, r31
    1d92:	df 0a       	sbc	r13, r31
    1d94:	ef 0a       	sbc	r14, r31
    1d96:	ff 0a       	sbc	r15, r31
    1d98:	0f 0b       	sbc	r16, r31
    1d9a:	1f 0b       	sbc	r17, r31
    1d9c:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__udivmod64>
    1da0:	07 fc       	sbrc	r0, 7
    1da2:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <__negdi2>
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	ec e0       	ldi	r30, 0x0C	; 12
    1dac:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__epilogue_restores__+0xc>

00001db0 <__umoddi3>:
    1db0:	68 94       	set
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <__udivdi3_umoddi3>

00001db4 <__udivdi3>:
    1db4:	e8 94       	clt

00001db6 <__udivdi3_umoddi3>:
    1db6:	8f 92       	push	r8
    1db8:	9f 92       	push	r9
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__udivmod64>
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	9f 90       	pop	r9
    1dc8:	8f 90       	pop	r8
    1dca:	08 95       	ret

00001dcc <__udivmod64>:
    1dcc:	88 24       	eor	r8, r8
    1dce:	99 24       	eor	r9, r9
    1dd0:	f4 01       	movw	r30, r8
    1dd2:	e4 01       	movw	r28, r8
    1dd4:	b0 e4       	ldi	r27, 0x40	; 64
    1dd6:	9f 93       	push	r25
    1dd8:	aa 27       	eor	r26, r26
    1dda:	9a 15       	cp	r25, r10
    1ddc:	8b 04       	cpc	r8, r11
    1dde:	9c 04       	cpc	r9, r12
    1de0:	ed 05       	cpc	r30, r13
    1de2:	fe 05       	cpc	r31, r14
    1de4:	cf 05       	cpc	r28, r15
    1de6:	d0 07       	cpc	r29, r16
    1de8:	a1 07       	cpc	r26, r17
    1dea:	98 f4       	brcc	.+38     	; 0x1e12 <__udivmod64+0x46>
    1dec:	ad 2f       	mov	r26, r29
    1dee:	dc 2f       	mov	r29, r28
    1df0:	cf 2f       	mov	r28, r31
    1df2:	fe 2f       	mov	r31, r30
    1df4:	e9 2d       	mov	r30, r9
    1df6:	98 2c       	mov	r9, r8
    1df8:	89 2e       	mov	r8, r25
    1dfa:	98 2f       	mov	r25, r24
    1dfc:	87 2f       	mov	r24, r23
    1dfe:	76 2f       	mov	r23, r22
    1e00:	65 2f       	mov	r22, r21
    1e02:	54 2f       	mov	r21, r20
    1e04:	43 2f       	mov	r20, r19
    1e06:	32 2f       	mov	r19, r18
    1e08:	22 27       	eor	r18, r18
    1e0a:	b8 50       	subi	r27, 0x08	; 8
    1e0c:	31 f7       	brne	.-52     	; 0x1dda <__udivmod64+0xe>
    1e0e:	bf 91       	pop	r27
    1e10:	27 c0       	rjmp	.+78     	; 0x1e60 <__udivmod64+0x94>
    1e12:	1b 2e       	mov	r1, r27
    1e14:	bf 91       	pop	r27
    1e16:	bb 27       	eor	r27, r27
    1e18:	22 0f       	add	r18, r18
    1e1a:	33 1f       	adc	r19, r19
    1e1c:	44 1f       	adc	r20, r20
    1e1e:	55 1f       	adc	r21, r21
    1e20:	66 1f       	adc	r22, r22
    1e22:	77 1f       	adc	r23, r23
    1e24:	88 1f       	adc	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	88 1c       	adc	r8, r8
    1e2a:	99 1c       	adc	r9, r9
    1e2c:	ee 1f       	adc	r30, r30
    1e2e:	ff 1f       	adc	r31, r31
    1e30:	cc 1f       	adc	r28, r28
    1e32:	dd 1f       	adc	r29, r29
    1e34:	aa 1f       	adc	r26, r26
    1e36:	bb 1f       	adc	r27, r27
    1e38:	8a 14       	cp	r8, r10
    1e3a:	9b 04       	cpc	r9, r11
    1e3c:	ec 05       	cpc	r30, r12
    1e3e:	fd 05       	cpc	r31, r13
    1e40:	ce 05       	cpc	r28, r14
    1e42:	df 05       	cpc	r29, r15
    1e44:	a0 07       	cpc	r26, r16
    1e46:	b1 07       	cpc	r27, r17
    1e48:	48 f0       	brcs	.+18     	; 0x1e5c <__udivmod64+0x90>
    1e4a:	8a 18       	sub	r8, r10
    1e4c:	9b 08       	sbc	r9, r11
    1e4e:	ec 09       	sbc	r30, r12
    1e50:	fd 09       	sbc	r31, r13
    1e52:	ce 09       	sbc	r28, r14
    1e54:	df 09       	sbc	r29, r15
    1e56:	a0 0b       	sbc	r26, r16
    1e58:	b1 0b       	sbc	r27, r17
    1e5a:	21 60       	ori	r18, 0x01	; 1
    1e5c:	1a 94       	dec	r1
    1e5e:	e1 f6       	brne	.-72     	; 0x1e18 <__udivmod64+0x4c>
    1e60:	2e f4       	brtc	.+10     	; 0x1e6c <__udivmod64+0xa0>
    1e62:	94 01       	movw	r18, r8
    1e64:	af 01       	movw	r20, r30
    1e66:	be 01       	movw	r22, r28
    1e68:	cd 01       	movw	r24, r26
    1e6a:	00 0c       	add	r0, r0
    1e6c:	08 95       	ret

00001e6e <__negdi2>:
    1e6e:	60 95       	com	r22
    1e70:	70 95       	com	r23
    1e72:	80 95       	com	r24
    1e74:	90 95       	com	r25
    1e76:	30 95       	com	r19
    1e78:	40 95       	com	r20
    1e7a:	50 95       	com	r21
    1e7c:	21 95       	neg	r18
    1e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e80:	4f 4f       	sbci	r20, 0xFF	; 255
    1e82:	5f 4f       	sbci	r21, 0xFF	; 255
    1e84:	6f 4f       	sbci	r22, 0xFF	; 255
    1e86:	7f 4f       	sbci	r23, 0xFF	; 255
    1e88:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8c:	08 95       	ret

00001e8e <__prologue_saves__>:
    1e8e:	2f 92       	push	r2
    1e90:	3f 92       	push	r3
    1e92:	4f 92       	push	r4
    1e94:	5f 92       	push	r5
    1e96:	6f 92       	push	r6
    1e98:	7f 92       	push	r7
    1e9a:	8f 92       	push	r8
    1e9c:	9f 92       	push	r9
    1e9e:	af 92       	push	r10
    1ea0:	bf 92       	push	r11
    1ea2:	cf 92       	push	r12
    1ea4:	df 92       	push	r13
    1ea6:	ef 92       	push	r14
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	ca 1b       	sub	r28, r26
    1eb8:	db 0b       	sbc	r29, r27
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	09 94       	ijmp

00001ec6 <__epilogue_restores__>:
    1ec6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ec8:	39 88       	ldd	r3, Y+17	; 0x11
    1eca:	48 88       	ldd	r4, Y+16	; 0x10
    1ecc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ece:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ed0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ed4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ed6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ed8:	b9 84       	ldd	r11, Y+9	; 0x09
    1eda:	c8 84       	ldd	r12, Y+8	; 0x08
    1edc:	df 80       	ldd	r13, Y+7	; 0x07
    1ede:	ee 80       	ldd	r14, Y+6	; 0x06
    1ee0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ee4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ee6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee8:	b9 81       	ldd	r27, Y+1	; 0x01
    1eea:	ce 0f       	add	r28, r30
    1eec:	d1 1d       	adc	r29, r1
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	ed 01       	movw	r28, r26
    1efa:	08 95       	ret

00001efc <__adddi3>:
    1efc:	2a 0d       	add	r18, r10
    1efe:	3b 1d       	adc	r19, r11
    1f00:	4c 1d       	adc	r20, r12
    1f02:	5d 1d       	adc	r21, r13
    1f04:	6e 1d       	adc	r22, r14
    1f06:	7f 1d       	adc	r23, r15
    1f08:	80 1f       	adc	r24, r16
    1f0a:	91 1f       	adc	r25, r17
    1f0c:	08 95       	ret

00001f0e <__subdi3>:
    1f0e:	2a 19       	sub	r18, r10
    1f10:	3b 09       	sbc	r19, r11
    1f12:	4c 09       	sbc	r20, r12
    1f14:	5d 09       	sbc	r21, r13
    1f16:	6e 09       	sbc	r22, r14
    1f18:	7f 09       	sbc	r23, r15
    1f1a:	80 0b       	sbc	r24, r16
    1f1c:	91 0b       	sbc	r25, r17
    1f1e:	08 95       	ret

00001f20 <__cmpdi2_s8>:
    1f20:	00 24       	eor	r0, r0
    1f22:	a7 fd       	sbrc	r26, 7
    1f24:	00 94       	com	r0
    1f26:	2a 17       	cp	r18, r26
    1f28:	30 05       	cpc	r19, r0
    1f2a:	40 05       	cpc	r20, r0
    1f2c:	50 05       	cpc	r21, r0
    1f2e:	60 05       	cpc	r22, r0
    1f30:	70 05       	cpc	r23, r0
    1f32:	80 05       	cpc	r24, r0
    1f34:	90 05       	cpc	r25, r0
    1f36:	08 95       	ret

00001f38 <__udivmodhi4>:
    1f38:	aa 1b       	sub	r26, r26
    1f3a:	bb 1b       	sub	r27, r27
    1f3c:	51 e1       	ldi	r21, 0x11	; 17
    1f3e:	07 c0       	rjmp	.+14     	; 0x1f4e <__udivmodhi4_ep>

00001f40 <__udivmodhi4_loop>:
    1f40:	aa 1f       	adc	r26, r26
    1f42:	bb 1f       	adc	r27, r27
    1f44:	a6 17       	cp	r26, r22
    1f46:	b7 07       	cpc	r27, r23
    1f48:	10 f0       	brcs	.+4      	; 0x1f4e <__udivmodhi4_ep>
    1f4a:	a6 1b       	sub	r26, r22
    1f4c:	b7 0b       	sbc	r27, r23

00001f4e <__udivmodhi4_ep>:
    1f4e:	88 1f       	adc	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	5a 95       	dec	r21
    1f54:	a9 f7       	brne	.-22     	; 0x1f40 <__udivmodhi4_loop>
    1f56:	80 95       	com	r24
    1f58:	90 95       	com	r25
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	08 95       	ret

00001f60 <__umulhisi3>:
    1f60:	a2 9f       	mul	r26, r18
    1f62:	b0 01       	movw	r22, r0
    1f64:	b3 9f       	mul	r27, r19
    1f66:	c0 01       	movw	r24, r0
    1f68:	a3 9f       	mul	r26, r19
    1f6a:	70 0d       	add	r23, r0
    1f6c:	81 1d       	adc	r24, r1
    1f6e:	11 24       	eor	r1, r1
    1f70:	91 1d       	adc	r25, r1
    1f72:	b2 9f       	mul	r27, r18
    1f74:	70 0d       	add	r23, r0
    1f76:	81 1d       	adc	r24, r1
    1f78:	11 24       	eor	r1, r1
    1f7a:	91 1d       	adc	r25, r1
    1f7c:	08 95       	ret

00001f7e <do_rand>:
    1f7e:	8f 92       	push	r8
    1f80:	9f 92       	push	r9
    1f82:	af 92       	push	r10
    1f84:	bf 92       	push	r11
    1f86:	cf 92       	push	r12
    1f88:	df 92       	push	r13
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
    1f94:	68 81       	ld	r22, Y
    1f96:	79 81       	ldd	r23, Y+1	; 0x01
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9c:	61 15       	cp	r22, r1
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	81 05       	cpc	r24, r1
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	21 f4       	brne	.+8      	; 0x1fae <do_rand+0x30>
    1fa6:	64 e2       	ldi	r22, 0x24	; 36
    1fa8:	79 ed       	ldi	r23, 0xD9	; 217
    1faa:	8b e5       	ldi	r24, 0x5B	; 91
    1fac:	97 e0       	ldi	r25, 0x07	; 7
    1fae:	2d e1       	ldi	r18, 0x1D	; 29
    1fb0:	33 ef       	ldi	r19, 0xF3	; 243
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	50 e0       	ldi	r21, 0x00	; 0
    1fb6:	0e 94 de 12 	call	0x25bc	; 0x25bc <__divmodsi4>
    1fba:	49 01       	movw	r8, r18
    1fbc:	5a 01       	movw	r10, r20
    1fbe:	9b 01       	movw	r18, r22
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	a7 ea       	ldi	r26, 0xA7	; 167
    1fc4:	b1 e4       	ldi	r27, 0x41	; 65
    1fc6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__muluhisi3>
    1fca:	6b 01       	movw	r12, r22
    1fcc:	7c 01       	movw	r14, r24
    1fce:	ac ee       	ldi	r26, 0xEC	; 236
    1fd0:	b4 ef       	ldi	r27, 0xF4	; 244
    1fd2:	a5 01       	movw	r20, r10
    1fd4:	94 01       	movw	r18, r8
    1fd6:	0e 94 0b 13 	call	0x2616	; 0x2616 <__mulohisi3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8c 0d       	add	r24, r12
    1fe0:	9d 1d       	adc	r25, r13
    1fe2:	ae 1d       	adc	r26, r14
    1fe4:	bf 1d       	adc	r27, r15
    1fe6:	b7 ff       	sbrs	r27, 7
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <do_rand+0x72>
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	a1 09       	sbc	r26, r1
    1fee:	b0 48       	sbci	r27, 0x80	; 128
    1ff0:	88 83       	st	Y, r24
    1ff2:	99 83       	std	Y+1, r25	; 0x01
    1ff4:	aa 83       	std	Y+2, r26	; 0x02
    1ff6:	bb 83       	std	Y+3, r27	; 0x03
    1ff8:	9f 77       	andi	r25, 0x7F	; 127
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	ff 90       	pop	r15
    2000:	ef 90       	pop	r14
    2002:	df 90       	pop	r13
    2004:	cf 90       	pop	r12
    2006:	bf 90       	pop	r11
    2008:	af 90       	pop	r10
    200a:	9f 90       	pop	r9
    200c:	8f 90       	pop	r8
    200e:	08 95       	ret

00002010 <rand_r>:
    2010:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <do_rand>
    2014:	08 95       	ret

00002016 <rand>:
    2016:	80 e6       	ldi	r24, 0x60	; 96
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <do_rand>
    201e:	08 95       	ret

00002020 <srand>:
    2020:	a0 e0       	ldi	r26, 0x00	; 0
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    2028:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    202c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    2030:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    2034:	08 95       	ret

00002036 <strrev>:
    2036:	dc 01       	movw	r26, r24
    2038:	fc 01       	movw	r30, r24
    203a:	67 2f       	mov	r22, r23
    203c:	71 91       	ld	r23, Z+
    203e:	77 23       	and	r23, r23
    2040:	e1 f7       	brne	.-8      	; 0x203a <strrev+0x4>
    2042:	32 97       	sbiw	r30, 0x02	; 2
    2044:	04 c0       	rjmp	.+8      	; 0x204e <strrev+0x18>
    2046:	7c 91       	ld	r23, X
    2048:	6d 93       	st	X+, r22
    204a:	70 83       	st	Z, r23
    204c:	62 91       	ld	r22, -Z
    204e:	ae 17       	cp	r26, r30
    2050:	bf 07       	cpc	r27, r31
    2052:	c8 f3       	brcs	.-14     	; 0x2046 <strrev+0x10>
    2054:	08 95       	ret

00002056 <sprintf>:
    2056:	ae e0       	ldi	r26, 0x0E	; 14
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e1 e3       	ldi	r30, 0x31	; 49
    205c:	f0 e1       	ldi	r31, 0x10	; 16
    205e:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__prologue_saves__+0x1c>
    2062:	0d 89       	ldd	r16, Y+21	; 0x15
    2064:	1e 89       	ldd	r17, Y+22	; 0x16
    2066:	86 e0       	ldi	r24, 0x06	; 6
    2068:	8c 83       	std	Y+4, r24	; 0x04
    206a:	1a 83       	std	Y+2, r17	; 0x02
    206c:	09 83       	std	Y+1, r16	; 0x01
    206e:	8f ef       	ldi	r24, 0xFF	; 255
    2070:	9f e7       	ldi	r25, 0x7F	; 127
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	ae 01       	movw	r20, r28
    2078:	47 5e       	subi	r20, 0xE7	; 231
    207a:	5f 4f       	sbci	r21, 0xFF	; 255
    207c:	6f 89       	ldd	r22, Y+23	; 0x17
    207e:	78 8d       	ldd	r23, Y+24	; 0x18
    2080:	ce 01       	movw	r24, r28
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	0e 94 4d 10 	call	0x209a	; 0x209a <vfprintf>
    2088:	ef 81       	ldd	r30, Y+7	; 0x07
    208a:	f8 85       	ldd	r31, Y+8	; 0x08
    208c:	e0 0f       	add	r30, r16
    208e:	f1 1f       	adc	r31, r17
    2090:	10 82       	st	Z, r1
    2092:	2e 96       	adiw	r28, 0x0e	; 14
    2094:	e4 e0       	ldi	r30, 0x04	; 4
    2096:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__epilogue_restores__+0x1c>

0000209a <vfprintf>:
    209a:	ab e0       	ldi	r26, 0x0B	; 11
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e3 e5       	ldi	r30, 0x53	; 83
    20a0:	f0 e1       	ldi	r31, 0x10	; 16
    20a2:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__prologue_saves__>
    20a6:	6c 01       	movw	r12, r24
    20a8:	7b 01       	movw	r14, r22
    20aa:	8a 01       	movw	r16, r20
    20ac:	fc 01       	movw	r30, r24
    20ae:	17 82       	std	Z+7, r1	; 0x07
    20b0:	16 82       	std	Z+6, r1	; 0x06
    20b2:	83 81       	ldd	r24, Z+3	; 0x03
    20b4:	81 ff       	sbrs	r24, 1
    20b6:	cc c1       	rjmp	.+920    	; 0x2450 <vfprintf+0x3b6>
    20b8:	ce 01       	movw	r24, r28
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	3c 01       	movw	r6, r24
    20be:	f6 01       	movw	r30, r12
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	f7 01       	movw	r30, r14
    20c4:	93 fd       	sbrc	r25, 3
    20c6:	85 91       	lpm	r24, Z+
    20c8:	93 ff       	sbrs	r25, 3
    20ca:	81 91       	ld	r24, Z+
    20cc:	7f 01       	movw	r14, r30
    20ce:	88 23       	and	r24, r24
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <vfprintf+0x3a>
    20d2:	ba c1       	rjmp	.+884    	; 0x2448 <vfprintf+0x3ae>
    20d4:	85 32       	cpi	r24, 0x25	; 37
    20d6:	39 f4       	brne	.+14     	; 0x20e6 <vfprintf+0x4c>
    20d8:	93 fd       	sbrc	r25, 3
    20da:	85 91       	lpm	r24, Z+
    20dc:	93 ff       	sbrs	r25, 3
    20de:	81 91       	ld	r24, Z+
    20e0:	7f 01       	movw	r14, r30
    20e2:	85 32       	cpi	r24, 0x25	; 37
    20e4:	29 f4       	brne	.+10     	; 0x20f0 <vfprintf+0x56>
    20e6:	b6 01       	movw	r22, r12
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 94 44 12 	call	0x2488	; 0x2488 <fputc>
    20ee:	e7 cf       	rjmp	.-50     	; 0x20be <vfprintf+0x24>
    20f0:	91 2c       	mov	r9, r1
    20f2:	21 2c       	mov	r2, r1
    20f4:	31 2c       	mov	r3, r1
    20f6:	ff e1       	ldi	r31, 0x1F	; 31
    20f8:	f3 15       	cp	r31, r3
    20fa:	d8 f0       	brcs	.+54     	; 0x2132 <vfprintf+0x98>
    20fc:	8b 32       	cpi	r24, 0x2B	; 43
    20fe:	79 f0       	breq	.+30     	; 0x211e <vfprintf+0x84>
    2100:	38 f4       	brcc	.+14     	; 0x2110 <vfprintf+0x76>
    2102:	80 32       	cpi	r24, 0x20	; 32
    2104:	79 f0       	breq	.+30     	; 0x2124 <vfprintf+0x8a>
    2106:	83 32       	cpi	r24, 0x23	; 35
    2108:	a1 f4       	brne	.+40     	; 0x2132 <vfprintf+0x98>
    210a:	23 2d       	mov	r18, r3
    210c:	20 61       	ori	r18, 0x10	; 16
    210e:	1d c0       	rjmp	.+58     	; 0x214a <vfprintf+0xb0>
    2110:	8d 32       	cpi	r24, 0x2D	; 45
    2112:	61 f0       	breq	.+24     	; 0x212c <vfprintf+0x92>
    2114:	80 33       	cpi	r24, 0x30	; 48
    2116:	69 f4       	brne	.+26     	; 0x2132 <vfprintf+0x98>
    2118:	23 2d       	mov	r18, r3
    211a:	21 60       	ori	r18, 0x01	; 1
    211c:	16 c0       	rjmp	.+44     	; 0x214a <vfprintf+0xb0>
    211e:	83 2d       	mov	r24, r3
    2120:	82 60       	ori	r24, 0x02	; 2
    2122:	38 2e       	mov	r3, r24
    2124:	e3 2d       	mov	r30, r3
    2126:	e4 60       	ori	r30, 0x04	; 4
    2128:	3e 2e       	mov	r3, r30
    212a:	2a c0       	rjmp	.+84     	; 0x2180 <vfprintf+0xe6>
    212c:	f3 2d       	mov	r31, r3
    212e:	f8 60       	ori	r31, 0x08	; 8
    2130:	1d c0       	rjmp	.+58     	; 0x216c <vfprintf+0xd2>
    2132:	37 fc       	sbrc	r3, 7
    2134:	2d c0       	rjmp	.+90     	; 0x2190 <vfprintf+0xf6>
    2136:	20 ed       	ldi	r18, 0xD0	; 208
    2138:	28 0f       	add	r18, r24
    213a:	2a 30       	cpi	r18, 0x0A	; 10
    213c:	40 f0       	brcs	.+16     	; 0x214e <vfprintf+0xb4>
    213e:	8e 32       	cpi	r24, 0x2E	; 46
    2140:	b9 f4       	brne	.+46     	; 0x2170 <vfprintf+0xd6>
    2142:	36 fc       	sbrc	r3, 6
    2144:	81 c1       	rjmp	.+770    	; 0x2448 <vfprintf+0x3ae>
    2146:	23 2d       	mov	r18, r3
    2148:	20 64       	ori	r18, 0x40	; 64
    214a:	32 2e       	mov	r3, r18
    214c:	19 c0       	rjmp	.+50     	; 0x2180 <vfprintf+0xe6>
    214e:	36 fe       	sbrs	r3, 6
    2150:	06 c0       	rjmp	.+12     	; 0x215e <vfprintf+0xc4>
    2152:	8a e0       	ldi	r24, 0x0A	; 10
    2154:	98 9e       	mul	r9, r24
    2156:	20 0d       	add	r18, r0
    2158:	11 24       	eor	r1, r1
    215a:	92 2e       	mov	r9, r18
    215c:	11 c0       	rjmp	.+34     	; 0x2180 <vfprintf+0xe6>
    215e:	ea e0       	ldi	r30, 0x0A	; 10
    2160:	2e 9e       	mul	r2, r30
    2162:	20 0d       	add	r18, r0
    2164:	11 24       	eor	r1, r1
    2166:	22 2e       	mov	r2, r18
    2168:	f3 2d       	mov	r31, r3
    216a:	f0 62       	ori	r31, 0x20	; 32
    216c:	3f 2e       	mov	r3, r31
    216e:	08 c0       	rjmp	.+16     	; 0x2180 <vfprintf+0xe6>
    2170:	8c 36       	cpi	r24, 0x6C	; 108
    2172:	21 f4       	brne	.+8      	; 0x217c <vfprintf+0xe2>
    2174:	83 2d       	mov	r24, r3
    2176:	80 68       	ori	r24, 0x80	; 128
    2178:	38 2e       	mov	r3, r24
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <vfprintf+0xe6>
    217c:	88 36       	cpi	r24, 0x68	; 104
    217e:	41 f4       	brne	.+16     	; 0x2190 <vfprintf+0xf6>
    2180:	f7 01       	movw	r30, r14
    2182:	93 fd       	sbrc	r25, 3
    2184:	85 91       	lpm	r24, Z+
    2186:	93 ff       	sbrs	r25, 3
    2188:	81 91       	ld	r24, Z+
    218a:	7f 01       	movw	r14, r30
    218c:	81 11       	cpse	r24, r1
    218e:	b3 cf       	rjmp	.-154    	; 0x20f6 <vfprintf+0x5c>
    2190:	98 2f       	mov	r25, r24
    2192:	9f 7d       	andi	r25, 0xDF	; 223
    2194:	95 54       	subi	r25, 0x45	; 69
    2196:	93 30       	cpi	r25, 0x03	; 3
    2198:	28 f4       	brcc	.+10     	; 0x21a4 <vfprintf+0x10a>
    219a:	0c 5f       	subi	r16, 0xFC	; 252
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	9f e3       	ldi	r25, 0x3F	; 63
    21a0:	99 83       	std	Y+1, r25	; 0x01
    21a2:	0d c0       	rjmp	.+26     	; 0x21be <vfprintf+0x124>
    21a4:	83 36       	cpi	r24, 0x63	; 99
    21a6:	31 f0       	breq	.+12     	; 0x21b4 <vfprintf+0x11a>
    21a8:	83 37       	cpi	r24, 0x73	; 115
    21aa:	71 f0       	breq	.+28     	; 0x21c8 <vfprintf+0x12e>
    21ac:	83 35       	cpi	r24, 0x53	; 83
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <vfprintf+0x118>
    21b0:	59 c0       	rjmp	.+178    	; 0x2264 <vfprintf+0x1ca>
    21b2:	21 c0       	rjmp	.+66     	; 0x21f6 <vfprintf+0x15c>
    21b4:	f8 01       	movw	r30, r16
    21b6:	80 81       	ld	r24, Z
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	0e 5f       	subi	r16, 0xFE	; 254
    21bc:	1f 4f       	sbci	r17, 0xFF	; 255
    21be:	88 24       	eor	r8, r8
    21c0:	83 94       	inc	r8
    21c2:	91 2c       	mov	r9, r1
    21c4:	53 01       	movw	r10, r6
    21c6:	13 c0       	rjmp	.+38     	; 0x21ee <vfprintf+0x154>
    21c8:	28 01       	movw	r4, r16
    21ca:	f2 e0       	ldi	r31, 0x02	; 2
    21cc:	4f 0e       	add	r4, r31
    21ce:	51 1c       	adc	r5, r1
    21d0:	f8 01       	movw	r30, r16
    21d2:	a0 80       	ld	r10, Z
    21d4:	b1 80       	ldd	r11, Z+1	; 0x01
    21d6:	36 fe       	sbrs	r3, 6
    21d8:	03 c0       	rjmp	.+6      	; 0x21e0 <vfprintf+0x146>
    21da:	69 2d       	mov	r22, r9
    21dc:	70 e0       	ldi	r23, 0x00	; 0
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <vfprintf+0x14a>
    21e0:	6f ef       	ldi	r22, 0xFF	; 255
    21e2:	7f ef       	ldi	r23, 0xFF	; 255
    21e4:	c5 01       	movw	r24, r10
    21e6:	0e 94 39 12 	call	0x2472	; 0x2472 <strnlen>
    21ea:	4c 01       	movw	r8, r24
    21ec:	82 01       	movw	r16, r4
    21ee:	f3 2d       	mov	r31, r3
    21f0:	ff 77       	andi	r31, 0x7F	; 127
    21f2:	3f 2e       	mov	r3, r31
    21f4:	16 c0       	rjmp	.+44     	; 0x2222 <vfprintf+0x188>
    21f6:	28 01       	movw	r4, r16
    21f8:	22 e0       	ldi	r18, 0x02	; 2
    21fa:	42 0e       	add	r4, r18
    21fc:	51 1c       	adc	r5, r1
    21fe:	f8 01       	movw	r30, r16
    2200:	a0 80       	ld	r10, Z
    2202:	b1 80       	ldd	r11, Z+1	; 0x01
    2204:	36 fe       	sbrs	r3, 6
    2206:	03 c0       	rjmp	.+6      	; 0x220e <vfprintf+0x174>
    2208:	69 2d       	mov	r22, r9
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <vfprintf+0x178>
    220e:	6f ef       	ldi	r22, 0xFF	; 255
    2210:	7f ef       	ldi	r23, 0xFF	; 255
    2212:	c5 01       	movw	r24, r10
    2214:	0e 94 2e 12 	call	0x245c	; 0x245c <strnlen_P>
    2218:	4c 01       	movw	r8, r24
    221a:	f3 2d       	mov	r31, r3
    221c:	f0 68       	ori	r31, 0x80	; 128
    221e:	3f 2e       	mov	r3, r31
    2220:	82 01       	movw	r16, r4
    2222:	33 fc       	sbrc	r3, 3
    2224:	1b c0       	rjmp	.+54     	; 0x225c <vfprintf+0x1c2>
    2226:	82 2d       	mov	r24, r2
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	88 16       	cp	r8, r24
    222c:	99 06       	cpc	r9, r25
    222e:	b0 f4       	brcc	.+44     	; 0x225c <vfprintf+0x1c2>
    2230:	b6 01       	movw	r22, r12
    2232:	80 e2       	ldi	r24, 0x20	; 32
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 44 12 	call	0x2488	; 0x2488 <fputc>
    223a:	2a 94       	dec	r2
    223c:	f4 cf       	rjmp	.-24     	; 0x2226 <vfprintf+0x18c>
    223e:	f5 01       	movw	r30, r10
    2240:	37 fc       	sbrc	r3, 7
    2242:	85 91       	lpm	r24, Z+
    2244:	37 fe       	sbrs	r3, 7
    2246:	81 91       	ld	r24, Z+
    2248:	5f 01       	movw	r10, r30
    224a:	b6 01       	movw	r22, r12
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 44 12 	call	0x2488	; 0x2488 <fputc>
    2252:	21 10       	cpse	r2, r1
    2254:	2a 94       	dec	r2
    2256:	21 e0       	ldi	r18, 0x01	; 1
    2258:	82 1a       	sub	r8, r18
    225a:	91 08       	sbc	r9, r1
    225c:	81 14       	cp	r8, r1
    225e:	91 04       	cpc	r9, r1
    2260:	71 f7       	brne	.-36     	; 0x223e <vfprintf+0x1a4>
    2262:	e8 c0       	rjmp	.+464    	; 0x2434 <vfprintf+0x39a>
    2264:	84 36       	cpi	r24, 0x64	; 100
    2266:	11 f0       	breq	.+4      	; 0x226c <vfprintf+0x1d2>
    2268:	89 36       	cpi	r24, 0x69	; 105
    226a:	41 f5       	brne	.+80     	; 0x22bc <vfprintf+0x222>
    226c:	f8 01       	movw	r30, r16
    226e:	37 fe       	sbrs	r3, 7
    2270:	07 c0       	rjmp	.+14     	; 0x2280 <vfprintf+0x1e6>
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	0c 5f       	subi	r16, 0xFC	; 252
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	08 c0       	rjmp	.+16     	; 0x2290 <vfprintf+0x1f6>
    2280:	60 81       	ld	r22, Z
    2282:	71 81       	ldd	r23, Z+1	; 0x01
    2284:	07 2e       	mov	r0, r23
    2286:	00 0c       	add	r0, r0
    2288:	88 0b       	sbc	r24, r24
    228a:	99 0b       	sbc	r25, r25
    228c:	0e 5f       	subi	r16, 0xFE	; 254
    228e:	1f 4f       	sbci	r17, 0xFF	; 255
    2290:	f3 2d       	mov	r31, r3
    2292:	ff 76       	andi	r31, 0x6F	; 111
    2294:	3f 2e       	mov	r3, r31
    2296:	97 ff       	sbrs	r25, 7
    2298:	09 c0       	rjmp	.+18     	; 0x22ac <vfprintf+0x212>
    229a:	90 95       	com	r25
    229c:	80 95       	com	r24
    229e:	70 95       	com	r23
    22a0:	61 95       	neg	r22
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	8f 4f       	sbci	r24, 0xFF	; 255
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	f0 68       	ori	r31, 0x80	; 128
    22aa:	3f 2e       	mov	r3, r31
    22ac:	2a e0       	ldi	r18, 0x0A	; 10
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	a3 01       	movw	r20, r6
    22b2:	0e 94 80 12 	call	0x2500	; 0x2500 <__ultoa_invert>
    22b6:	88 2e       	mov	r8, r24
    22b8:	86 18       	sub	r8, r6
    22ba:	45 c0       	rjmp	.+138    	; 0x2346 <vfprintf+0x2ac>
    22bc:	85 37       	cpi	r24, 0x75	; 117
    22be:	31 f4       	brne	.+12     	; 0x22cc <vfprintf+0x232>
    22c0:	23 2d       	mov	r18, r3
    22c2:	2f 7e       	andi	r18, 0xEF	; 239
    22c4:	b2 2e       	mov	r11, r18
    22c6:	2a e0       	ldi	r18, 0x0A	; 10
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	25 c0       	rjmp	.+74     	; 0x2316 <vfprintf+0x27c>
    22cc:	93 2d       	mov	r25, r3
    22ce:	99 7f       	andi	r25, 0xF9	; 249
    22d0:	b9 2e       	mov	r11, r25
    22d2:	8f 36       	cpi	r24, 0x6F	; 111
    22d4:	c1 f0       	breq	.+48     	; 0x2306 <vfprintf+0x26c>
    22d6:	18 f4       	brcc	.+6      	; 0x22de <vfprintf+0x244>
    22d8:	88 35       	cpi	r24, 0x58	; 88
    22da:	79 f0       	breq	.+30     	; 0x22fa <vfprintf+0x260>
    22dc:	b5 c0       	rjmp	.+362    	; 0x2448 <vfprintf+0x3ae>
    22de:	80 37       	cpi	r24, 0x70	; 112
    22e0:	19 f0       	breq	.+6      	; 0x22e8 <vfprintf+0x24e>
    22e2:	88 37       	cpi	r24, 0x78	; 120
    22e4:	21 f0       	breq	.+8      	; 0x22ee <vfprintf+0x254>
    22e6:	b0 c0       	rjmp	.+352    	; 0x2448 <vfprintf+0x3ae>
    22e8:	e9 2f       	mov	r30, r25
    22ea:	e0 61       	ori	r30, 0x10	; 16
    22ec:	be 2e       	mov	r11, r30
    22ee:	b4 fe       	sbrs	r11, 4
    22f0:	0d c0       	rjmp	.+26     	; 0x230c <vfprintf+0x272>
    22f2:	fb 2d       	mov	r31, r11
    22f4:	f4 60       	ori	r31, 0x04	; 4
    22f6:	bf 2e       	mov	r11, r31
    22f8:	09 c0       	rjmp	.+18     	; 0x230c <vfprintf+0x272>
    22fa:	34 fe       	sbrs	r3, 4
    22fc:	0a c0       	rjmp	.+20     	; 0x2312 <vfprintf+0x278>
    22fe:	29 2f       	mov	r18, r25
    2300:	26 60       	ori	r18, 0x06	; 6
    2302:	b2 2e       	mov	r11, r18
    2304:	06 c0       	rjmp	.+12     	; 0x2312 <vfprintf+0x278>
    2306:	28 e0       	ldi	r18, 0x08	; 8
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <vfprintf+0x27c>
    230c:	20 e1       	ldi	r18, 0x10	; 16
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <vfprintf+0x27c>
    2312:	20 e1       	ldi	r18, 0x10	; 16
    2314:	32 e0       	ldi	r19, 0x02	; 2
    2316:	f8 01       	movw	r30, r16
    2318:	b7 fe       	sbrs	r11, 7
    231a:	07 c0       	rjmp	.+14     	; 0x232a <vfprintf+0x290>
    231c:	60 81       	ld	r22, Z
    231e:	71 81       	ldd	r23, Z+1	; 0x01
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	0c 5f       	subi	r16, 0xFC	; 252
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	06 c0       	rjmp	.+12     	; 0x2336 <vfprintf+0x29c>
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 5f       	subi	r16, 0xFE	; 254
    2334:	1f 4f       	sbci	r17, 0xFF	; 255
    2336:	a3 01       	movw	r20, r6
    2338:	0e 94 80 12 	call	0x2500	; 0x2500 <__ultoa_invert>
    233c:	88 2e       	mov	r8, r24
    233e:	86 18       	sub	r8, r6
    2340:	fb 2d       	mov	r31, r11
    2342:	ff 77       	andi	r31, 0x7F	; 127
    2344:	3f 2e       	mov	r3, r31
    2346:	36 fe       	sbrs	r3, 6
    2348:	0d c0       	rjmp	.+26     	; 0x2364 <vfprintf+0x2ca>
    234a:	23 2d       	mov	r18, r3
    234c:	2e 7f       	andi	r18, 0xFE	; 254
    234e:	a2 2e       	mov	r10, r18
    2350:	89 14       	cp	r8, r9
    2352:	58 f4       	brcc	.+22     	; 0x236a <vfprintf+0x2d0>
    2354:	34 fe       	sbrs	r3, 4
    2356:	0b c0       	rjmp	.+22     	; 0x236e <vfprintf+0x2d4>
    2358:	32 fc       	sbrc	r3, 2
    235a:	09 c0       	rjmp	.+18     	; 0x236e <vfprintf+0x2d4>
    235c:	83 2d       	mov	r24, r3
    235e:	8e 7e       	andi	r24, 0xEE	; 238
    2360:	a8 2e       	mov	r10, r24
    2362:	05 c0       	rjmp	.+10     	; 0x236e <vfprintf+0x2d4>
    2364:	b8 2c       	mov	r11, r8
    2366:	a3 2c       	mov	r10, r3
    2368:	03 c0       	rjmp	.+6      	; 0x2370 <vfprintf+0x2d6>
    236a:	b8 2c       	mov	r11, r8
    236c:	01 c0       	rjmp	.+2      	; 0x2370 <vfprintf+0x2d6>
    236e:	b9 2c       	mov	r11, r9
    2370:	a4 fe       	sbrs	r10, 4
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <vfprintf+0x2f8>
    2374:	fe 01       	movw	r30, r28
    2376:	e8 0d       	add	r30, r8
    2378:	f1 1d       	adc	r31, r1
    237a:	80 81       	ld	r24, Z
    237c:	80 33       	cpi	r24, 0x30	; 48
    237e:	21 f4       	brne	.+8      	; 0x2388 <vfprintf+0x2ee>
    2380:	9a 2d       	mov	r25, r10
    2382:	99 7e       	andi	r25, 0xE9	; 233
    2384:	a9 2e       	mov	r10, r25
    2386:	09 c0       	rjmp	.+18     	; 0x239a <vfprintf+0x300>
    2388:	a2 fe       	sbrs	r10, 2
    238a:	06 c0       	rjmp	.+12     	; 0x2398 <vfprintf+0x2fe>
    238c:	b3 94       	inc	r11
    238e:	b3 94       	inc	r11
    2390:	04 c0       	rjmp	.+8      	; 0x239a <vfprintf+0x300>
    2392:	8a 2d       	mov	r24, r10
    2394:	86 78       	andi	r24, 0x86	; 134
    2396:	09 f0       	breq	.+2      	; 0x239a <vfprintf+0x300>
    2398:	b3 94       	inc	r11
    239a:	a3 fc       	sbrc	r10, 3
    239c:	11 c0       	rjmp	.+34     	; 0x23c0 <vfprintf+0x326>
    239e:	a0 fe       	sbrs	r10, 0
    23a0:	06 c0       	rjmp	.+12     	; 0x23ae <vfprintf+0x314>
    23a2:	b2 14       	cp	r11, r2
    23a4:	88 f4       	brcc	.+34     	; 0x23c8 <vfprintf+0x32e>
    23a6:	28 0c       	add	r2, r8
    23a8:	92 2c       	mov	r9, r2
    23aa:	9b 18       	sub	r9, r11
    23ac:	0e c0       	rjmp	.+28     	; 0x23ca <vfprintf+0x330>
    23ae:	b2 14       	cp	r11, r2
    23b0:	60 f4       	brcc	.+24     	; 0x23ca <vfprintf+0x330>
    23b2:	b6 01       	movw	r22, r12
    23b4:	80 e2       	ldi	r24, 0x20	; 32
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 44 12 	call	0x2488	; 0x2488 <fputc>
    23bc:	b3 94       	inc	r11
    23be:	f7 cf       	rjmp	.-18     	; 0x23ae <vfprintf+0x314>
    23c0:	b2 14       	cp	r11, r2
    23c2:	18 f4       	brcc	.+6      	; 0x23ca <vfprintf+0x330>
    23c4:	2b 18       	sub	r2, r11
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <vfprintf+0x332>
    23c8:	98 2c       	mov	r9, r8
    23ca:	21 2c       	mov	r2, r1
    23cc:	a4 fe       	sbrs	r10, 4
    23ce:	10 c0       	rjmp	.+32     	; 0x23f0 <vfprintf+0x356>
    23d0:	b6 01       	movw	r22, r12
    23d2:	80 e3       	ldi	r24, 0x30	; 48
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 44 12 	call	0x2488	; 0x2488 <fputc>
    23da:	a2 fe       	sbrs	r10, 2
    23dc:	17 c0       	rjmp	.+46     	; 0x240c <vfprintf+0x372>
    23de:	a1 fc       	sbrc	r10, 1
    23e0:	03 c0       	rjmp	.+6      	; 0x23e8 <vfprintf+0x34e>
    23e2:	88 e7       	ldi	r24, 0x78	; 120
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <vfprintf+0x352>
    23e8:	88 e5       	ldi	r24, 0x58	; 88
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	b6 01       	movw	r22, r12
    23ee:	0c c0       	rjmp	.+24     	; 0x2408 <vfprintf+0x36e>
    23f0:	8a 2d       	mov	r24, r10
    23f2:	86 78       	andi	r24, 0x86	; 134
    23f4:	59 f0       	breq	.+22     	; 0x240c <vfprintf+0x372>
    23f6:	a1 fe       	sbrs	r10, 1
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <vfprintf+0x364>
    23fa:	8b e2       	ldi	r24, 0x2B	; 43
    23fc:	01 c0       	rjmp	.+2      	; 0x2400 <vfprintf+0x366>
    23fe:	80 e2       	ldi	r24, 0x20	; 32
    2400:	a7 fc       	sbrc	r10, 7
    2402:	8d e2       	ldi	r24, 0x2D	; 45
    2404:	b6 01       	movw	r22, r12
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	0e 94 44 12 	call	0x2488	; 0x2488 <fputc>
    240c:	89 14       	cp	r8, r9
    240e:	38 f4       	brcc	.+14     	; 0x241e <vfprintf+0x384>
    2410:	b6 01       	movw	r22, r12
    2412:	80 e3       	ldi	r24, 0x30	; 48
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0e 94 44 12 	call	0x2488	; 0x2488 <fputc>
    241a:	9a 94       	dec	r9
    241c:	f7 cf       	rjmp	.-18     	; 0x240c <vfprintf+0x372>
    241e:	8a 94       	dec	r8
    2420:	f3 01       	movw	r30, r6
    2422:	e8 0d       	add	r30, r8
    2424:	f1 1d       	adc	r31, r1
    2426:	80 81       	ld	r24, Z
    2428:	b6 01       	movw	r22, r12
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 44 12 	call	0x2488	; 0x2488 <fputc>
    2430:	81 10       	cpse	r8, r1
    2432:	f5 cf       	rjmp	.-22     	; 0x241e <vfprintf+0x384>
    2434:	22 20       	and	r2, r2
    2436:	09 f4       	brne	.+2      	; 0x243a <vfprintf+0x3a0>
    2438:	42 ce       	rjmp	.-892    	; 0x20be <vfprintf+0x24>
    243a:	b6 01       	movw	r22, r12
    243c:	80 e2       	ldi	r24, 0x20	; 32
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 44 12 	call	0x2488	; 0x2488 <fputc>
    2444:	2a 94       	dec	r2
    2446:	f6 cf       	rjmp	.-20     	; 0x2434 <vfprintf+0x39a>
    2448:	f6 01       	movw	r30, r12
    244a:	86 81       	ldd	r24, Z+6	; 0x06
    244c:	97 81       	ldd	r25, Z+7	; 0x07
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <vfprintf+0x3ba>
    2450:	8f ef       	ldi	r24, 0xFF	; 255
    2452:	9f ef       	ldi	r25, 0xFF	; 255
    2454:	2b 96       	adiw	r28, 0x0b	; 11
    2456:	e2 e1       	ldi	r30, 0x12	; 18
    2458:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__epilogue_restores__>

0000245c <strnlen_P>:
    245c:	fc 01       	movw	r30, r24
    245e:	05 90       	lpm	r0, Z+
    2460:	61 50       	subi	r22, 0x01	; 1
    2462:	70 40       	sbci	r23, 0x00	; 0
    2464:	01 10       	cpse	r0, r1
    2466:	d8 f7       	brcc	.-10     	; 0x245e <strnlen_P+0x2>
    2468:	80 95       	com	r24
    246a:	90 95       	com	r25
    246c:	8e 0f       	add	r24, r30
    246e:	9f 1f       	adc	r25, r31
    2470:	08 95       	ret

00002472 <strnlen>:
    2472:	fc 01       	movw	r30, r24
    2474:	61 50       	subi	r22, 0x01	; 1
    2476:	70 40       	sbci	r23, 0x00	; 0
    2478:	01 90       	ld	r0, Z+
    247a:	01 10       	cpse	r0, r1
    247c:	d8 f7       	brcc	.-10     	; 0x2474 <strnlen+0x2>
    247e:	80 95       	com	r24
    2480:	90 95       	com	r25
    2482:	8e 0f       	add	r24, r30
    2484:	9f 1f       	adc	r25, r31
    2486:	08 95       	ret

00002488 <fputc>:
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	fb 01       	movw	r30, r22
    2492:	23 81       	ldd	r18, Z+3	; 0x03
    2494:	21 fd       	sbrc	r18, 1
    2496:	03 c0       	rjmp	.+6      	; 0x249e <fputc+0x16>
    2498:	8f ef       	ldi	r24, 0xFF	; 255
    249a:	9f ef       	ldi	r25, 0xFF	; 255
    249c:	2c c0       	rjmp	.+88     	; 0x24f6 <fputc+0x6e>
    249e:	22 ff       	sbrs	r18, 2
    24a0:	16 c0       	rjmp	.+44     	; 0x24ce <fputc+0x46>
    24a2:	46 81       	ldd	r20, Z+6	; 0x06
    24a4:	57 81       	ldd	r21, Z+7	; 0x07
    24a6:	24 81       	ldd	r18, Z+4	; 0x04
    24a8:	35 81       	ldd	r19, Z+5	; 0x05
    24aa:	42 17       	cp	r20, r18
    24ac:	53 07       	cpc	r21, r19
    24ae:	44 f4       	brge	.+16     	; 0x24c0 <fputc+0x38>
    24b0:	a0 81       	ld	r26, Z
    24b2:	b1 81       	ldd	r27, Z+1	; 0x01
    24b4:	9d 01       	movw	r18, r26
    24b6:	2f 5f       	subi	r18, 0xFF	; 255
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	31 83       	std	Z+1, r19	; 0x01
    24bc:	20 83       	st	Z, r18
    24be:	8c 93       	st	X, r24
    24c0:	26 81       	ldd	r18, Z+6	; 0x06
    24c2:	37 81       	ldd	r19, Z+7	; 0x07
    24c4:	2f 5f       	subi	r18, 0xFF	; 255
    24c6:	3f 4f       	sbci	r19, 0xFF	; 255
    24c8:	37 83       	std	Z+7, r19	; 0x07
    24ca:	26 83       	std	Z+6, r18	; 0x06
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <fputc+0x6e>
    24ce:	8b 01       	movw	r16, r22
    24d0:	ec 01       	movw	r28, r24
    24d2:	fb 01       	movw	r30, r22
    24d4:	00 84       	ldd	r0, Z+8	; 0x08
    24d6:	f1 85       	ldd	r31, Z+9	; 0x09
    24d8:	e0 2d       	mov	r30, r0
    24da:	09 95       	icall
    24dc:	89 2b       	or	r24, r25
    24de:	e1 f6       	brne	.-72     	; 0x2498 <fputc+0x10>
    24e0:	d8 01       	movw	r26, r16
    24e2:	16 96       	adiw	r26, 0x06	; 6
    24e4:	8d 91       	ld	r24, X+
    24e6:	9c 91       	ld	r25, X
    24e8:	17 97       	sbiw	r26, 0x07	; 7
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	17 96       	adiw	r26, 0x07	; 7
    24ee:	9c 93       	st	X, r25
    24f0:	8e 93       	st	-X, r24
    24f2:	16 97       	sbiw	r26, 0x06	; 6
    24f4:	ce 01       	movw	r24, r28
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	08 95       	ret

00002500 <__ultoa_invert>:
    2500:	fa 01       	movw	r30, r20
    2502:	aa 27       	eor	r26, r26
    2504:	28 30       	cpi	r18, 0x08	; 8
    2506:	51 f1       	breq	.+84     	; 0x255c <__ultoa_invert+0x5c>
    2508:	20 31       	cpi	r18, 0x10	; 16
    250a:	81 f1       	breq	.+96     	; 0x256c <__ultoa_invert+0x6c>
    250c:	e8 94       	clt
    250e:	6f 93       	push	r22
    2510:	6e 7f       	andi	r22, 0xFE	; 254
    2512:	6e 5f       	subi	r22, 0xFE	; 254
    2514:	7f 4f       	sbci	r23, 0xFF	; 255
    2516:	8f 4f       	sbci	r24, 0xFF	; 255
    2518:	9f 4f       	sbci	r25, 0xFF	; 255
    251a:	af 4f       	sbci	r26, 0xFF	; 255
    251c:	b1 e0       	ldi	r27, 0x01	; 1
    251e:	3e d0       	rcall	.+124    	; 0x259c <__ultoa_invert+0x9c>
    2520:	b4 e0       	ldi	r27, 0x04	; 4
    2522:	3c d0       	rcall	.+120    	; 0x259c <__ultoa_invert+0x9c>
    2524:	67 0f       	add	r22, r23
    2526:	78 1f       	adc	r23, r24
    2528:	89 1f       	adc	r24, r25
    252a:	9a 1f       	adc	r25, r26
    252c:	a1 1d       	adc	r26, r1
    252e:	68 0f       	add	r22, r24
    2530:	79 1f       	adc	r23, r25
    2532:	8a 1f       	adc	r24, r26
    2534:	91 1d       	adc	r25, r1
    2536:	a1 1d       	adc	r26, r1
    2538:	6a 0f       	add	r22, r26
    253a:	71 1d       	adc	r23, r1
    253c:	81 1d       	adc	r24, r1
    253e:	91 1d       	adc	r25, r1
    2540:	a1 1d       	adc	r26, r1
    2542:	20 d0       	rcall	.+64     	; 0x2584 <__ultoa_invert+0x84>
    2544:	09 f4       	brne	.+2      	; 0x2548 <__ultoa_invert+0x48>
    2546:	68 94       	set
    2548:	3f 91       	pop	r19
    254a:	2a e0       	ldi	r18, 0x0A	; 10
    254c:	26 9f       	mul	r18, r22
    254e:	11 24       	eor	r1, r1
    2550:	30 19       	sub	r19, r0
    2552:	30 5d       	subi	r19, 0xD0	; 208
    2554:	31 93       	st	Z+, r19
    2556:	de f6       	brtc	.-74     	; 0x250e <__ultoa_invert+0xe>
    2558:	cf 01       	movw	r24, r30
    255a:	08 95       	ret
    255c:	46 2f       	mov	r20, r22
    255e:	47 70       	andi	r20, 0x07	; 7
    2560:	40 5d       	subi	r20, 0xD0	; 208
    2562:	41 93       	st	Z+, r20
    2564:	b3 e0       	ldi	r27, 0x03	; 3
    2566:	0f d0       	rcall	.+30     	; 0x2586 <__ultoa_invert+0x86>
    2568:	c9 f7       	brne	.-14     	; 0x255c <__ultoa_invert+0x5c>
    256a:	f6 cf       	rjmp	.-20     	; 0x2558 <__ultoa_invert+0x58>
    256c:	46 2f       	mov	r20, r22
    256e:	4f 70       	andi	r20, 0x0F	; 15
    2570:	40 5d       	subi	r20, 0xD0	; 208
    2572:	4a 33       	cpi	r20, 0x3A	; 58
    2574:	18 f0       	brcs	.+6      	; 0x257c <__ultoa_invert+0x7c>
    2576:	49 5d       	subi	r20, 0xD9	; 217
    2578:	31 fd       	sbrc	r19, 1
    257a:	40 52       	subi	r20, 0x20	; 32
    257c:	41 93       	st	Z+, r20
    257e:	02 d0       	rcall	.+4      	; 0x2584 <__ultoa_invert+0x84>
    2580:	a9 f7       	brne	.-22     	; 0x256c <__ultoa_invert+0x6c>
    2582:	ea cf       	rjmp	.-44     	; 0x2558 <__ultoa_invert+0x58>
    2584:	b4 e0       	ldi	r27, 0x04	; 4
    2586:	a6 95       	lsr	r26
    2588:	97 95       	ror	r25
    258a:	87 95       	ror	r24
    258c:	77 95       	ror	r23
    258e:	67 95       	ror	r22
    2590:	ba 95       	dec	r27
    2592:	c9 f7       	brne	.-14     	; 0x2586 <__ultoa_invert+0x86>
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	61 05       	cpc	r22, r1
    2598:	71 05       	cpc	r23, r1
    259a:	08 95       	ret
    259c:	9b 01       	movw	r18, r22
    259e:	ac 01       	movw	r20, r24
    25a0:	0a 2e       	mov	r0, r26
    25a2:	06 94       	lsr	r0
    25a4:	57 95       	ror	r21
    25a6:	47 95       	ror	r20
    25a8:	37 95       	ror	r19
    25aa:	27 95       	ror	r18
    25ac:	ba 95       	dec	r27
    25ae:	c9 f7       	brne	.-14     	; 0x25a2 <__ultoa_invert+0xa2>
    25b0:	62 0f       	add	r22, r18
    25b2:	73 1f       	adc	r23, r19
    25b4:	84 1f       	adc	r24, r20
    25b6:	95 1f       	adc	r25, r21
    25b8:	a0 1d       	adc	r26, r0
    25ba:	08 95       	ret

000025bc <__divmodsi4>:
    25bc:	05 2e       	mov	r0, r21
    25be:	97 fb       	bst	r25, 7
    25c0:	1e f4       	brtc	.+6      	; 0x25c8 <__divmodsi4+0xc>
    25c2:	00 94       	com	r0
    25c4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__negsi2>
    25c8:	57 fd       	sbrc	r21, 7
    25ca:	07 d0       	rcall	.+14     	; 0x25da <__divmodsi4_neg2>
    25cc:	0e 94 10 13 	call	0x2620	; 0x2620 <__udivmodsi4>
    25d0:	07 fc       	sbrc	r0, 7
    25d2:	03 d0       	rcall	.+6      	; 0x25da <__divmodsi4_neg2>
    25d4:	4e f4       	brtc	.+18     	; 0x25e8 <__divmodsi4_exit>
    25d6:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__negsi2>

000025da <__divmodsi4_neg2>:
    25da:	50 95       	com	r21
    25dc:	40 95       	com	r20
    25de:	30 95       	com	r19
    25e0:	21 95       	neg	r18
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	4f 4f       	sbci	r20, 0xFF	; 255
    25e6:	5f 4f       	sbci	r21, 0xFF	; 255

000025e8 <__divmodsi4_exit>:
    25e8:	08 95       	ret

000025ea <__negsi2>:
    25ea:	90 95       	com	r25
    25ec:	80 95       	com	r24
    25ee:	70 95       	com	r23
    25f0:	61 95       	neg	r22
    25f2:	7f 4f       	sbci	r23, 0xFF	; 255
    25f4:	8f 4f       	sbci	r24, 0xFF	; 255
    25f6:	9f 4f       	sbci	r25, 0xFF	; 255
    25f8:	08 95       	ret

000025fa <__muluhisi3>:
    25fa:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__umulhisi3>
    25fe:	a5 9f       	mul	r26, r21
    2600:	90 0d       	add	r25, r0
    2602:	b4 9f       	mul	r27, r20
    2604:	90 0d       	add	r25, r0
    2606:	a4 9f       	mul	r26, r20
    2608:	80 0d       	add	r24, r0
    260a:	91 1d       	adc	r25, r1
    260c:	11 24       	eor	r1, r1
    260e:	08 95       	ret

00002610 <__mulshisi3>:
    2610:	b7 ff       	sbrs	r27, 7
    2612:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__muluhisi3>

00002616 <__mulohisi3>:
    2616:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__muluhisi3>
    261a:	82 1b       	sub	r24, r18
    261c:	93 0b       	sbc	r25, r19
    261e:	08 95       	ret

00002620 <__udivmodsi4>:
    2620:	a1 e2       	ldi	r26, 0x21	; 33
    2622:	1a 2e       	mov	r1, r26
    2624:	aa 1b       	sub	r26, r26
    2626:	bb 1b       	sub	r27, r27
    2628:	fd 01       	movw	r30, r26
    262a:	0d c0       	rjmp	.+26     	; 0x2646 <__udivmodsi4_ep>

0000262c <__udivmodsi4_loop>:
    262c:	aa 1f       	adc	r26, r26
    262e:	bb 1f       	adc	r27, r27
    2630:	ee 1f       	adc	r30, r30
    2632:	ff 1f       	adc	r31, r31
    2634:	a2 17       	cp	r26, r18
    2636:	b3 07       	cpc	r27, r19
    2638:	e4 07       	cpc	r30, r20
    263a:	f5 07       	cpc	r31, r21
    263c:	20 f0       	brcs	.+8      	; 0x2646 <__udivmodsi4_ep>
    263e:	a2 1b       	sub	r26, r18
    2640:	b3 0b       	sbc	r27, r19
    2642:	e4 0b       	sbc	r30, r20
    2644:	f5 0b       	sbc	r31, r21

00002646 <__udivmodsi4_ep>:
    2646:	66 1f       	adc	r22, r22
    2648:	77 1f       	adc	r23, r23
    264a:	88 1f       	adc	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	1a 94       	dec	r1
    2650:	69 f7       	brne	.-38     	; 0x262c <__udivmodsi4_loop>
    2652:	60 95       	com	r22
    2654:	70 95       	com	r23
    2656:	80 95       	com	r24
    2658:	90 95       	com	r25
    265a:	9b 01       	movw	r18, r22
    265c:	ac 01       	movw	r20, r24
    265e:	bd 01       	movw	r22, r26
    2660:	cf 01       	movw	r24, r30
    2662:	08 95       	ret

00002664 <_exit>:
    2664:	f8 94       	cli

00002666 <__stop_program>:
    2666:	ff cf       	rjmp	.-2      	; 0x2666 <__stop_program>
